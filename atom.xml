<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>执念の博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zh1n1an.github.io/"/>
  <updated>2019-11-10T10:16:01.549Z</updated>
  <id>https://zh1n1an.github.io/</id>
  
  <author>
    <name>执灬念</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>S9前夕小记</title>
    <link href="https://zh1n1an.github.io/2019/11/10/S9%E5%89%8D%E5%A4%95%E5%B0%8F%E8%AE%B0/"/>
    <id>https://zh1n1an.github.io/2019/11/10/S9前夕小记/</id>
    <published>2019-11-10T09:14:46.000Z</published>
    <updated>2019-11-10T10:16:01.549Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>2019年11月10日17：15分，我还在学校的图书馆四楼，旁边的同学们好多都去吃饭了，我咕噜咕噜地灌着水，等待着6点钟，错过高峰期吃饭，然后回宿舍洗澡，买上零食坐到电脑前准备观看一年一度的英雄联盟S赛的最重要的BO5。</p><a id="more"></a></li><li><p>回顾自己这么多年来对这个游戏的热爱，或许他让我迷失过，使我沉迷过，但是我从未后悔，这个我唯一热爱的游戏。或者说，现在的它对于我来说不仅仅是游戏。</p></li><li><p>初二到大三，整整八年，从一个懵懂的少年，到现在对未来的担忧和向往的青年（青年，少年是这么用的么？0.0）现在渐渐的，早已没有时间和心思去玩了，但是久不久的和高中同学一起开黑，那种无法控制，发自内心的开怀大笑，互相讥讽，那种0-10了也要喊破喉咙说XXX你真是个垃圾。</p></li><li><p>回顾一下自己这八年吧，从刚刚开始我是真的玩个寒冰射手，新手训练营都过不了，到在自己的小圈子里算是个玩ADC的大神（艾欧尼亚钻石，emm好像就大一打上去了，但是我也要吹）。或许这就是成长吧。纪念一下自己。</p></li><li><img src="/2019/11/10/S9%E5%89%8D%E5%A4%95%E5%B0%8F%E8%AE%B0/1.png" alt="1" style="zoom:25%;"></li><li><p>看着现在的战绩，一年也就几十场，好像它离我越来越远了，这个号还是S4转战艾欧尼亚30块钱买的号嘞，后面莫名其妙地成为了我地主号</p></li><li><p>今天回去把新英雄买了（我也不知道能不能买），我就又继续在全英雄地道路上走着，嘿嘿，还有6w多金币，噢不~，蓝色精粹，能撑多久呢。</p></li><li><p>今天是FPX对阵G2，不得不承认，今天G2真的好强啊，Caps春天来了么，阿P都愿意为他去打下路，想着自己半决赛猜都猜反了，我就要口嗨一句，今天G2必胜（偷偷地想着会不会有红色地冠军皮肤）。</p></li><li><p>Doinb啊，这个男人，从QG到RW到FPX到现在，还记得，去年那个在峡谷的ID“金咕咕想去S8”，打了几年都没进世界赛到了今天自己也没想过能进决赛吧，小凤凰，加油吧。</p></li><li><p>玩ADC，八年LOL，无法避免的一个人就是Uzi，我对Uzi的感慨真的太多太多了，我澡子哥，当时S3的皇族，一举拿下亚军（emmm~），当时还在读初中，互联网消息不连通，没有手机（有没卡0.0，偷偷带去看小说滴），某一天晚自习，学习干部日常给我们班放送了一份报纸，但是那份是被我们班传疯了的报纸，因为，皇族得了亚军。我那天晚上等了好久才等到那份报纸，足足看了三遍，我认为我们开心的不是拿下了亚军，是报纸上能刊登英雄联盟这款游戏，那种被认可的感觉，真的，好幸福。Uzi的故事就是从那时候开始的吧。</p></li><li><p>Uzi，从出道，到S8以前，被拳头官方称为过世界第一ADC，世界上无数个知名的狗吹（ <em>Doublelift</em> 、Rekkles），但是到了去年以前，只拿过一种冠军，全明星表演赛的Solo冠军，到了去年，那是我们狗粉最幸福的一年也是最悲惨的一年。Uzi夺冠了！2018年LPL春季赛冠军，小狗打破了自己的无冠魔咒。对于一个已经是第七年的老将，才拿到自己的第一个冠军，其实我无法想象到他是怎么坚持下来的。紧接而来的是：2018MSI冠军，2018洲际赛冠军，2018年雅加达亚运会表演赛代表中国队夺冠，2018年LPL夏季赛冠军，整个英雄联盟比赛，那一年，只要是小狗能参加的，参加了的，不管国际国内，还是重头戏亚运会，到此，冠军都有Uzi这三个字符。可惜，万万没想S8世界总决赛，到败在了8强G2的手里。那一天后，那种看着Uzi成长了这么多年的我，心里难言的痛，感觉自己的英雄倒了。</p></li><li><p>还记得2018年洲际赛给自己带来的感动，Doinb，那支RW，侠盗救世，那个从未在LCK打过比赛的韩，那几句LPL介绍的“打他蛋，打他蛋，蛋碎了”，仿佛他手上拿着克烈的砍刀，一刀一刀将LPL送入冠军。比赛结束，韩国人把Doinb喷杀了，但是要知道，他一开始就在LPL，他像Rooike一样采访只说中文，因为他是LPL的，他因在LPL而自豪，我们因为他在LPL而感到骄傲。其实女朋友问我，为什么当时才是第4局，RW赢了比最终LPL赢了还要激动。这让我想起来了那支2018年的RNG。还记得休息室“我们给你们打个第五局回来”。当时的RNG是无敌的，在LPL内心中，它是无敌的，是天神，是没有人能打过的，能将比赛拖入第五局交给RNG，在第四局打完，LPL的观众们，就觉得已经赢了，不错所料，赢了。眼泪在眼眶打转，那一届的MSI带给我太大的感动了。<img src="/2019/11/10/S9%E5%89%8D%E5%A4%95%E5%B0%8F%E8%AE%B0/2.png" alt="2"></p></li><li><p>英雄联盟带给我的不仅仅是游戏，更多的是感动，是坚持，是不放弃，是团队合作迸发出来的强大，或许，过了这一年，我对于英雄联盟的关注，会更少更少，但是它教会了我：</p><ul><li>“ 断剑重铸之日，骑士归来之时。” ——锐雯</li><li>“ 要记住我们为何而战。” ——艾瑞莉娅</li><li>“ 我命由我，不由天。”——亚索</li><li>“ 我曾踏足山巅，也曾跌入低谷，二者都让我受益良多。 ”——塔里克</li><li>“ 时间，不在于你拥有多少，而在于你怎样使用。 ”——艾克</li><li>“ 真正的大师永远都怀着一颗学徒的心 。”——易</li></ul></li><li><p>还是要偷偷的说：FPX，今晚加油！等一场金色的雨，等六个火红的皮肤，等一个“唐小幽的真眼”</p></li><li><p>我爱英雄联盟，我热联盟，I Love League of Legends，I‘m a LOLer.</p></li><li><p>然后</p><ul><li>再见，锐雯</li><li>再见，卡莎</li><li>再见，英雄联盟。</li><li>但是，我会依然热爱。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;2019年11月10日17：15分，我还在学校的图书馆四楼，旁边的同学们好多都去吃饭了，我咕噜咕噜地灌着水，等待着6点钟，错过高峰期吃饭，然后回宿舍洗澡，买上零食坐到电脑前准备观看一年一度的英雄联盟S赛的最重要的BO5。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="游戏" scheme="https://zh1n1an.github.io/categories/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="英雄联盟" scheme="https://zh1n1an.github.io/categories/%E6%B8%B8%E6%88%8F/%E8%8B%B1%E9%9B%84%E8%81%94%E7%9B%9F/"/>
    
    
      <category term="游戏" scheme="https://zh1n1an.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="英雄联盟" scheme="https://zh1n1an.github.io/tags/%E8%8B%B1%E9%9B%84%E8%81%94%E7%9B%9F/"/>
    
  </entry>
  
  <entry>
    <title>词法分析器</title>
    <link href="https://zh1n1an.github.io/2019/11/10/%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8/"/>
    <id>https://zh1n1an.github.io/2019/11/10/词法分析器/</id>
    <published>2019-11-10T08:52:28.000Z</published>
    <updated>2019-11-10T09:03:33.044Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><ul><li>已知待分析的Ｃ语言子集的词法：<ul><li>关键字：main if else int while char 均为小写。</li><li>专用符号：= + - * / &lt; &lt;= &gt; &gt;= == !=  ; , { } ( )</li></ul></li><li>实现对一个满足以上词法的分析。</li></ul><h1 id="算法流程图"><a href="#算法流程图" class="headerlink" title="算法流程图"></a>算法流程图</h1><p>首先在这记录一下我鸡汁的舍友找到了一个画流程图的在线网站，解救了一个用破解版Visio损害自己机子内正版Office一直在用PowerPoint画流程图的苦逼： <a href="https://www.processon.com/" target="_blank" rel="noopener">https://www.processon.com/</a> 愿此平台越做越好（别倒闭，否则我就枯了~）</p><a id="more"></a><p><img src="/2019/11/10/%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8/%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg" alt="流程图"></p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by ZhiNian on 2019/10/24.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ID 10 <span class="comment">//变量种别码为10</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUM 20 <span class="comment">//整型数字种别码为20</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> key[<span class="number">6</span>][<span class="number">10</span>] = &#123;<span class="string">"main"</span>, <span class="string">"int"</span>, <span class="string">"char"</span>, <span class="string">"if"</span>, <span class="string">"else"</span>, <span class="string">"while"</span>&#125;;<span class="comment">//通过二位数组定义标识符（这样数组下标+1便是对应的种别码）</span></span><br><span class="line"><span class="keyword">char</span> TOKEN[<span class="number">20</span>];<span class="comment">//储存每一个标识符或数字或符号的字符串</span></span><br><span class="line"></span><br><span class="line">FILE *fp;<span class="comment">//定义一个文件指针用来写入</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lookup</span><span class="params">(<span class="keyword">char</span> *token)</span> </span>&#123;<span class="comment">//TOKEN的字符串在六个标识符中寻找</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(token, key[i]))</span><br><span class="line">            <span class="keyword">return</span> i + <span class="number">1</span>;<span class="comment">//如果是就返回对应的种别码（数组下标+1便是种别码）</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//若不是则返回0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">char</span> *token)</span> </span>&#123;<span class="comment">//格式化输出</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"种别码：%d 单词符号：%s \n"</span>, id, token);<span class="comment">//格式化在控制台输出</span></span><br><span class="line">    <span class="comment">//以下是格式化输出写入文件</span></span><br><span class="line">    <span class="built_in">fputs</span>(<span class="string">"种别码："</span>, fp);</span><br><span class="line">    <span class="built_in">fprintf</span>(fp, <span class="string">"%d"</span>, id);</span><br><span class="line">    <span class="built_in">fputs</span>(<span class="string">" 单词符号："</span>, fp);</span><br><span class="line">    <span class="built_in">fputs</span>(token, fp);</span><br><span class="line">    <span class="built_in">fputs</span>(<span class="string">"\n"</span>, fp);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scanner</span><span class="params">(FILE *fp)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">int</span> i, c;</span><br><span class="line">    <span class="keyword">while</span> (ch != EOF) &#123;<span class="comment">//ch是否是End Of File 即文件末尾，不是则一直循环扫描，是则退出</span></span><br><span class="line">        ch = fgetc(fp);<span class="comment">//指针位置的字符读入ch</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isalpha</span>(ch)) &#123;<span class="comment">//判断此字符是否是英文</span></span><br><span class="line">            TOKEN[<span class="number">0</span>] = ch;<span class="comment">//是则将此字母写入TOKEN</span></span><br><span class="line">            ch = fgetc(fp);<span class="comment">//再指向下一个字符传入ch</span></span><br><span class="line">            i = <span class="number">1</span>;<span class="comment">//计数器+1</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="built_in">isalnum</span>(ch)) &#123;<span class="comment">//判断字符变量c是否为字母或数字</span></span><br><span class="line">                TOKEN[i] = ch;<span class="comment">//是则继续传入TOKEN</span></span><br><span class="line">                i++;<span class="comment">//计数器+1</span></span><br><span class="line">                ch = fgetc(fp);<span class="comment">//光标位置后移一个字节</span></span><br><span class="line">            &#125;<span class="comment">//单词识别结束</span></span><br><span class="line">            TOKEN[i] = <span class="string">'\0'</span>;<span class="comment">//加上'\0'形成字符串</span></span><br><span class="line">            fseek(fp, <span class="number">-1</span>, <span class="number">1</span>);<span class="comment">//因为用了fgetc光标会立马后移，所以进行前移一位防止错过一个字符</span></span><br><span class="line">            c = lookup(TOKEN);<span class="comment">//判断是否是关键词，是则返回相应种别码</span></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="number">0</span>)<span class="comment">//返回c说明不是</span></span><br><span class="line">                out(ID, TOKEN);<span class="comment">//那么传入种别码10，并传入TOKEN确定此关键词是变量名给out函数</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                out(c, TOKEN);<span class="comment">//否则传入标识符的种别码，传入字符串给out函数</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//若不是字母开头</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isdigit</span>(ch)) &#123;<span class="comment">//判断是否是十进制数字字符</span></span><br><span class="line">                TOKEN[<span class="number">0</span>] = ch;<span class="comment">//同上写入TOKEN，直至不是十进制数字字符为止</span></span><br><span class="line">                ch = fgetc(fp);</span><br><span class="line">                i = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) &#123;</span><br><span class="line">                    TOKEN[i] = ch;</span><br><span class="line">                    i++;</span><br><span class="line">                    ch = fgetc(fp);</span><br><span class="line">                &#125;</span><br><span class="line">                TOKEN[i] = <span class="string">'\0'</span>;</span><br><span class="line">                fseek(fp, <span class="number">-1</span>, <span class="number">1</span>);</span><br><span class="line">                out(NUM, TOKEN);<span class="comment">//传入NUM的种别码和当前字符串给out函数</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">//若既不是字母也不是数字</span></span><br><span class="line">                <span class="keyword">switch</span> (ch) &#123;<span class="comment">//switch判断是否是以下符号，是则按对应符号传入种别码并传入字符串给out函数</span></span><br><span class="line">                    <span class="keyword">case</span> <span class="string">' '</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'\n'</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'\t'</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> EOF:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">                        out(<span class="number">22</span>, <span class="string">"+"</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">                        out(<span class="number">23</span>, <span class="string">"-"</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">                        out(<span class="number">24</span>, <span class="string">"*"</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">                        out(<span class="number">25</span>, <span class="string">"/"</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">';'</span>:</span><br><span class="line">                        out(<span class="number">31</span>, <span class="string">";"</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">','</span>:</span><br><span class="line">                        out(<span class="number">30</span>, <span class="string">","</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'&#123;'</span>:</span><br><span class="line">                        out(<span class="number">28</span>, <span class="string">"&#123;"</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'&#125;'</span>:</span><br><span class="line">                        out(<span class="number">29</span>, <span class="string">"&#125;"</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'('</span>:</span><br><span class="line">                        out(<span class="number">26</span>, <span class="string">"("</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">')'</span>:</span><br><span class="line">                        out(<span class="number">27</span>, <span class="string">")"</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'&lt;'</span>:<span class="comment">//若是小于号</span></span><br><span class="line">                        ch = fgetc(fp);<span class="comment">//读取下一字符</span></span><br><span class="line">                        <span class="keyword">if</span> (ch == <span class="string">'='</span>)out(<span class="number">35</span>, <span class="string">"&lt;="</span>);<span class="comment">//若下一位字符是=，则传入&lt;=的种别码和字符串给out函数</span></span><br><span class="line">                        <span class="keyword">else</span> &#123;<span class="comment">//否则</span></span><br><span class="line">                            fseek(fp, <span class="number">-1</span>, <span class="number">1</span>);<span class="comment">//回退</span></span><br><span class="line">                            out(<span class="number">33</span>, <span class="string">"&lt;"</span>);<span class="comment">//传入&lt;的种别码和字符串给out函数</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'&gt;'</span>:<span class="comment">//若是大于号</span></span><br><span class="line">                        ch = fgetc(fp);<span class="comment">//读取下一字符</span></span><br><span class="line">                        <span class="keyword">if</span> (ch == <span class="string">'='</span>)out(<span class="number">34</span>, <span class="string">"&gt;="</span>);<span class="comment">//若下一位字符是=，则传入&gt;=的种别码和字符串给out函数</span></span><br><span class="line">                        <span class="keyword">else</span> &#123;<span class="comment">//否则</span></span><br><span class="line">                            fseek(fp, <span class="number">-1</span>, <span class="number">1</span>);<span class="comment">//回退</span></span><br><span class="line">                            out(<span class="number">32</span>, <span class="string">"&gt;"</span>);<span class="comment">//传入&gt;的种别码字符串给out函数</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'='</span>:</span><br><span class="line">                        ch = fgetc(fp);<span class="comment">//若是等于号</span></span><br><span class="line">                        <span class="keyword">if</span> (ch == <span class="string">'='</span>)out(<span class="number">36</span>, <span class="string">"=="</span>);<span class="comment">//读取下一字符若是=则传入==的种别码和字符串给out函数</span></span><br><span class="line">                        <span class="keyword">else</span> &#123;<span class="comment">//否则</span></span><br><span class="line">                            fseek(fp, <span class="number">-1</span>, <span class="number">1</span>);<span class="comment">//回退</span></span><br><span class="line">                            out(<span class="number">21</span>, <span class="string">"="</span>);<span class="comment">//传入=的种别码和字符串给out函数</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'!'</span>:<span class="comment">//若是感叹号</span></span><br><span class="line">                        ch = fgetc(fp);<span class="comment">//读取下一字符</span></span><br><span class="line">                        <span class="keyword">if</span> (ch == <span class="string">'='</span>)out(<span class="number">37</span>, <span class="string">"!="</span>);<span class="comment">//若是=则传入!=的种别码和字符串给out函数</span></span><br><span class="line">                        <span class="keyword">else</span> out(<span class="number">-1</span>, <span class="string">"Wrong!"</span>);<span class="comment">//传入-1和"Wrong!"字符串给out函数，提示输入有误</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:<span class="comment">//若是其他字符</span></span><br><span class="line">                        out(<span class="number">-1</span>, <span class="string">"Wrong!"</span>);<span class="comment">//传入-1和"Wrong!"字符串给out函数，提示输入有误</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    FILE *fileP;<span class="comment">//打开所需要读取分析词法的文件</span></span><br><span class="line">    fileP = fopen(<span class="string">"D:\\OneDrive\\Personal\\OneDrive\\JetBrains\\CTemp\\Scanner\\test.txt"</span>, <span class="string">"r"</span>);<span class="comment">//以只读方式打开</span></span><br><span class="line">    fp = fopen(<span class="string">"D:\\OneDrive\\Personal\\OneDrive\\JetBrains\\CTemp\\Scanner\\Answer.txt"</span>, <span class="string">"w+"</span>);<span class="comment">//打开可读写文件进行写入</span></span><br><span class="line">    scanner(fileP);<span class="comment">//传入读取分析词法的文件</span></span><br><span class="line">    fclose(fp);<span class="comment">//关闭文件</span></span><br><span class="line">    fclose(fileP);<span class="comment">//关闭文件</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="程序运行结果"><a href="#程序运行结果" class="headerlink" title="程序运行结果"></a>程序运行结果</h1><p><img src="/2019/11/10/%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8/1.png" alt="1"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>对于编程没啥总结的，因为感觉这个程序其实非常非常简单，相对于之前七七八八的算法题，但是令我收获最大的便是，原来编译器是这样工作的，当然到现在我们还没学完语法分析，从刚刚开始这个课的无聊，发现越来越有趣了，因为我在想，这是得有多聪明才能严谨地编出一个编译器，让程序对于每一个语句识别没有歧义。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;已知待分析的Ｃ语言子集的词法：&lt;ul&gt;
&lt;li&gt;关键字：main if else int while char 均为小写。&lt;/li&gt;
&lt;li&gt;专用符号：= + - * / &amp;lt; &amp;lt;= &amp;gt; &amp;gt;= == !=  ; , { } ( )&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;实现对一个满足以上词法的分析。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;算法流程图&quot;&gt;&lt;a href=&quot;#算法流程图&quot; class=&quot;headerlink&quot; title=&quot;算法流程图&quot;&gt;&lt;/a&gt;算法流程图&lt;/h1&gt;&lt;p&gt;首先在这记录一下我鸡汁的舍友找到了一个画流程图的在线网站，解救了一个用破解版Visio损害自己机子内正版Office一直在用PowerPoint画流程图的苦逼： &lt;a href=&quot;https://www.processon.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.processon.com/&lt;/a&gt; 愿此平台越做越好（别倒闭，否则我就枯了~）&lt;/p&gt;
    
    </summary>
    
    
      <category term="编译原理" scheme="https://zh1n1an.github.io/categories/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
      <category term="词法分析" scheme="https://zh1n1an.github.io/categories/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/"/>
    
    
      <category term="C/C++" scheme="https://zh1n1an.github.io/tags/C-C/"/>
    
      <category term="编译原理" scheme="https://zh1n1an.github.io/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>八数码难题</title>
    <link href="https://zh1n1an.github.io/2019/11/10/%E5%85%AB%E6%95%B0%E7%A0%81%E9%9A%BE%E9%A2%98/"/>
    <id>https://zh1n1an.github.io/2019/11/10/八数码难题/</id>
    <published>2019-11-10T08:34:28.000Z</published>
    <updated>2019-11-10T08:51:31.350Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在3×3的棋盘上，摆有八个棋子，每个棋子上标有1至8的某一数字。棋盘中留有一个空格，空格用0来表示。空格周围的棋子可以移到空格中。要求解的问题是：给出一种初始布局（初始状态）和目标布局（为了使题目简单,设目标状态为123804765），找到一种最少步骤的移动方法，实现从初始布局到目标布局的转变。</p><a id="more"></a><h1 id="搜索方法的选择"><a href="#搜索方法的选择" class="headerlink" title="搜索方法的选择"></a>搜索方法的选择</h1><p>emmm，我选择了最简单的BFS，当然我想过DFS，但是深度是无法确定的，所以不太适合用DFS，在别人的博客上我还看见过DBFS（即双向广度优先搜索），有空我要去万一下下。</p><h1 id="怎么开始"><a href="#怎么开始" class="headerlink" title="怎么开始"></a>怎么开始</h1><ol><li><p>每个状态都用3*3的数组表示，比较麻烦而且空间占用较大（后面想了想除非很复杂其实占用的空间也不会特别多）</p></li><li><p>所以进行了状态压缩，采用一个整数保存状态的数字序列，例如状态1表示为283104765,状态2表示为203184765</p></li><li><p>然后我在想除了存状态，我还需要存方向，因为避免遍历的下一步重复回到父节点我需要知道本次移动的方向</p></li><li><p>然后这是一个链表，是两个链表连在一起的（如图下），所以需要两个指针，分别指向按BFS搜索遍历出来的顺序（*next）和节点的父节点（*up）。<img src="/2019/11/10/%E5%85%AB%E6%95%B0%E7%A0%81%E9%9A%BE%E9%A2%98/1.png" alt="1" style="zoom:50%;"></p></li><li><p>然后一个结构体作为其节点就这么出来了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">move</span>;<span class="comment">//从上一次到本次所移动的方向</span></span><br><span class="line">    <span class="keyword">int</span> num;<span class="comment">//本次数码排列顺序 1左 2右 3上 4下</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span><span class="comment">//BFS的下一个</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">up</span>;</span><span class="comment">//父节点</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h1 id="怎么判断"><a href="#怎么判断" class="headerlink" title="怎么判断"></a>怎么判断</h1><p>​        我认为这是最好解决的问题了，刚刚开始还想懵了，后面发现直接判断整型是否相等不就好了吗。</p><h1 id="流程图思路"><a href="#流程图思路" class="headerlink" title="流程图思路"></a>流程图思路</h1><p><img src="/2019/11/10/%E5%85%AB%E6%95%B0%E7%A0%81%E9%9A%BE%E9%A2%98/2.png" alt="2"></p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>因为对C最熟练，所以无可救药的继续用C写没有用C++，然后发现数组转整型难用的事实，能用C++还是C++吧</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by ZhiNian on 2019/10/22.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ArrayFather[<span class="number">5</span>][<span class="number">5</span>];<span class="comment">//用于存根节点的二维数组</span></span><br><span class="line"><span class="keyword">int</span> ArraySon[<span class="number">5</span>][<span class="number">5</span>];<span class="comment">//用于存从根节点移动后的二维数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ZeroX, ZeroY;<span class="comment">//用于存当前节点0的位置</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">move</span>;<span class="comment">//从上一次到本次所移动的方向</span></span><br><span class="line">    <span class="keyword">int</span> num;<span class="comment">//本次数码排列顺序 1左 2右 3上 4下</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span><span class="comment">//BFS的下一个</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">up</span>;</span><span class="comment">//父节点</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">node *<span class="title">Creat</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> <span class="built_in">move</span>, node *up)</span> </span>&#123;<span class="comment">//新建节点的函数，用于产生节点，可以 传入当前状态的num 本次移动的方向move 父节点的地址up 进行创建节点</span></span><br><span class="line">    node *start;</span><br><span class="line">    start = (struct node *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct node));</span><br><span class="line">    start-&gt;num = num;</span><br><span class="line">    start-&gt;<span class="built_in">move</span> = <span class="built_in">move</span>;</span><br><span class="line">    start-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    start-&gt;up = up;</span><br><span class="line">    <span class="keyword">return</span> start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy</span><span class="params">()</span> </span>&#123;<span class="comment">//将父节点的二维数组复制给子节点从而再进行移动操作</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; ++j) &#123;</span><br><span class="line">            ArraySon[i][j] = ArrayFather[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">int2ArrayFather</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;<span class="comment">//将所储存的整型数据变成二维数组便于操作</span></span><br><span class="line">    <span class="comment">//关键点在于一个3*3数组我转换为了5*5的数组，围绕在3*3数组的外围全为-1，从而在判断围墙的时候只需要判断需要移动的方向所存的数值是否为-1，为-1则不允许移动（即此面是墙）</span></span><br><span class="line">    ArrayFather[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    ArrayFather[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">-1</span>;</span><br><span class="line">    ArrayFather[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">-1</span>;</span><br><span class="line">    ArrayFather[<span class="number">0</span>][<span class="number">3</span>] = <span class="number">-1</span>;</span><br><span class="line">    ArrayFather[<span class="number">0</span>][<span class="number">4</span>] = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    ArrayFather[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    ArrayFather[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    ArrayFather[<span class="number">3</span>][<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    ArrayFather[<span class="number">4</span>][<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    ArrayFather[<span class="number">4</span>][<span class="number">1</span>] = <span class="number">-1</span>;</span><br><span class="line">    ArrayFather[<span class="number">4</span>][<span class="number">2</span>] = <span class="number">-1</span>;</span><br><span class="line">    ArrayFather[<span class="number">4</span>][<span class="number">3</span>] = <span class="number">-1</span>;</span><br><span class="line">    ArrayFather[<span class="number">4</span>][<span class="number">4</span>] = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    ArrayFather[<span class="number">1</span>][<span class="number">4</span>] = <span class="number">-1</span>;</span><br><span class="line">    ArrayFather[<span class="number">2</span>][<span class="number">4</span>] = <span class="number">-1</span>;</span><br><span class="line">    ArrayFather[<span class="number">3</span>][<span class="number">4</span>] = <span class="number">-1</span>;</span><br><span class="line">    ArrayFather[<span class="number">4</span>][<span class="number">4</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">//以下是整型把每一位数传入数组</span></span><br><span class="line">    ArrayFather[<span class="number">1</span>][<span class="number">1</span>] = num / <span class="number">100000000</span>;</span><br><span class="line">    num = num % <span class="number">100000000</span>;</span><br><span class="line">    ArrayFather[<span class="number">1</span>][<span class="number">2</span>] = num / <span class="number">10000000</span>;</span><br><span class="line">    num = num % <span class="number">10000000</span>;</span><br><span class="line">    ArrayFather[<span class="number">1</span>][<span class="number">3</span>] = num / <span class="number">1000000</span>;</span><br><span class="line">    num = num % <span class="number">1000000</span>;</span><br><span class="line">    ArrayFather[<span class="number">2</span>][<span class="number">1</span>] = num / <span class="number">100000</span>;</span><br><span class="line">    num = num % <span class="number">100000</span>;</span><br><span class="line">    ArrayFather[<span class="number">2</span>][<span class="number">2</span>] = num / <span class="number">10000</span>;</span><br><span class="line">    num = num % <span class="number">10000</span>;</span><br><span class="line">    ArrayFather[<span class="number">2</span>][<span class="number">3</span>] = num / <span class="number">1000</span>;</span><br><span class="line">    num = num % <span class="number">1000</span>;</span><br><span class="line">    ArrayFather[<span class="number">3</span>][<span class="number">1</span>] = num / <span class="number">100</span>;</span><br><span class="line">    num = num % <span class="number">100</span>;</span><br><span class="line">    ArrayFather[<span class="number">3</span>][<span class="number">2</span>] = num / <span class="number">10</span>;</span><br><span class="line">    num = num % <span class="number">10</span>;</span><br><span class="line">    ArrayFather[<span class="number">3</span>][<span class="number">3</span>] = num;</span><br><span class="line">    <span class="comment">//记录下0所在的位置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ArrayFather[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                ZeroX = i;</span><br><span class="line">                ZeroY = j;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ArraySon2int</span><span class="params">()</span> </span>&#123;<span class="comment">//将已产生的子节点转换为整型</span></span><br><span class="line">    <span class="keyword">return</span> ArraySon[<span class="number">1</span>][<span class="number">1</span>] * <span class="number">100000000</span> + ArraySon[<span class="number">1</span>][<span class="number">2</span>] * <span class="number">10000000</span> + ArraySon[<span class="number">1</span>][<span class="number">3</span>] * <span class="number">1000000</span> + ArraySon[<span class="number">2</span>][<span class="number">1</span>] * <span class="number">100000</span> +</span><br><span class="line">           ArraySon[<span class="number">2</span>][<span class="number">2</span>] * <span class="number">10000</span> + ArraySon[<span class="number">2</span>][<span class="number">3</span>] * <span class="number">1000</span> + ArraySon[<span class="number">3</span>][<span class="number">1</span>] * <span class="number">100</span> + ArraySon[<span class="number">3</span>][<span class="number">2</span>] * <span class="number">10</span> + ArraySon[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//move标记量 1左 2右 3上 4下</span></span><br><span class="line"><span class="function">node *<span class="title">Eight</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> <span class="built_in">end</span>)</span> </span>&#123;</span><br><span class="line">    node *k = Creat(start, <span class="number">0</span>, <span class="literal">NULL</span>);<span class="comment">//根节点，用creat产生根节点，因为根节点的up（父节点无）所以为NULL，move定义为0，即未移动也可以通过此标记知道是父节点</span></span><br><span class="line">    node *p = k;<span class="comment">//此节点开始先为根节点</span></span><br><span class="line">    node *l;<span class="comment">//新节点</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;<span class="comment">//不等于则继续循环</span></span><br><span class="line">        int2ArrayFather(k-&gt;num);</span><br><span class="line">        <span class="keyword">if</span> (k-&gt;<span class="built_in">move</span> == <span class="number">0</span>) &#123;<span class="comment">//通过move是否等于0去判断是否是根节点（根节点move为0在上面备注已解释），根节点就不需要判断上一次所移动的方向，所以需要单独提出进行判断</span></span><br><span class="line">            <span class="keyword">if</span> (ArrayFather[ZeroX][ZeroY - <span class="number">1</span>] != <span class="number">-1</span>) &#123;<span class="comment">//判断所要左移的方向是否是-1（即所移动的方向是否是墙）不是墙才能移动</span></span><br><span class="line">                copy();<span class="comment">//将父节点的数组复制给子节点的数组</span></span><br><span class="line">                ArraySon[ZeroX][ZeroY] = ArraySon[ZeroX][ZeroY - <span class="number">1</span>];<span class="comment">//进行移位操作</span></span><br><span class="line">                ArraySon[ZeroX][ZeroY - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">                l = Creat(ArraySon2int(), <span class="number">1</span>, k);<span class="comment">//通过create建立新的节点，传入ArraySon2int()即将当前子数组转化为int型记录，传入1表示当前是左移，传入k，表示此节点的父节点是k</span></span><br><span class="line">                p-&gt;next = l;<span class="comment">//将当前节点的next指向新节点</span></span><br><span class="line">                p = l;<span class="comment">//当前节点指向再跳到此节点</span></span><br><span class="line">                <span class="keyword">if</span> (p-&gt;num == <span class="built_in">end</span>)<span class="comment">//如果当前节点的num等于所到达的num</span></span><br><span class="line">                    <span class="keyword">break</span>;<span class="comment">//那么就跳出循环结束程序</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ArrayFather[ZeroX][ZeroY + <span class="number">1</span>] != <span class="number">-1</span>) &#123;<span class="comment">//同上 右移动</span></span><br><span class="line">                copy();</span><br><span class="line">                ArraySon[ZeroX][ZeroY] = ArraySon[ZeroX][ZeroY + <span class="number">1</span>];</span><br><span class="line">                ArraySon[ZeroX][ZeroY + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">                l = Creat(ArraySon2int(), <span class="number">2</span>, k);<span class="comment">//传入2表示此次操作是右移</span></span><br><span class="line">                p-&gt;next = l;</span><br><span class="line">                p = l;</span><br><span class="line">                <span class="keyword">if</span> (p-&gt;num == <span class="built_in">end</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ArrayFather[ZeroX - <span class="number">1</span>][ZeroY] != <span class="number">-1</span>) &#123;<span class="comment">//同上 上移动</span></span><br><span class="line">                copy();</span><br><span class="line">                ArraySon[ZeroX][ZeroY] = ArraySon[ZeroX - <span class="number">1</span>][ZeroY];</span><br><span class="line">                ArraySon[ZeroX - <span class="number">1</span>][ZeroY] = <span class="number">0</span>;</span><br><span class="line">                l = Creat(ArraySon2int(), <span class="number">3</span>, k);<span class="comment">//传入3表示此次操作是上移</span></span><br><span class="line">                p-&gt;next = l;</span><br><span class="line">                p = l;</span><br><span class="line">                <span class="keyword">if</span> (p-&gt;num == <span class="built_in">end</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ArrayFather[ZeroX + <span class="number">1</span>][ZeroY] != <span class="number">-1</span>) &#123;<span class="comment">//同上 下移动</span></span><br><span class="line">                copy();</span><br><span class="line">                ArraySon[ZeroX][ZeroY] = ArraySon[ZeroX + <span class="number">1</span>][ZeroY];</span><br><span class="line">                ArraySon[ZeroX + <span class="number">1</span>][ZeroY] = <span class="number">0</span>;</span><br><span class="line">                l = Creat(ArraySon2int(), <span class="number">4</span>, k);<span class="comment">//传入4表示此次操作是下移</span></span><br><span class="line">                p-&gt;next = l;</span><br><span class="line">                p = l;</span><br><span class="line">                <span class="keyword">if</span> (p-&gt;num == <span class="built_in">end</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//当非头节点的时候，于头节点的第一个判断标准是一样的，即是否所移动的方向是墙，其次还需判断父节点所移动的方向，因为父亲节点移动的方向若是上，那么此次就不能下移动，否则会陷入死循环</span></span><br><span class="line">            <span class="keyword">if</span> (ArrayFather[ZeroX][ZeroY - <span class="number">1</span>] != <span class="number">-1</span> &amp;&amp; k-&gt;<span class="built_in">move</span> != <span class="number">2</span>) &#123;<span class="comment">//判断左移的方向是否是墙（即左边一个格子的值是否是-1）还需要判断父节点的上一次操作是否是右移（move！=2），若不是才能进行移位操作</span></span><br><span class="line">                copy();<span class="comment">//将父节点的数组复制给子节点的数组</span></span><br><span class="line">                ArraySon[ZeroX][ZeroY] = ArraySon[ZeroX][ZeroY - <span class="number">1</span>];<span class="comment">//进行移位操作</span></span><br><span class="line">                ArraySon[ZeroX][ZeroY - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">                l = Creat(ArraySon2int(), <span class="number">1</span>, k);<span class="comment">//通过create建立新的节点，传入ArraySon2int()即将当前子数组转化为int型记录，传入1表示当前是左移，传入k，表示此节点的父节点是k</span></span><br><span class="line">                p-&gt;next = l;<span class="comment">//将当前节点的next指向新节点</span></span><br><span class="line">                p = l;<span class="comment">//当前节点指向再跳到此节点</span></span><br><span class="line">                <span class="keyword">if</span> (p-&gt;num == <span class="built_in">end</span>)<span class="comment">//如果当前节点的num等于所到达的num</span></span><br><span class="line">                    <span class="keyword">break</span>;<span class="comment">//那么就跳出循环结束程序</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ArrayFather[ZeroX][ZeroY + <span class="number">1</span>] != <span class="number">-1</span> &amp;&amp; k-&gt;<span class="built_in">move</span> != <span class="number">1</span>) &#123;<span class="comment">//同上 判断能否右移</span></span><br><span class="line">                copy();</span><br><span class="line">                ArraySon[ZeroX][ZeroY] = ArraySon[ZeroX][ZeroY + <span class="number">1</span>];</span><br><span class="line">                ArraySon[ZeroX][ZeroY + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">                l = Creat(ArraySon2int(), <span class="number">2</span>, k);</span><br><span class="line">                p-&gt;next = l;</span><br><span class="line">                p = l;</span><br><span class="line">                <span class="keyword">if</span> (p-&gt;num == <span class="built_in">end</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ArrayFather[ZeroX - <span class="number">1</span>][ZeroY] != <span class="number">-1</span> &amp;&amp; k-&gt;<span class="built_in">move</span> != <span class="number">4</span>) &#123;<span class="comment">//同上 判断能否上移</span></span><br><span class="line">                copy();</span><br><span class="line">                ArraySon[ZeroX][ZeroY] = ArraySon[ZeroX - <span class="number">1</span>][ZeroY];</span><br><span class="line">                ArraySon[ZeroX - <span class="number">1</span>][ZeroY] = <span class="number">0</span>;</span><br><span class="line">                l = Creat(ArraySon2int(), <span class="number">3</span>, k);</span><br><span class="line">                p-&gt;next = l;</span><br><span class="line">                p = l;</span><br><span class="line">                <span class="keyword">if</span> (p-&gt;num == <span class="built_in">end</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ArrayFather[ZeroX + <span class="number">1</span>][ZeroY] != <span class="number">-1</span> &amp;&amp; k-&gt;<span class="built_in">move</span> != <span class="number">3</span>) &#123;<span class="comment">//同上 判断能否下移动</span></span><br><span class="line">                copy();</span><br><span class="line">                ArraySon[ZeroX][ZeroY] = ArraySon[ZeroX + <span class="number">1</span>][ZeroY];</span><br><span class="line">                ArraySon[ZeroX + <span class="number">1</span>][ZeroY] = <span class="number">0</span>;</span><br><span class="line">                l = Creat(ArraySon2int(), <span class="number">4</span>, k);</span><br><span class="line">                p-&gt;next = l;</span><br><span class="line">                p = l;</span><br><span class="line">                <span class="keyword">if</span> (p-&gt;num == <span class="built_in">end</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        k = k-&gt;next;<span class="comment">//判断下一个节点去生成它的子节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;<span class="comment">//当找到结果break出来后返回最终得到的节点的地址</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp[<span class="number">3</span>][<span class="number">3</span>];<span class="comment">//用于格式化输出的缓存数组</span></span><br><span class="line">    <span class="keyword">int</span> output[<span class="number">100</span>];<span class="comment">//用于记录每一步结果数值实现堆栈功能的数组</span></span><br><span class="line"><span class="comment">//    int numStart = 283104765;//初态</span></span><br><span class="line"><span class="comment">//    int numEnd = 123804765;//终态</span></span><br><span class="line">    <span class="keyword">int</span> numStart;<span class="comment">//初态</span></span><br><span class="line">    <span class="keyword">int</span> numEnd;<span class="comment">//终态</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入初态:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;numStart);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入终态:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;numEnd);</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;<span class="comment">//用于记录经历了多少个步骤的计数器</span></span><br><span class="line">    node *answer = Eight(numStart, numEnd);<span class="comment">//调用Eight函数进行计算出最终态的结果</span></span><br><span class="line">    output[i]=answer-&gt;num;<span class="comment">//将得到的最终结果的数值，首先赋值给堆栈数组（即入栈）</span></span><br><span class="line">    <span class="keyword">while</span> (answer-&gt;up != <span class="literal">NULL</span>) &#123;<span class="comment">//通过链表的up指针进行搜索到初态</span></span><br><span class="line">        answer = answer-&gt;up;</span><br><span class="line">        i++;<span class="comment">//找到一个父节点，计数器加一，即进行了一个步骤</span></span><br><span class="line">        output[i] = answer-&gt;num;<span class="comment">//将此节点的数值，赋值给下一个堆栈数组（即继续入栈）</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n所需要经历的最短步骤是：%d\n\n"</span>, i);<span class="comment">//首先输出经历了几次步骤到达目标态</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i ; j &gt;= <span class="number">0</span>; --j) &#123;<span class="comment">//进行出栈和格式化输出</span></span><br><span class="line">        <span class="comment">//降int型转换为二维3*3的数组给入缓存数组</span></span><br><span class="line">        temp[<span class="number">0</span>][<span class="number">0</span>] = output[j] / <span class="number">100000000</span>;</span><br><span class="line">        output[j] = output[j] % <span class="number">100000000</span>;</span><br><span class="line">        temp[<span class="number">0</span>][<span class="number">1</span>] = output[j] / <span class="number">10000000</span>;</span><br><span class="line">        output[j] = output[j] % <span class="number">10000000</span>;</span><br><span class="line">        temp[<span class="number">0</span>][<span class="number">2</span>] = output[j] / <span class="number">1000000</span>;</span><br><span class="line">        output[j] = output[j] % <span class="number">1000000</span>;</span><br><span class="line">        temp[<span class="number">1</span>][<span class="number">0</span>] = output[j] / <span class="number">100000</span>;</span><br><span class="line">        output[j] = output[j] % <span class="number">100000</span>;</span><br><span class="line">        temp[<span class="number">1</span>][<span class="number">1</span>] = output[j] / <span class="number">10000</span>;</span><br><span class="line">        output[j] = output[j] % <span class="number">10000</span>;</span><br><span class="line">        temp[<span class="number">1</span>][<span class="number">2</span>] = output[j] / <span class="number">1000</span>;</span><br><span class="line">        output[j] = output[j] % <span class="number">1000</span>;</span><br><span class="line">        temp[<span class="number">2</span>][<span class="number">0</span>] = output[j] / <span class="number">100</span>;</span><br><span class="line">        output[j] = output[j] % <span class="number">100</span>;</span><br><span class="line">        temp[<span class="number">2</span>][<span class="number">1</span>] = output[j] / <span class="number">10</span>;</span><br><span class="line">        output[j] = output[j] % <span class="number">10</span>;</span><br><span class="line">        temp[<span class="number">2</span>][<span class="number">2</span>] = output[j];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">3</span>; ++k) &#123;<span class="comment">//格式化输出</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; <span class="number">3</span>; ++l) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d "</span>,temp[k][l]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="最终的运行结果和手算结果对比"><a href="#最终的运行结果和手算结果对比" class="headerlink" title="最终的运行结果和手算结果对比"></a>最终的运行结果和手算结果对比</h1><h2 id="手算的思维图示"><a href="#手算的思维图示" class="headerlink" title="手算的思维图示"></a>手算的思维图示</h2><p><img src="/2019/11/10/%E5%85%AB%E6%95%B0%E7%A0%81%E9%9A%BE%E9%A2%98/4.png" alt="4"></p><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="/2019/11/10/%E5%85%AB%E6%95%B0%E7%A0%81%E9%9A%BE%E9%A2%98/3.png" alt="3"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在3×3的棋盘上，摆有八个棋子，每个棋子上标有1至8的某一数字。棋盘中留有一个空格，空格用0来表示。空格周围的棋子可以移到空格中。要求解的问题是：给出一种初始布局（初始状态）和目标布局（为了使题目简单,设目标状态为123804765），找到一种最少步骤的移动方法，实现从初始布局到目标布局的转变。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://zh1n1an.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="C/C++" scheme="https://zh1n1an.github.io/categories/%E7%AE%97%E6%B3%95/C-C/"/>
    
    
      <category term="C/C++" scheme="https://zh1n1an.github.io/tags/C-C/"/>
    
      <category term="算法" scheme="https://zh1n1an.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Aircraft Wars by Java</title>
    <link href="https://zh1n1an.github.io/2019/11/10/Aircraft-Wars-by-Java/"/>
    <id>https://zh1n1an.github.io/2019/11/10/Aircraft-Wars-by-Java/</id>
    <published>2019-11-10T08:07:02.000Z</published>
    <updated>2019-11-10T08:31:59.377Z</updated>
    
    <content type="html"><![CDATA[<p>Aircraft Wars by Java</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ol><li><p>这是一个算是自己第一个小项目吧，在学校的短学期完成的一个实验报告，老师有参考代码，网上也有七七八八的，但是，这是我完完全全自己一步步思考一步步按下手下的键盘敲击而成的第一个，或许不是特别完美，及其简陋的小项目，或许这终于能称得上是项目了吧，写了一个叫雷霆战机的游戏。</p><a id="more"></a></li><li><p>这一次的课程设计，使我受益匪浅，我从仅仅是“纸上谈兵“到可以编写出一个小游戏的过程，这个过程所经历的努力，和对面向对象的深刻理解让我终生难忘，那种从单纯上课无法学到的东西，就例如：让我知道了有Java适配器并且使用这个东西，非常的巧妙，就像手机是Type-c接口，但是只有一个传统的MicroUSB的充电线，那么就弄一个转接头就可以充电了，而适配器就像这么一个转接头，还知道了我若想实现一个接口而不想把所有的方法实现，可以通过匿名内部类去只实现其中的一个接口，比如Timer中的schedule，还初步了解了Swing的用法，通过自学将数组改成集合，让我知道了Java集合有多么的好用。</p></li><li><p>而那种面向对象编程，和多态的美妙，那种使用父类或者一个接口去归类几种类，在主函数中统一调用，若是A类对象则用A方法，若是B类对象则用B方法。面向对象去编程，需要哪一些对象，去为之做一个类，去编写他的行为，还有封装，面对一项功能，我们可以尽可能封装在外面或者别的类内，从而更加有层次，在代码量特别多的时候更好去理解，去梳理思路等等，我认为这是我收获最大的，让我深刻的了解了面向对象的三大特性：封装、继承、多态。</p></li></ol><h1 id="游戏规则"><a href="#游戏规则" class="headerlink" title="游戏规则"></a>游戏规则</h1><ol><li>首先是点击游戏开始，需要有游戏开始界面</li><li>其次是消灭一个敌机要加分，消灭大敌机加的分要更加的多</li><li>再然后是消灭蜜蜂加一倍的火力或者加一条生命，如果是宝箱就直接四倍火力加两条命</li><li>当英雄机碰到其他任何飞行物（包括宝箱或蜜蜂），都掉一条命</li><li>火力5秒钟减少一条子弹</li><li>当生命值为0的时候游戏结束</li><li>再次点击可以重新开始游戏</li></ol><h1 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h1><ol><li>拿到素材后首先对界面的大小进行设置，界面需要显示的素材有三张图片，开始（start）（400x654）、结束（pause）（400x654）、背景（background）（480x852），然后当然选择了400x654作为界面的长宽，因为如果用背景图480x852的长宽作为界面的宽度，那么会发生暂停界面出现的时候，边缘会露出背景图片。</li><li>首先想清楚有哪些对象、有蜜蜂、大宝箱、敌机、大敌机、子弹、英雄机、然后呢蜜蜂和大宝箱可以作为一类，都是获取奖励的，敌机和大敌机可以作为一类、都是获取分数的、所以就想到了接口，给前一种类型，写一个接口去定义一个抽象函数，用来返回奖励类型，进行在子类中实现，后一种类型、写一个接口定义一个抽象函数，用来返回得分，在子类中实现，然后，因为当子弹碰到蜜蜂、大宝箱、敌机或者是大敌机，都会被消灭，而英雄机碰到蜜蜂、大宝箱、敌机或者是大敌机，都会掉一条命，而子弹碰上敌方单位也会消失，英雄机也需要有以下的功能，所以这所有的类可以给他们建立一个飞行物的父类，因为他们都同样有x，y坐标、有速度、有图片、并且有图片的宽高、并且要为他们定义一个outOfBorder()是否出界的方法、和一个step()每下一秒移动改变位置的方法。</li><li>在老师最初的要求上我加入了大宝箱和大敌机还有大宝箱和蜜蜂出来的方向我希望他随机，所以写了一个随机方法、所以在大宝箱和蜜蜂，除了实现父类的方法和接口外，添加了初始运动方向的随机变量，就没有了。</li><li>而大敌机和敌机仅仅是实现父类的方法和接口外就没有添加额外的方法了</li><li>子弹实现了父类的方法后就没有进行添加了</li><li>英雄机不仅实现了父类的方法和接口后，需要有鼠标的位置值、还需要有鼠标移动的方法moveTo(int x, int y)、需要有判断撞到敌机的方法hitEnemy(FlyingObject flyingObject)、需要还需要两个set和get函数去获取私有变量的火力和生命值。</li><li>最终的便是带有main函数的主类、主类就需要获取图片、需要使用Java Swing进行显示游戏、需要监听鼠标、需要有自动生成敌人对象、自动生成子弹、自动进行下一次屏幕刷新后，所有飞行物飞行的下一个位置的计算、需要一个游戏规则（进行子弹与敌方单位碰撞，敌方单位与英雄机碰撞会发生什么）的方法。</li></ol><h1 id="项目代码"><a href="#项目代码" class="headerlink" title="项目代码"></a>项目代码</h1><p>当然也是我第一次将自己的第一个项目学着用git通过IDEA将项目公开的存在我的GitHub的仓库上链接在下，感兴趣可以下载来玩一玩，但是别嫌弃它简陋 0.0</p><p>链接在这<a href="https://github.com/Zh1N1an/AircraftWars" target="_blank" rel="noopener"> ≖‿≖✧ </a></p><h1 id="游戏的部分截图"><a href="#游戏的部分截图" class="headerlink" title="游戏的部分截图"></a>游戏的部分截图</h1><p><img src="/2019/11/10/Aircraft-Wars-by-Java/1.png" alt="1"></p><p><img src="/2019/11/10/Aircraft-Wars-by-Java/2.png" alt="2"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Aircraft Wars by Java&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;这是一个算是自己第一个小项目吧，在学校的短学期完成的一个实验报告，老师有参考代码，网上也有七七八八的，但是，这是我完完全全自己一步步思考一步步按下手下的键盘敲击而成的第一个，或许不是特别完美，及其简陋的小项目，或许这终于能称得上是项目了吧，写了一个叫雷霆战机的游戏。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
      <category term="微项目" scheme="https://zh1n1an.github.io/categories/%E5%BE%AE%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="Java" scheme="https://zh1n1an.github.io/categories/%E5%BE%AE%E9%A1%B9%E7%9B%AE/Java/"/>
    
    
      <category term="Java" scheme="https://zh1n1an.github.io/tags/Java/"/>
    
      <category term="项目" scheme="https://zh1n1an.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="游戏" scheme="https://zh1n1an.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>减少麻烦，多做要做的事情</title>
    <link href="https://zh1n1an.github.io/2019/11/08/%E5%87%8F%E5%B0%91%E9%BA%BB%E7%83%A6%EF%BC%8C%E5%A4%9A%E5%81%9A%E8%A6%81%E5%81%9A%E7%9A%84%E4%BA%8B%E6%83%85/"/>
    <id>https://zh1n1an.github.io/2019/11/08/减少麻烦，多做要做的事情/</id>
    <published>2019-11-08T06:05:01.000Z</published>
    <updated>2019-11-08T07:11:37.261Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h3 id="2019年11月6日"><a href="#2019年11月6日" class="headerlink" title="2019年11月6日"></a>2019年11月6日</h3><ul><li>看了一个博客（<a href="http://www.yuguo.us" target="_blank" rel="noopener">余果的博客</a>），一个10年在西电毕业的大佬，素未谋面，但是他的博客深深打动了我，也是我现在决定又开始写博客的原因。</li></ul></li><li><a id="more"></a></li><li><h3 id="早在大一（2017年）我就开始折腾这个了"><a href="#早在大一（2017年）我就开始折腾这个了" class="headerlink" title="早在大一（2017年）我就开始折腾这个了"></a>早在大一（2017年）我就开始折腾这个了</h3><ul><li>觉得博客就应该是写技术文章的地方，那一年折腾了几天，部署上GitHub，对于一个刚刚高中毕业从未接触代码的我，非常的困难，但是整出能有自己的一个网页是非常的兴奋的，然后折腾主题，知道了Next主题，然后去折腾怎么样加上特效，怎么样出现热度，怎么样出现点击量，怎么样鼠标点击右爱心，总之一直在折腾着怎么样让自己的博客更加炫酷，但是大一的我，没有什么技术积累，也不好写什么上去，这个博客就搁置了。</li></ul></li></ul><ul><li><h3 id="大二参加了蓝桥杯"><a href="#大二参加了蓝桥杯" class="headerlink" title="大二参加了蓝桥杯"></a>大二参加了蓝桥杯</h3><ul><li>自己的编程能力在同校同级算是很出色的，但是自己轻视了，因为校赛题目非常容易，省赛完全没有好好准备，觉得应该能进国赛，然后再好好复习，结果现实狠狠地打了我一巴掌，校赛做题前五的我，省赛连优胜奖都没有，因为过了几个月没动编程，很多基础的都不熟练，而且在我的比赛机上数组的输入是有问题的，当时我却以为是自己的问题，因为很久没编了，不敢向监考老师提出来，中途比赛心态爆炸就走了（因为一个数组，我调了一个小时也不能输入），而到了宿舍，打开Clion，一输，完美运行，我就知道，对自己的不自信，没有提出这个问题换机子，也是前几个月都没碰程序得来的后果。</li></ul></li></ul><ul><li><h3 id="大三，什么都想学，却感觉晚了"><a href="#大三，什么都想学，却感觉晚了" class="headerlink" title="大三，什么都想学，却感觉晚了"></a>大三，什么都想学，却感觉晚了</h3><ul><li>大三上前的短学期实训，用Java编写出一个飞机大战的游戏，那七天的实训，让我深刻地理解到了面向对象编程和面向对象的思维，那种醍醐灌顶的感觉过了半个学期了也无法忘怀，我完美的自己一个字符一个字符敲完了这个游戏，那一刻的成就感非同小可，但是我觉得晚了，我大三了，然后了解到C++的面向对象，所以现在特别想再用C++写一次飞机大战类似的项目，决定接下来的一个长假写一下。</li></ul></li></ul><ul><li><h3 id="我想考研，应该是这么说，我想读研，不想考研，当然为了读研，还是要去考考看的"><a href="#我想考研，应该是这么说，我想读研，不想考研，当然为了读研，还是要去考考看的" class="headerlink" title="我想考研，应该是这么说，我想读研，不想考研，当然为了读研，还是要去考考看的"></a>我想考研，应该是这么说，我想读研，不想考研，当然为了读研，还是要去考考看的</h3><ul><li>后悔自己英语这么差，大学的前三个学期，差不的都是因为英语差，没能拿奖学金，因为两个学期英语都挂，一个学期英语刚刚过线，虽然后面补考都过了，大二下，报上了四级，决心一次要过，每天坚持背单词，最后半个月，苦攻了一下阅读理解，大阅读和小阅读，不知道是不是我运气好，从小到大因为英语失去的机会和各种黑历史已经数不胜数，我居然考了484分，看见分数的一瞬间我还以为525过线，后面再三确认了，是425过线，我突然浑身压力卸下来的感觉，因为可以毕业了，英语是我最大的拦路虎，不出意外，大二下学期没有了英语，我拿到了奖学金。但是这会儿，我想考研，因为我不满足于学校学的内容，C/C++，就教了一点点，因为去接触了外面的世界才知道，C++的面向对象，完全没学一样，概率论与数理统计，只上了2/3，计算机网络，计算机组成原理，都只讲了半本书，我感觉自己什么能力都没有，就到大三了，所以，为了自己所热爱的东西，努力一把吧。</li></ul></li></ul><ul><li><h3 id="刚刚建立起博客"><a href="#刚刚建立起博客" class="headerlink" title="刚刚建立起博客"></a>刚刚建立起博客</h3><ul><li>很多很多想说的，文章思路或许很不清晰，只是随笔写下了我想写的想说的，语文从小学到高中就永远是班里的中下游，所以，如果有人有幸看到，那真的非常抱歉了，不过也很感谢，因为你能看到这里，说明对我的博客还是抱有认可的态度的。</li></ul></li></ul><ul><li><h3 id="再回到文初"><a href="#再回到文初" class="headerlink" title="再回到文初"></a>再回到文初</h3><ul><li>我特别羡慕余果，不知道是不是他的真名，本科毕业，很多人劝考研，而自己毅然决然提高工作能力，毕业能有机会进入腾讯（毕竟985，毕竟西电），能每天积累下来很多东西，喜欢读书，毕业几年能在深圳买房，买车，有自己爱的人，9年后从腾讯毕业，我不知道怎么说了，反正是极度的羡慕，因为我最想去的城市就是深圳。所以，我也想像这样优秀的人靠近，继续开启我的博客，不一定写技术文，但是我想写的，我就决定写上去，最终回到起点看自己的想法到如今的想法，一定会特别有意思吧。</li></ul></li></ul><ul><li><h3 id="说到这，看见标题发现我严重地偏题了。。。或许这就是我语文不好的原因吧。"><a href="#说到这，看见标题发现我严重地偏题了。。。或许这就是我语文不好的原因吧。" class="headerlink" title="说到这，看见标题发现我严重地偏题了。。。或许这就是我语文不好的原因吧。"></a>说到这，看见标题发现我严重地偏题了。。。或许这就是我语文不好的原因吧。</h3><ul><li>我今天突然觉得“减少麻烦，多做要做的事情”是特别重要的，我一直在折腾着自己的博客怎么样完美无缺，但是我忽视了一个很重要的东西，博客的主题是文章，不是花里胡哨的特效，就算哪个最low的平台写，文章好，那么播客一样很棒，昨天晚上凌晨三点睡，今天一大早的就是数据库的实验课，实验课我没有碰一下实验，只是把相关要求存到电脑，然后继续折腾我的博客，早餐也忘记吃了，到了最后一堆bug也不会调，我突然就相通了，为什么我要这么折腾自己，直接用默认的改一些些不就好了么，最终要的难道不是博客中的文章么。然后中餐带着电脑买了嘉华的面包，又跑到下午软件工程的教师，继续折腾，把所有的配置文件全部删了，从头开始，只花了一个多小时就完成了，直到快上课了，才记得我买了面包。</li></ul></li></ul><ul><li><h3 id="“减少麻烦，多做要做的事情”"><a href="#“减少麻烦，多做要做的事情”" class="headerlink" title="“减少麻烦，多做要做的事情”"></a>“减少麻烦，多做要做的事情”</h3><ul><li>这是让我豁然开朗的一个想法，或许我语言粗糙简陋，但是这让我想到了手机阵营中苹果、三星厂商和国产的手机厂商的自己一个曾经想过的一个观点。不得不承认，到了如今9102年，iPhone仍然是世界上最好的只能手机。我特别喜欢前锤子科技前CEO罗永浩的一句话“苹果不是卖手机，苹果是买系统的，他只是用iPhone把IOS包装起来卖给用户”。又想到高中那会儿，有了一台小米，折腾着Root，折腾着刷机，下载各种破解游戏，用八门神器、烧饼修改器，改《超凡蜘蛛侠》，看着苹果全封闭系统，一脸嘲讽，苹果还不能扩展内存，苹果不能换主题，等等一堆贬低的理由。而到了高三，4G风靡的时代，我的3G小米3，放学付钱支付宝吃饭都成问题了的时候，它被我淘汰了。我买了去年的iPhone 6s，第一次用上了苹果的产品，第一次用上了iOS，第一次知道，人机交互可以这么的顺畅，3D-touch的反馈，每一个UI，iOS的每一处，与人的交互是多么的自然流畅。到了大三我还用着iPhone，当然只是换了一台，去年双十一花掉了我从初中攒到大学的钱，买了iPhone Xs，我越来越发现，我离不开iOS这个系统，它或许没有国产手机的很多花里胡哨的功能，比如华为的识别手势，比如长截图，比如摄像头还是1200w，比如夜景模式，比如屏下指纹，等等，但是它仍然做到了手机中的最好，他是一个手机，不是摄像机，不是电视，不需要这么大屏幕，只需要在掌中，做到一款手机该做的，并将智能手机该做的做到最好，没有广告，不需要担心中毒，不需要担心隐私和安全，不需要担心下一秒钟手机跟不上手指的滑动速度，所有的一切交互都是自然的，就仿佛是自己的一部分一样。是，很多人觉得我吹苹果吹过了，但是真的，在我看见一个视频之前，我还不是这么崇拜苹果，但是当我看了B站的一个视频后（【科技漫谈】让苹果告诉你什么才是完美的交互体验），我才知道，苹果在这么多的细节上和交互上下了多少的功夫，当安卓机还在比解锁速度，打开应用速度的时候，苹果思考的是，怎么让应用打开，和解锁的动画，反馈，更加自然，顺畅。这就是Apple。说了这么多也反思了我昨天熬夜到今天中文都在折腾Next主题，到最后前功尽弃的事情，浪费了睡眠时间，浪费了数据库时间，到最后不仅一事无成，对自己的提高也没有一丁点完完全全在浪费时间，而我现在知道了，播客不是一个让你学HTML、CSS、Javascript的地方，而且这么去学，真的就啥也学不到，只是百度，复制代码，调配置，下一步就不知道自己上一步在干嘛。所以以后，多做一些对自己有用根本的事情，而去忽略那些一点用都没有的细节吧。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;h3 id=&quot;2019年11月6日&quot;&gt;&lt;a href=&quot;#2019年11月6日&quot; class=&quot;headerlink&quot; title=&quot;2019年11月6日&quot;&gt;&lt;/a&gt;2019年11月6日&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;看了一个博客（&lt;a href=&quot;http://www.yuguo.us&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;余果的博客&lt;/a&gt;），一个10年在西电毕业的大佬，素未谋面，但是他的博客深深打动了我，也是我现在决定又开始写博客的原因。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="想法" scheme="https://zh1n1an.github.io/categories/%E6%83%B3%E6%B3%95/"/>
    
      <category term="2019" scheme="https://zh1n1an.github.io/categories/%E6%83%B3%E6%B3%95/2019/"/>
    
    
      <category term="想法" scheme="https://zh1n1an.github.io/tags/%E6%83%B3%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>用Python写的简易教务系统</title>
    <link href="https://zh1n1an.github.io/2019/06/13/%E7%94%A8Python%E5%86%99%E7%9A%84%E7%AE%80%E6%98%93%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F/"/>
    <id>https://zh1n1an.github.io/2019/06/13/用Python写的简易教务系统/</id>
    <published>2019-06-13T09:15:12.000Z</published>
    <updated>2019-11-08T09:41:01.422Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><h3 id="系统背景介绍"><a href="#系统背景介绍" class="headerlink" title="系统背景介绍"></a>系统背景介绍</h3><p>​        学生信息管理系统是针对学校人事处的大量业务处理工作而开发的管理软件，主要用于学校学生信息管理，总体任务是实现学生信息关系的系统化、科学化、规范化和自动化，其主要任务是用计算机对学生各种信息进行日常管理，如查询、修改、增加、删除，另外还考虑到学生选课，针对这些要求设计了学生信息管理系统。</p><h3 id="功能需求分析"><a href="#功能需求分析" class="headerlink" title="功能需求分析"></a>功能需求分析</h3><ol><li><p>学生成绩管理系统分三种角色：学生、教师和管理员。学生（学号、姓名、性别、班级、出生年月、电话、邮箱、用户名、密码），教师（工号、姓名、联系电话、邮箱、职称、用户名、密码）、管理员（工号、姓名、联系电话、邮箱、用户名、密码）；</p></li><li><p>管理员可以添加教师和学生，学生和教师进入系统可以更新自己的信息；</p></li><li><p>管理员可以对课程管理（添加课程：开课学年、开课学期、课程编号、课程名称、学时、学分、指定任课教师），并指定当前有效的学年、学期；</p></li><li><p>学生在有效的学年、学期可进行选课；</p></li><li><p>教师对自己所讲授的课录入学生成绩，查看成绩（查看成绩显示：学号、姓名、性别、班级、成绩），实现该门课程成绩段的柱状和饼状分布图；</p></li><li><p>管理员和学生可以查看成绩，学生可以查看自己的所有成绩（查看成绩显示：课程名称、开课学期、开课学年、学时、学分、成绩、任课教师），管理员可以查看某门课程的所有学生成绩（学号、姓名、性别、班级、成绩）和查看某名学生的所有成绩（查看某名学生成绩显示：课程名称、开课学期、开课学年、学时、学分、成绩、任课教师）；</p></li><li><p>数据存储在txt文本当中，要求用面向对象编程思想实现；</p><a id="more"></a><h2 id="总体设计"><a href="#总体设计" class="headerlink" title="总体设计"></a>总体设计</h2><h3 id="系统功能结构"><a href="#系统功能结构" class="headerlink" title="系统功能结构"></a>系统功能结构</h3><p><img src="/2019/06/13/%E7%94%A8Python%E5%86%99%E7%9A%84%E7%AE%80%E6%98%93%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F/1.png" alt="1"></p><h3 id="系统流程图"><a href="#系统流程图" class="headerlink" title="系统流程图"></a>系统流程图</h3><p><img src="/2019/06/13/%E7%94%A8Python%E5%86%99%E7%9A%84%E7%AE%80%E6%98%93%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F/2.png" alt="2"></p><h3 id="开发及运行环境"><a href="#开发及运行环境" class="headerlink" title="开发及运行环境"></a>开发及运行环境</h3><p>Windows 10 1903、JetBrains PyCharm 2019.1.2 x64、Python3.7</p><h2 id="详细设计"><a href="#详细设计" class="headerlink" title="详细设计"></a>详细设计</h2><p>​        首先我想的是，通过五个文本分别存储：管理员信息、教师信息、学生信息、课程、成绩，进行储存。</p><p>三个类的父类（Person类）：因为我发现了三个对象，老师、学生、管理员，有学号/工号、名字、电话、邮箱、用户名、密码，6个属性的信息是重合的，并且每个对象都可以更新自己的信息，所以在此类我建立了这六个属性，并且添加了更新信息的函数updata(因为担心内置函数update的混用，故用updata data也是数据的意思)。</p></li></ol><p>   ​        管理员信息：继承Person类添加了：添加管理员函数addAdmin，添加教师函数addTeacher，添加学生函数addStudent，添加课程函数addElective，设置当前学期学年函数setYearAndSchoolTerm，查看某门科目成绩的函数seeSubjectGrade，查看某名学生所以成绩的函数seeStudentGrade。并将初始化的对象全部存入一个列表里ListAdmin。</p><p>   ​        教师信息：继承Person类添加了：从管理员决定了建立课程后查找自己上什么课的函数findSubject，为这门课录入成绩的函数setGrade，查看这门成绩的函数seeGrade。并将初始化的对象全部存入一个列表里ListTeacher。</p><p>   ​        学生信息：继承Person类添加了：选课的函数chooseElective，添加了查看自己成绩的函数seeGrade。并将初始化的对象全部存入一个列表里ListStudent。</p><p>   ​        课程：用一个字典来保存，每一个课程的课程编号就是key，而其他的元素（开课学年、开课学期、课程名称、学时、学分、任课老师（工号））便是key对应的value值。</p><p>   ​        成绩：也用字典来保存，每一个学生的学号便是key值，对应的value值也用字典来保存，分别对应了该学生某科目和某科目的成绩</p><p>   ​        关于保存：保存的方法就是一种，将列表或字典通过以下代码进行保存：</p><p>   f = open(‘Test.txt’, ‘r’)</p><p>   a = f.read()</p><p>   ListOrDict = eval(a)</p><p>   f.close()</p><p>   成绩和课程本身就是字典可以直接保存，但是其他三个对象，首先读取用列表装上，而列表的每一个元素也是列表，用来装一个对象的所有属性。</p><p>   ​        关于读取：通过读取列表中的所有元素，对于成绩和课程本身就是字典就不需要进行其他加工，而三个对象，便提前列表中的的元素进行重新建立对象。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Created by 方子希 on 2019/6/1.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">YEAR = <span class="string">"2019"</span>  <span class="comment"># 当前学年初始化</span></span><br><span class="line">SCHOOLTERM = <span class="string">"3"</span>  <span class="comment"># 当前学期初始化</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="comment"># 人类（以下所有类的父类）</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, ID, name, tel, mail, userName, userPassword)</span>:</span></span><br><span class="line">        self.ID = ID</span><br><span class="line">        self.name = name</span><br><span class="line">        self.tel = tel</span><br><span class="line">        self.mail = mail</span><br><span class="line">        self.userName = userName</span><br><span class="line">        self.userPassword = userPassword</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">updata</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 更新信息</span></span><br><span class="line">        temp = int(input(<span class="string">"请输入您需要更新什么信息:"</span></span><br><span class="line">                         <span class="string">"1、学号/工号(为保证系统正常已经屏蔽)。2、姓名。3、电话。4、邮箱。5、用户名。6、密码。7、退出。\n"</span>))</span><br><span class="line">        <span class="keyword">if</span> (temp == <span class="number">1</span>):</span><br><span class="line">            print(<span class="string">"已经屏蔽若需使用请在代码上解开注释！"</span>)</span><br><span class="line">            <span class="comment"># self.ID = input("请输入你想更新的学号/工号:")</span></span><br><span class="line">            <span class="comment"># print("更新后的学号/工号为：" + self.ID)</span></span><br><span class="line">        <span class="keyword">elif</span> (temp == <span class="number">2</span>):</span><br><span class="line">            self.name = input(<span class="string">"请输入你想更新的姓名:"</span>)</span><br><span class="line">            print(<span class="string">"更新后的姓名为："</span> + self.name)</span><br><span class="line">        <span class="keyword">elif</span> (temp == <span class="number">3</span>):</span><br><span class="line">            self.tel = input(<span class="string">"请输入你想更新的电话:"</span>)</span><br><span class="line">            print(<span class="string">"更新后的电话为："</span> + self.tel)</span><br><span class="line">        <span class="keyword">elif</span> (temp == <span class="number">4</span>):</span><br><span class="line">            self.mail = input(<span class="string">"请输入你想更新的邮箱:"</span>)</span><br><span class="line">            print(<span class="string">"更新后的邮箱为："</span> + self.mail)</span><br><span class="line">        <span class="keyword">elif</span> temp == <span class="number">5</span>:</span><br><span class="line">            self.userName = input(<span class="string">"请输入你想更新的用户名:"</span>)</span><br><span class="line">            print(<span class="string">"更新后的用户名为："</span> + self.userName)</span><br><span class="line">        <span class="keyword">elif</span> temp == <span class="number">6</span>:</span><br><span class="line">            self.userPassword = input(<span class="string">"请输入你想更新的密码:"</span>)</span><br><span class="line">            print(<span class="string">"更新后的密码为："</span> + self.userPassword)</span><br><span class="line">        <span class="keyword">elif</span> temp == <span class="number">7</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"输入有误！"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="comment"># 学生进入系统可以更新自己的信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, ID, name, sex, cclass, born, tel, mail, userName, userPassword)</span>:</span></span><br><span class="line">        <span class="comment"># 学生（学号、姓名、性别、班级、出生年月、电话、邮箱、用户名、密码）</span></span><br><span class="line">        super().__init__(ID, name, tel, mail, userName, userPassword)</span><br><span class="line">        self.sex = sex</span><br><span class="line">        self.cclass = cclass</span><br><span class="line">        self.born = born</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">chooseElective</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 选课</span></span><br><span class="line">        <span class="keyword">for</span> E <span class="keyword">in</span> ListElective:</span><br><span class="line">            <span class="keyword">if</span> ListElective[E][<span class="number">0</span>] == YEAR <span class="keyword">and</span> ListElective[E][<span class="number">1</span>] == SCHOOLTERM:</span><br><span class="line">                print(</span><br><span class="line">                    <span class="string">"你可选的课有：\n"</span> + <span class="string">"学年："</span> + ListElective[E][<span class="number">0</span>] + <span class="string">" 学期："</span> + ListElective[E][<span class="number">1</span>] + <span class="string">" 课程名："</span> + ListElective[E][</span><br><span class="line">                        <span class="number">2</span>] + <span class="string">" 学时："</span> + ListElective[E][<span class="number">3</span>])</span><br><span class="line">                print(<span class="string">"是否选择此课？"</span>)</span><br><span class="line">                temp = int(input(<span class="string">"1、确认选择此课。2、不选择此课。\n"</span>))</span><br><span class="line">                <span class="keyword">if</span> temp == <span class="number">1</span>:</span><br><span class="line">                    ListScore[self.ID].update(&#123;E: <span class="string">"还未出成绩！"</span>&#125;)</span><br><span class="line">                <span class="keyword">elif</span> temp == <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(<span class="string">"输入有误！"</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">seeGrade</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 查看成绩</span></span><br><span class="line">        <span class="keyword">for</span> S <span class="keyword">in</span> ListScore[self.ID]:</span><br><span class="line">            print(<span class="string">"科目："</span> + S + <span class="string">" 的成绩是："</span> + ListScore[self.ID][S])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="comment"># 教师进入系统可以更新自己的信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, ID, name, tel, mail, userName, userPassword, subject=<span class="string">""</span>)</span>:</span></span><br><span class="line">        <span class="comment"># 教师（工号、姓名、联系电话、邮箱、职称、用户名、密码）</span></span><br><span class="line">        super().__init__(ID, name, tel, mail, userName, userPassword)</span><br><span class="line">        self.data = []</span><br><span class="line">        self.size = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findSubject</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 查看自己上的课是什么</span></span><br><span class="line">        <span class="keyword">for</span> E <span class="keyword">in</span> ListElective:</span><br><span class="line">            <span class="keyword">if</span> ListElective[E][<span class="number">5</span>] == self.ID:</span><br><span class="line">                self.subject = E</span><br><span class="line">                print(<span class="string">"您上的课是："</span> + ListElective[E][<span class="number">3</span>] + <span class="string">" 课序号是："</span> + E)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        print(<span class="string">"未找到您上什么课！"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setGrade</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 录入本课成绩</span></span><br><span class="line">        self.findSubject()</span><br><span class="line">        <span class="keyword">for</span> S <span class="keyword">in</span> ListScore:</span><br><span class="line">            <span class="keyword">for</span> E <span class="keyword">in</span> ListScore[S]:</span><br><span class="line">                <span class="keyword">if</span> E == self.subject:</span><br><span class="line">                    score = input(<span class="string">"学号为 "</span> + S + <span class="string">" 学生的成绩是："</span>)</span><br><span class="line">                    ListScore[S].update(&#123;E: score&#125;)</span><br><span class="line">        print(<span class="string">"所有学生遍历完毕！"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">seeGrade</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 查看本课成绩</span></span><br><span class="line">        self.findSubject()</span><br><span class="line">        <span class="keyword">for</span> S <span class="keyword">in</span> ListScore:</span><br><span class="line">            <span class="keyword">for</span> E <span class="keyword">in</span> ListScore[S]:</span><br><span class="line">                <span class="keyword">if</span> E == self.subject:</span><br><span class="line">                    print(<span class="string">"学号为 "</span> + S + <span class="string">" 学生的成绩是："</span> + ListScore[S][E])</span><br><span class="line">        print(<span class="string">"所有学生遍历完毕！"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show11</span><span class="params">(self)</span>:</span><span class="comment">#柱状图的数据准备</span></span><br><span class="line">        self.findSubject()</span><br><span class="line">        <span class="keyword">for</span> S <span class="keyword">in</span> ListScore:</span><br><span class="line">            <span class="keyword">for</span> E <span class="keyword">in</span> ListScore[S]:</span><br><span class="line">                <span class="keyword">if</span> E == self.subject:</span><br><span class="line">                    self.data.append(ListScore[S][E])</span><br><span class="line">        self.show1(self.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show1</span><span class="params">(self, data)</span>:</span><span class="comment">#柱状图的显示</span></span><br><span class="line">        <span class="comment"># 设置matplotlib正常显示中文和负号</span></span><br><span class="line">        matplotlib.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'SimHei'</span>]  <span class="comment"># 用黑体显示中文</span></span><br><span class="line">        matplotlib.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="literal">False</span>  <span class="comment"># 正常显示负号</span></span><br><span class="line"></span><br><span class="line">        plt.hist(data, bins=<span class="number">40</span>, facecolor=<span class="string">"blue"</span>, edgecolor=<span class="string">"black"</span>, alpha=<span class="number">0.7</span>)</span><br><span class="line">        <span class="comment"># 显示横轴标签</span></span><br><span class="line">        plt.xlabel(<span class="string">"成绩"</span>)</span><br><span class="line">        <span class="comment"># 显示纵轴标签</span></span><br><span class="line">        plt.ylabel(<span class="string">"频数"</span>)</span><br><span class="line">        <span class="comment"># 显示图标题</span></span><br><span class="line">        plt.title(<span class="string">"频数成绩直方图"</span>)</span><br><span class="line"></span><br><span class="line">        plt.show()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show22</span><span class="params">(self)</span>:</span><span class="comment">#饼状图的数据准备</span></span><br><span class="line">        self.findSubject()</span><br><span class="line">        <span class="keyword">for</span> S <span class="keyword">in</span> ListScore:</span><br><span class="line">            <span class="keyword">for</span> E <span class="keyword">in</span> ListScore[S]:</span><br><span class="line">                <span class="keyword">if</span> E == self.subject:</span><br><span class="line">                    self.data.append(ListScore[S][E])</span><br><span class="line"></span><br><span class="line">        a = <span class="number">0</span></span><br><span class="line">        b = <span class="number">0</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        d = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> self.data:</span><br><span class="line">            <span class="keyword">if</span> f &lt;= <span class="string">"25"</span>:</span><br><span class="line">                a = a + <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> <span class="string">"26"</span> &lt;= f &lt;= <span class="string">"50"</span>:</span><br><span class="line">                b = b + <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> <span class="string">"51"</span> &lt;= f &lt;= <span class="string">"75"</span>:</span><br><span class="line">                c = c + <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> <span class="string">"76"</span> &lt;= f:</span><br><span class="line">                d = d + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"Wrong!"</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        size = [a, b, c, d]</span><br><span class="line">        self.show2(size)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show2</span><span class="params">(self, size)</span>:</span><span class="comment">#饼状图的显示</span></span><br><span class="line">        <span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">        <span class="keyword">import</span> matplotlib</span><br><span class="line"></span><br><span class="line">        matplotlib.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'SimHei'</span>]</span><br><span class="line">        matplotlib.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        label_list = [<span class="string">'0~25'</span>, <span class="string">'26~50'</span>, <span class="string">'51~75'</span>, <span class="string">'76~100'</span>]  <span class="comment"># 各部分标签</span></span><br><span class="line">        <span class="comment"># size = [1,1,1,1]  # 各部分大小学生成绩管理系统.py</span></span><br><span class="line">        color = [<span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span>, <span class="string">"yellow"</span>]  <span class="comment"># 各部分颜色</span></span><br><span class="line">        explode = [<span class="number">0.05</span>, <span class="number">0.05</span>, <span class="number">0.05</span>, <span class="number">0.05</span>]  <span class="comment"># 各部分突出值</span></span><br><span class="line"></span><br><span class="line">        plt.pie(size, explode=explode, colors=color, labels=label_list, labeldistance=<span class="number">1.1</span>,</span><br><span class="line">                                          autopct=<span class="string">"%1.1f%%"</span>, shadow=<span class="literal">False</span>, startangle=<span class="number">90</span>, pctdistance=<span class="number">0.6</span>)</span><br><span class="line">        plt.axis(<span class="string">"equal"</span>)  <span class="comment"># 设置横轴和纵轴大小相等，这样饼才是圆的</span></span><br><span class="line">        plt.legend()</span><br><span class="line">        plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Admin</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="comment"># 管理员（工号、姓名、联系电话、邮箱、用户名、密码）</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, ID, name, tel, mail, userName, userPassword)</span>:</span></span><br><span class="line">        super().__init__(ID, name, tel, mail, userName, userPassword)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># @staticmethod 本来想 第一个得设立管理员 就用静态函数用类调用 后面直接往txt写信息就好了</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addAdmin</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 添加管理员</span></span><br><span class="line">        adminID = input(<span class="string">"输入创建的管理员的ID:"</span>)</span><br><span class="line">        adminName = input(<span class="string">"请输入姓名:"</span>)</span><br><span class="line">        adminTel = input(<span class="string">"请输入电话:"</span>)</span><br><span class="line">        adminMail = input(<span class="string">"请输入邮箱:"</span>)</span><br><span class="line">        adminUserName = input(<span class="string">"请输入用户名:"</span>)</span><br><span class="line">        adminUserPassword = input(<span class="string">"请输入密码:"</span>)</span><br><span class="line">        admin = Admin(adminID, adminName, adminTel, adminMail, adminUserName, adminUserPassword)</span><br><span class="line">        ListAdmin.append(admin)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addTeacher</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 添加教师</span></span><br><span class="line">        teacherID = input(<span class="string">"输入创建的老师的ID:"</span>)</span><br><span class="line">        teacherName = input(<span class="string">"请输入姓名:"</span>)</span><br><span class="line">        teacherTel = input(<span class="string">"请输入电话:"</span>)</span><br><span class="line">        teacherMail = input(<span class="string">"请输入邮箱:"</span>)</span><br><span class="line">        teacherUserName = input(<span class="string">"请输入用户名:"</span>)</span><br><span class="line">        teacherUserPassword = input(<span class="string">"请输入密码:"</span>)</span><br><span class="line">        teacher = Teacher(teacherID, teacherName, teacherTel, teacherMail, teacherUserName, teacherUserPassword);</span><br><span class="line">        ListTeacher.append(teacher)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addStudent</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 添加学生</span></span><br><span class="line">        studentID = input(<span class="string">"请输入创建的学生的ID:"</span>)</span><br><span class="line">        studentName = input(<span class="string">"请输入姓名:"</span>)</span><br><span class="line">        studentSex = input(<span class="string">"请输入性别:"</span>)</span><br><span class="line">        studentClass = input(<span class="string">"请输入班级:"</span>)</span><br><span class="line">        studentBorn = input(<span class="string">"请输入生日:"</span>)</span><br><span class="line">        studentTel = input(<span class="string">"请输入电话:"</span>)</span><br><span class="line">        studentMail = input(<span class="string">"请输入邮箱:"</span>)</span><br><span class="line">        studentUserName = input(<span class="string">"请输入用户名:"</span>)</span><br><span class="line">        studentUserPassword = input(<span class="string">"请输入密码:"</span>)</span><br><span class="line">        student = Student(studentID, studentName, studentSex, studentClass, studentBorn, studentTel, studentMail,</span><br><span class="line">                          studentUserName, studentUserPassword)</span><br><span class="line">        ListStudent.append(student)</span><br><span class="line">        ListScore.update(&#123;studentID: &#123;&#125;&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addElective</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 添加课程</span></span><br><span class="line">        electiveYear = input(<span class="string">"请输入开课学年:"</span>)</span><br><span class="line">        electiveSchoolTerm = input(<span class="string">"请输入开课学期:"</span>)</span><br><span class="line">        electiveID = input(<span class="string">"请输入课程编号:"</span>)</span><br><span class="line">        electiveName = input(<span class="string">"请输入课程名称:"</span>)</span><br><span class="line">        electiveStuTime = input(<span class="string">"请输入学时:"</span>)</span><br><span class="line">        electiveStuGrade = input(<span class="string">"请输入学分:"</span>)</span><br><span class="line">        electiveTeacher = input(<span class="string">"请输入指定任课老师:"</span>)</span><br><span class="line">        ListElective.update(&#123;electiveID: [electiveYear, electiveSchoolTerm, electiveName, electiveStuTime,</span><br><span class="line">                                          electiveStuGrade, electiveTeacher]&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setYearAndSchoolTerm</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 设置当前学年学期</span></span><br><span class="line">        <span class="keyword">global</span> YEAR</span><br><span class="line">        YEAR = input(<span class="string">"学年:"</span>)</span><br><span class="line">        print(<span class="string">"更改后当前的学年为："</span> + YEAR)</span><br><span class="line">        <span class="keyword">global</span> SCHOOLTERM</span><br><span class="line">        SCHOOLTERM = input(<span class="string">"学期:"</span>)</span><br><span class="line">        print(<span class="string">"更改后当前的学期为："</span> + SCHOOLTERM)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">seeSubjectGrade</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 查看某科目的所有成绩</span></span><br><span class="line">        temp = input(<span class="string">"请输入您想看的科目序号："</span>)</span><br><span class="line">        <span class="keyword">for</span> S <span class="keyword">in</span> ListScore:</span><br><span class="line">            <span class="keyword">for</span> E <span class="keyword">in</span> ListScore[S]:</span><br><span class="line">                <span class="keyword">if</span> E == temp:</span><br><span class="line">                    print(<span class="string">"学号为："</span> + S + <span class="string">"的学生,这个学生的成绩是："</span> + ListScore[S][E])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">seeStudentGrade</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 查看某学生的所有成绩</span></span><br><span class="line">        temp = input(<span class="string">"请输入您想看的学生学号："</span>)</span><br><span class="line">        <span class="keyword">for</span> S <span class="keyword">in</span> ListScore:</span><br><span class="line">            <span class="keyword">if</span> S == temp:</span><br><span class="line">                <span class="keyword">for</span> E <span class="keyword">in</span> ListScore[S]:</span><br><span class="line">                    print(S + <span class="string">"学生的"</span> + E + <span class="string">"科目的成绩是："</span> + ListScore[S][E])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 存放学生对象的列表</span></span><br><span class="line">ListStudent = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 存放老师对象的列表</span></span><br><span class="line">ListTeacher = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 存放管理员对象的列表</span></span><br><span class="line">ListAdmin = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 存学生信息</span></span><br><span class="line">liststudent = []</span><br><span class="line"><span class="comment"># 读取学生信息并建立对象写入对象列表</span></span><br><span class="line">f = open(<span class="string">'StudentData.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line">a = f.read()</span><br><span class="line">liststudent = eval(a)</span><br><span class="line">f.close()</span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> range(len(liststudent)):</span><br><span class="line">    a = Student(liststudent[l][<span class="number">0</span>], liststudent[l][<span class="number">1</span>], liststudent[l][<span class="number">2</span>], liststudent[l][<span class="number">3</span>], liststudent[l][<span class="number">4</span>],</span><br><span class="line">                liststudent[l][<span class="number">5</span>], liststudent[l][<span class="number">6</span>], liststudent[l][<span class="number">7</span>], liststudent[l][<span class="number">8</span>])</span><br><span class="line">    ListStudent.append(a)</span><br><span class="line">liststudent = []  <span class="comment"># 初始化为空防止保存的时候重复</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 存老师信息</span></span><br><span class="line">listteacher = []</span><br><span class="line"><span class="comment"># 读取老师信息并建立对象写入对象列表</span></span><br><span class="line">f = open(<span class="string">'TeacherData.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line">a = f.read()</span><br><span class="line">listteacher = eval(a)</span><br><span class="line">f.close()</span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> range(len(listteacher)):</span><br><span class="line">    a = Teacher(listteacher[l][<span class="number">0</span>], listteacher[l][<span class="number">1</span>], listteacher[l][<span class="number">2</span>], listteacher[l][<span class="number">3</span>], listteacher[l][<span class="number">4</span>],</span><br><span class="line">                listteacher[l][<span class="number">5</span>])</span><br><span class="line">    ListTeacher.append(a)</span><br><span class="line">listteacher = []  <span class="comment"># 初始化为空防止保存的时候重复</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 存管理员信息</span></span><br><span class="line">listadmin = []</span><br><span class="line"><span class="comment"># 读取管理员并建立对象写入对象列表</span></span><br><span class="line">f = open(<span class="string">'AdminData.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line">a = f.read()</span><br><span class="line">listadmin = eval(a)</span><br><span class="line">f.close()</span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> range(len(listadmin)):</span><br><span class="line">    a = Admin(listadmin[l][<span class="number">0</span>], listadmin[l][<span class="number">1</span>], listadmin[l][<span class="number">2</span>], listadmin[l][<span class="number">3</span>], listadmin[l][<span class="number">4</span>], listadmin[l][<span class="number">5</span>])</span><br><span class="line">    ListAdmin.append(a)</span><br><span class="line">listadmin = []  <span class="comment"># 初始化为空防止保存的时候重复</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 存放课程</span></span><br><span class="line">ListElective = &#123;&#125;</span><br><span class="line"><span class="comment"># 读取课程</span></span><br><span class="line">f = open(<span class="string">'ElectiveData.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line">a = f.read()</span><br><span class="line">ListElective = eval(a)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 存放成绩</span></span><br><span class="line">ListScore = &#123;&#125;</span><br><span class="line"><span class="comment"># 读取成绩</span></span><br><span class="line">f = open(<span class="string">'ScoreData.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line">a = f.read()</span><br><span class="line">ListScore = eval(a)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">LogOn</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="comment"># 登录校验函数</span></span><br><span class="line">    userName = input(<span class="string">"请输入您的用户名:"</span>)</span><br><span class="line">    userPassword = input(<span class="string">"请输入您的密码:"</span>)</span><br><span class="line">    <span class="keyword">for</span> P <span class="keyword">in</span> Person:</span><br><span class="line">        <span class="keyword">if</span> userName == P.userName:</span><br><span class="line">            <span class="keyword">if</span> userPassword == P.userPassword:</span><br><span class="line">                print(<span class="string">"恭喜你成功登录！"</span>)</span><br><span class="line">                <span class="keyword">return</span> P  <span class="comment"># 正确</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"密码有误!"</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>  <span class="comment"># 密码有误</span></span><br><span class="line">    print(<span class="string">"无此用户！"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>  <span class="comment"># 无此用户</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">AdminMenu</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="comment"># 管理员的菜单</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>):</span><br><span class="line">        temp = int(input(<span class="string">"1、添加（学生/教师/课程/管理员）功能。2、查询（成绩）功能。3、设置（学年）功能。4、更新信息。5、退出\n"</span>))</span><br><span class="line">        <span class="keyword">if</span> temp == <span class="number">1</span>:</span><br><span class="line">            ttemp = int(input(<span class="string">"1、添加教师。2、添加学生。3、添加课程。4、添加管理员。5、退出。\n"</span>))</span><br><span class="line">            <span class="keyword">if</span> ttemp == <span class="number">1</span>:</span><br><span class="line">                Person.addTeacher()</span><br><span class="line">            <span class="keyword">elif</span> ttemp == <span class="number">2</span>:</span><br><span class="line">                Person.addStudent()</span><br><span class="line">            <span class="keyword">elif</span> ttemp == <span class="number">3</span>:</span><br><span class="line">                Person.addElective()</span><br><span class="line">            <span class="keyword">elif</span> ttemp == <span class="number">4</span>:</span><br><span class="line">                Person.addAdmin()</span><br><span class="line">            <span class="keyword">elif</span> ttemp == <span class="number">5</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"输入有误！"</span>)</span><br><span class="line">        <span class="keyword">elif</span> temp == <span class="number">2</span>:</span><br><span class="line">            tttemp = int(input(<span class="string">"1、查询单个科目成绩。2、查询单个学生成绩。\n"</span>))</span><br><span class="line">            <span class="keyword">if</span> tttemp == <span class="number">1</span>:</span><br><span class="line">                Person.seeSubjectGrade()</span><br><span class="line">            <span class="keyword">elif</span> tttemp == <span class="number">2</span>:</span><br><span class="line">                Person.seeStudentGrade()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"输入有误！"</span>)</span><br><span class="line">        <span class="keyword">elif</span> temp == <span class="number">3</span>:</span><br><span class="line">            ttttemp = int(input(<span class="string">"1、设置学期。2、设置学年。\n"</span>))</span><br><span class="line">            <span class="keyword">if</span> ttttemp == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">global</span> SCHOOLTERM</span><br><span class="line">                SCHOOLTERM = input(<span class="string">"请输入您想设置的学期："</span>)</span><br><span class="line">                print(<span class="string">"更改后当前的学期为："</span> + SCHOOLTERM)</span><br><span class="line">            <span class="keyword">elif</span> ttttemp == <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">global</span> YEAR</span><br><span class="line">                YEAR = input(<span class="string">"请输入您想设置的学年："</span>)</span><br><span class="line">                print(<span class="string">"更改后当前的学年为："</span> + YEAR)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"输入有误！"</span>)</span><br><span class="line">        <span class="keyword">elif</span> temp == <span class="number">4</span>:</span><br><span class="line">            Person.updata()</span><br><span class="line">        <span class="keyword">elif</span> temp == <span class="number">5</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"输入有误！"</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">TeacherMenu</span><span class="params">(Teacher)</span>:</span></span><br><span class="line">    <span class="comment"># 教师的菜单</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>):</span><br><span class="line">        temp = int(input(<span class="string">"1、录入成绩。2、查询成绩。3、更新信息。4、查看饼状图。5、查看柱状图。6、退出。\n"</span>))</span><br><span class="line">        <span class="keyword">if</span> temp == <span class="number">1</span>:</span><br><span class="line">            Teacher.setGrade()</span><br><span class="line">        <span class="keyword">elif</span> temp == <span class="number">2</span>:</span><br><span class="line">            Teacher.seeGrade()</span><br><span class="line">        <span class="keyword">elif</span> temp == <span class="number">3</span>:</span><br><span class="line">            Teacher.updata()</span><br><span class="line">        <span class="keyword">elif</span> temp == <span class="number">4</span>:</span><br><span class="line">            Teacher.show22()</span><br><span class="line">        <span class="keyword">elif</span> temp == <span class="number">5</span>:</span><br><span class="line">            Teacher.show11()</span><br><span class="line">        <span class="keyword">elif</span> temp == <span class="number">6</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"输入有误！"</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">StudentMenu</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="comment"># 学生的菜单</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>):</span><br><span class="line">        temp = int(input(<span class="string">"1、选课。2、查询成绩。3、更新信息。4、退出\n"</span>))</span><br><span class="line">        <span class="keyword">if</span> temp == <span class="number">1</span>:</span><br><span class="line">            Person.chooseElective()</span><br><span class="line">        <span class="keyword">elif</span> temp == <span class="number">2</span>:</span><br><span class="line">            Person.seeGrade()</span><br><span class="line">        <span class="keyword">elif</span> temp == <span class="number">3</span>:</span><br><span class="line">            Person.updata()</span><br><span class="line">        <span class="keyword">elif</span> temp == <span class="number">4</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"输入有误！"</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调试信息 已经直接录入txt 所以舍弃 也可以取消注释使用</span></span><br><span class="line"><span class="comment"># a = Admin("001", "Admin", "15877032128", "1075267114@qq.com", "admin", "admin")</span></span><br><span class="line"><span class="comment"># ListAdmin.append(a)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># t = Teacher("001", "王红斌！", "13833888833", "13833888833@tel.com", "teacher", "teacher")</span></span><br><span class="line"><span class="comment"># ListTeacher.append(t)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># t = Teacher("002", "王红", "13833888833", "13833888833@tel.com", "teacher", "teacher")</span></span><br><span class="line"><span class="comment"># ListTeacher.append(t)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># s = Student("001", "LJJ", "Girl", "173", "0826", "13833888833", "13833888833@tel.com", "student", "student")</span></span><br><span class="line"><span class="comment"># ListStudent.append(s)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>):</span><br><span class="line">    <span class="comment"># 主菜单</span></span><br><span class="line">    temp = int(input(<span class="string">"请问您是：1、管理员。2、教师。3、学生。4、退出。\n"</span>))</span><br><span class="line">    <span class="keyword">if</span> temp == <span class="number">1</span>:</span><br><span class="line">        a = LogOn(ListAdmin)</span><br><span class="line">        <span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            AdminMenu(a)</span><br><span class="line">    <span class="keyword">elif</span> temp == <span class="number">2</span>:</span><br><span class="line">        a = LogOn(ListTeacher)</span><br><span class="line">        <span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            TeacherMenu(a)</span><br><span class="line">    <span class="keyword">elif</span> temp == <span class="number">3</span>:</span><br><span class="line">        a = LogOn(ListStudent)</span><br><span class="line">        <span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            StudentMenu(a)</span><br><span class="line">    <span class="keyword">elif</span> temp == <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"输入有误！"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将学生信息保存</span></span><br><span class="line"><span class="keyword">for</span> A <span class="keyword">in</span> ListStudent:</span><br><span class="line">    liststudent.append([A.ID, A.name, A.sex, A.cclass, A.born, A.tel, A.mail, A.userName, A.userPassword])</span><br><span class="line">f = open(<span class="string">'StudentData.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line">f.write(str(liststudent))</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将老师信息保存</span></span><br><span class="line"><span class="keyword">for</span> A <span class="keyword">in</span> ListTeacher:</span><br><span class="line">    listteacher.append([A.ID, A.name, A.tel, A.mail, A.userName, A.userPassword])</span><br><span class="line">f = open(<span class="string">'TeacherData.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line">f.write(str(listteacher))</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将管理员信息保存</span></span><br><span class="line"><span class="keyword">for</span> A <span class="keyword">in</span> ListAdmin:</span><br><span class="line">    listadmin.append([A.ID, A.name, A.tel, A.mail, A.userName, A.userPassword])</span><br><span class="line">f = open(<span class="string">'AdminData.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line">f.write(str(listadmin))</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将成绩保存</span></span><br><span class="line">f = open(<span class="string">'ScoreData.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line">f.write(str(ListScore))</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将课程保存</span></span><br><span class="line">f = open(<span class="string">'ElectiveData.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line">f.write(str(ListElective))</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h2 id="程序运行的部分截图"><a href="#程序运行的部分截图" class="headerlink" title="程序运行的部分截图"></a>程序运行的部分截图</h2><p><img src="/2019/06/13/%E7%94%A8Python%E5%86%99%E7%9A%84%E7%AE%80%E6%98%93%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F/3.png" alt="3"></p><p><img src="/2019/06/13/%E7%94%A8Python%E5%86%99%E7%9A%84%E7%AE%80%E6%98%93%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F/4.png" alt="4"></p><p><img src="/2019/06/13/%E7%94%A8Python%E5%86%99%E7%9A%84%E7%AE%80%E6%98%93%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F/5.png" alt="5"></p><p><img src="/2019/06/13/%E7%94%A8Python%E5%86%99%E7%9A%84%E7%AE%80%E6%98%93%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F/6.png" alt="6"></p><p><img src="/2019/06/13/%E7%94%A8Python%E5%86%99%E7%9A%84%E7%AE%80%E6%98%93%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F/7.png" alt="7"></p><p><img src="/2019/06/13/%E7%94%A8Python%E5%86%99%E7%9A%84%E7%AE%80%E6%98%93%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F/8.png" alt="8"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​        <strong>首先</strong>，很幸运，我们专业的这一届是第一届开始学python的，我认为这门课程所用的语言非常的奇妙，老师也兢兢业业，让我们更好的了解Python这门课程真正的用途，而完成这份报告让我收获了很多。</p><p>​        <strong>其次</strong>，刚刚开始拿到这份报告的时候，看了功能，特别特别多，内心无比恐慌，也非常的不知道从何下手，看见了一句要求“用面向对象编程思想实现”我就开始一步一步设计这个程序，面对三个不同的对象，却又有相同点，使用了类的继承，而三个对象又拥有不同的权限，便在他们之下添加专门的函数。</p><p>​        <strong>接下来</strong>，就是一步一步的实现，调试，优化，独立完成此报告，或许花的时间是别人的很多很多，但是收获是巨大的，可以熟练使用python的基本操作，并且巩固了基础，就比如我定义的常量YEAR和SCHOOLTERM，在函数中改变的时候，一出函数又回到原来值，深究其原因，发现自己忽略了python课程很早很早就讲了的引用，在函数内不使用global修饰，就会再另开一个空间叫YEAR或SCHOOLTERM，然后进行赋值（指向数据所存位置），但是与外部的全局变量是完全不同的两个值。</p><p>​        <strong>最后</strong>，写完了这份报告，让我发现了，有些事情刚刚开始看起来很庞大，但是当昨完的那一刻发现也不过如此，愿其他任何事情，也不能有服输的心态。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需求分析&quot;&gt;&lt;a href=&quot;#需求分析&quot; class=&quot;headerlink&quot; title=&quot;需求分析&quot;&gt;&lt;/a&gt;需求分析&lt;/h2&gt;&lt;h3 id=&quot;系统背景介绍&quot;&gt;&lt;a href=&quot;#系统背景介绍&quot; class=&quot;headerlink&quot; title=&quot;系统背景介绍&quot;&gt;&lt;/a&gt;系统背景介绍&lt;/h3&gt;&lt;p&gt;​        学生信息管理系统是针对学校人事处的大量业务处理工作而开发的管理软件，主要用于学校学生信息管理，总体任务是实现学生信息关系的系统化、科学化、规范化和自动化，其主要任务是用计算机对学生各种信息进行日常管理，如查询、修改、增加、删除，另外还考虑到学生选课，针对这些要求设计了学生信息管理系统。&lt;/p&gt;
&lt;h3 id=&quot;功能需求分析&quot;&gt;&lt;a href=&quot;#功能需求分析&quot; class=&quot;headerlink&quot; title=&quot;功能需求分析&quot;&gt;&lt;/a&gt;功能需求分析&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;学生成绩管理系统分三种角色：学生、教师和管理员。学生（学号、姓名、性别、班级、出生年月、电话、邮箱、用户名、密码），教师（工号、姓名、联系电话、邮箱、职称、用户名、密码）、管理员（工号、姓名、联系电话、邮箱、用户名、密码）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;管理员可以添加教师和学生，学生和教师进入系统可以更新自己的信息；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;管理员可以对课程管理（添加课程：开课学年、开课学期、课程编号、课程名称、学时、学分、指定任课教师），并指定当前有效的学年、学期；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;学生在有效的学年、学期可进行选课；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;教师对自己所讲授的课录入学生成绩，查看成绩（查看成绩显示：学号、姓名、性别、班级、成绩），实现该门课程成绩段的柱状和饼状分布图；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;管理员和学生可以查看成绩，学生可以查看自己的所有成绩（查看成绩显示：课程名称、开课学期、开课学年、学时、学分、成绩、任课教师），管理员可以查看某门课程的所有学生成绩（学号、姓名、性别、班级、成绩）和查看某名学生的所有成绩（查看某名学生成绩显示：课程名称、开课学期、开课学年、学时、学分、成绩、任课教师）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据存储在txt文本当中，要求用面向对象编程思想实现；&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
      <category term="微项目" scheme="https://zh1n1an.github.io/categories/%E5%BE%AE%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="Python" scheme="https://zh1n1an.github.io/categories/%E5%BE%AE%E9%A1%B9%E7%9B%AE/Python/"/>
    
    
      <category term="Python" scheme="https://zh1n1an.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>背包问题</title>
    <link href="https://zh1n1an.github.io/2019/05/25/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    <id>https://zh1n1an.github.io/2019/05/25/背包问题/</id>
    <published>2019-05-25T11:49:01.000Z</published>
    <updated>2019-11-08T12:58:59.156Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>0/1背包问题</strong></p><ul><li>给定n种物品和一个容量为C的背包，物品i的重量是wi，其价值为vi，对每种物品i只有两种选择：装入背包或不装入背包，如何选择装入背包的物品，使得装入背包的物品的总价值最大？</li></ul><a id="more"></a><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><p>例如，对于n=3的0/1背包问题，其空间树如图，树种第i层与第i+1层结点之间的边上给出了对物品i的选择结果，左子树表示该物品被装入了背包，右子树表示该物品没有被装入背包。树种的8哥叶子结点分别代表该问题的8个可能解，例如结点8代表一个可能解（1，0，0）</p><p><img src="/2019/05/25/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/1.jpg" alt="1"></p><p>然后通过判断回溯进行处理</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">goods</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> wight;<span class="comment">//物品重量</span></span><br><span class="line">    <span class="keyword">int</span> value;<span class="comment">//物品价值</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,bestValue,cv,cw,C;<span class="comment">//物品数量，价值最大，当前价值，当前重量，背包容量</span></span><br><span class="line"><span class="keyword">int</span> X[N],cx[N];<span class="comment">//最终存储状态，当前存储状态</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">goods</span> <span class="title">goods</span>[<span class="title">N</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BackTrack</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i &gt; n<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(bestValue &lt; cv)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++)</span><br><span class="line">                X[k] = cx[k];<span class="comment">//存储最优路径</span></span><br><span class="line">            bestValue = cv;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bestValue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cw + goods[i].wight &lt;= C)&#123;<span class="comment">//进入左子树</span></span><br><span class="line">        cw += goods[i].wight;</span><br><span class="line">        cv += goods[i].value;</span><br><span class="line">        cx[i] = <span class="number">1</span>;<span class="comment">//装入背包</span></span><br><span class="line">        BackTrack(i+<span class="number">1</span>);</span><br><span class="line">        cw -= goods[i].wight;</span><br><span class="line">        cv -= goods[i].value;<span class="comment">//回溯，进入右子树</span></span><br><span class="line">    &#125;</span><br><span class="line">    cx[i] = <span class="number">0</span>;<span class="comment">//不装入背包</span></span><br><span class="line">    BackTrack(i+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> bestValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">m</span><span class="params">(struct goods a, struct goods b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a.value/a.wight) &gt; (b.value/b.wight);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KnapSack3</span><span class="params">(<span class="keyword">int</span> n, struct goods a[], <span class="keyword">int</span> C,<span class="keyword">int</span> x[N])</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(x,<span class="number">0</span>,<span class="keyword">sizeof</span>(x));</span><br><span class="line">    sort(a,a+n,m);<span class="comment">//将各物品按单位重量价值降序排列</span></span><br><span class="line">    BackTrack(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> bestValue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"n:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"C:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;C);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"weight and value:"</span>,i+<span class="number">1</span>,i+<span class="number">1</span>,i+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;goods[i].wight,&amp;goods[i].value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> sum3 = KnapSack3(n,goods,C,X);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The answer\nX=["</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; X[i] &lt;&lt;<span class="string">" "</span>;<span class="comment">//输出所求X[n]矩阵</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"]   The value%d\n"</span>,sum3);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="/2019/05/25/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/2.png" alt="2"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;0/1背包问题&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给定n种物品和一个容量为C的背包，物品i的重量是wi，其价值为vi，对每种物品i只有两种选择：装入背包或不装入背包，如何选择装入背包的物品，使得装入背包的物品的总价值最大？&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://zh1n1an.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="C/C++" scheme="https://zh1n1an.github.io/categories/%E7%AE%97%E6%B3%95/C-C/"/>
    
    
      <category term="C/C++" scheme="https://zh1n1an.github.io/tags/C-C/"/>
    
      <category term="算法" scheme="https://zh1n1an.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>汇编的一些小实验</title>
    <link href="https://zh1n1an.github.io/2019/05/24/%E6%B1%87%E7%BC%96%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E5%AE%9E%E9%AA%8C/"/>
    <id>https://zh1n1an.github.io/2019/05/24/汇编的一些小实验/</id>
    <published>2019-05-24T11:30:42.000Z</published>
    <updated>2019-11-08T11:45:29.348Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>汇编本应该是一门很多人头疼的学科，但是我学的备感兴趣，这里是本学期的三个小实验，我真的非常非常感谢遇见了万小容老师，她讲课真的讲得特别好。汇编语言，一门无数个学长学姐都给我打预防针，头疼的科目，我学的津津有味。或许以后会忘记很多，但是为什么C语言是这样运作的，和操作系统的一些衔接，这对于我非常的有用。</li></ul><a id="more"></a><h2 id="不仅仅是-显示"><a href="#不仅仅是-显示" class="headerlink" title="不仅仅是~显示"></a>不仅仅是~显示</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>在屏幕中间分别显示绿色，绿底红色，白色蓝底的字符串‘welcome to masm!’</p><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code,ds:data</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">db &apos;Welcome to masm!&apos;</span><br><span class="line">db 02h,24h,71h</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">start:mov ax,data</span><br><span class="line">mov ds,ax</span><br><span class="line">mov bx,0</span><br><span class="line">mov di,16</span><br><span class="line">mov ax,0b800h</span><br><span class="line">mov es,ax</span><br><span class="line">mov ax,720h</span><br><span class="line">mov si,ax</span><br><span class="line"></span><br><span class="line">mov cx,3</span><br><span class="line">s2:mov dx,cx</span><br><span class="line"></span><br><span class="line">mov cx,16</span><br><span class="line">s1:mov al,ds:[bx]</span><br><span class="line">mov ah,ds:[di]</span><br><span class="line">mov es:[si],ax</span><br><span class="line">add si,2</span><br><span class="line">add bx,1</span><br><span class="line">loop s1</span><br><span class="line"></span><br><span class="line">add di,1</span><br><span class="line">add si,0a0h</span><br><span class="line">sub si,20h</span><br><span class="line">mov cx,dx</span><br><span class="line">mov bx,0</span><br><span class="line">loop s2 </span><br><span class="line"></span><br><span class="line">mov ax,4c00h</span><br><span class="line">int 21h</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="/2019/05/24/%E6%B1%87%E7%BC%96%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E5%AE%9E%E9%AA%8C/1.png" alt="1"></p><h2 id="不仅仅是-子程序调用"><a href="#不仅仅是-子程序调用" class="headerlink" title="不仅仅是~子程序调用"></a>不仅仅是~子程序调用</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>将数据1234以十进制的形式在屏幕的12行40列，用白底蓝字显示出来。用子程序调用的方式。</p><h3 id="源代码-1"><a href="#源代码-1" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">db 10 dup(0)</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">start:mov ax,1234</span><br><span class="line">mov bx,data</span><br><span class="line">mov ds,bx</span><br><span class="line">mov si,0</span><br><span class="line">call change</span><br><span class="line">mov dh,12</span><br><span class="line">mov dl,40</span><br><span class="line">mov cl,71h</span><br><span class="line">call show</span><br><span class="line"></span><br><span class="line">mov ax,4c00h</span><br><span class="line">int 21h</span><br><span class="line"></span><br><span class="line">change:push ax</span><br><span class="line">push bx</span><br><span class="line">push cx</span><br><span class="line">push di</span><br><span class="line">push si</span><br><span class="line"></span><br><span class="line">mov di,0</span><br><span class="line">d20:mov cl,10</span><br><span class="line">div cl</span><br><span class="line">add ah,30h</span><br><span class="line">mov bl,al</span><br><span class="line">mov al,ah</span><br><span class="line">mov ah,0</span><br><span class="line">push ax</span><br><span class="line">inc di</span><br><span class="line">mov al,bl</span><br><span class="line">mov ah,0</span><br><span class="line">mov cx,ax</span><br><span class="line">jcxz d1</span><br><span class="line">mov ax,cx</span><br><span class="line">jmp d20</span><br><span class="line"></span><br><span class="line">d1:mov cx,di</span><br><span class="line"></span><br><span class="line">d2:pop ax</span><br><span class="line">mov [si],al</span><br><span class="line">inc si</span><br><span class="line">loop d2</span><br><span class="line">pop si</span><br><span class="line">pop di</span><br><span class="line">pop cx</span><br><span class="line">pop bx</span><br><span class="line">pop ax</span><br><span class="line">ret</span><br><span class="line"></span><br><span class="line">show:push ax</span><br><span class="line">push bx</span><br><span class="line">push cx</span><br><span class="line">push dx</span><br><span class="line">push es</span><br><span class="line">push si</span><br><span class="line"></span><br><span class="line">mov ax,0b800h</span><br><span class="line">mov es,ax</span><br><span class="line">mov ch,0</span><br><span class="line">mov al,160</span><br><span class="line">mul dh</span><br><span class="line">mov bx,ax</span><br><span class="line">mov al,2</span><br><span class="line">mul dl</span><br><span class="line">add bx,ax</span><br><span class="line">mov al,cl</span><br><span class="line">mov cl,0</span><br><span class="line"></span><br><span class="line">s1:mov ch,[si]</span><br><span class="line">jcxz s2</span><br><span class="line">mov es:[bx],ch</span><br><span class="line">mov es:[bx+1],al</span><br><span class="line">add si,1</span><br><span class="line">add bx,2</span><br><span class="line">jmp s1</span><br><span class="line"></span><br><span class="line">s2:pop si</span><br><span class="line">pop es</span><br><span class="line">pop dx</span><br><span class="line">pop cx</span><br><span class="line">pop bx</span><br><span class="line">pop ax</span><br><span class="line">ret</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><h3 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="/2019/05/24/%E6%B1%87%E7%BC%96%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E5%AE%9E%E9%AA%8C/2.png" alt="2"></p><h2 id="不仅仅是-循环-调用-综合使用"><a href="#不仅仅是-循环-调用-综合使用" class="headerlink" title="不仅仅是~循环 调用 综合使用"></a>不仅仅是~循环 调用 综合使用</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>编程：以“年/月/日 时：分：秒”的格式，显示当前的日期、时间。  </p><h3 id="源代码-2"><a href="#源代码-2" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">db 10 dup(0)</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">start:mov ax,1234</span><br><span class="line">mov bx,data</span><br><span class="line">mov ds,bx</span><br><span class="line">mov si,0</span><br><span class="line">call change</span><br><span class="line">mov dh,12</span><br><span class="line">mov dl,40</span><br><span class="line">mov cl,71h</span><br><span class="line">call show</span><br><span class="line"></span><br><span class="line">mov ax,4c00h</span><br><span class="line">int 21h</span><br><span class="line"></span><br><span class="line">change:push ax</span><br><span class="line">push bx</span><br><span class="line">push cx</span><br><span class="line">push di</span><br><span class="line">push si</span><br><span class="line"></span><br><span class="line">mov di,0</span><br><span class="line">d20:mov cl,10</span><br><span class="line">div cl</span><br><span class="line">add ah,30h</span><br><span class="line">mov bl,al</span><br><span class="line">mov al,ah</span><br><span class="line">mov ah,0</span><br><span class="line">push ax</span><br><span class="line">inc di</span><br><span class="line">mov al,bl</span><br><span class="line">mov ah,0</span><br><span class="line">mov cx,ax</span><br><span class="line">jcxz d1</span><br><span class="line">mov ax,cx</span><br><span class="line">jmp d20</span><br><span class="line"></span><br><span class="line">d1:mov cx,di</span><br><span class="line"></span><br><span class="line">d2:pop ax</span><br><span class="line">mov [si],al</span><br><span class="line">inc si</span><br><span class="line">loop d2</span><br><span class="line">pop si</span><br><span class="line">pop di</span><br><span class="line">pop cx</span><br><span class="line">pop bx</span><br><span class="line">pop ax</span><br><span class="line">ret</span><br><span class="line"></span><br><span class="line">show:push ax</span><br><span class="line">push bx</span><br><span class="line">push cx</span><br><span class="line">push dx</span><br><span class="line">push es</span><br><span class="line">push si</span><br><span class="line"></span><br><span class="line">mov ax,0b800h</span><br><span class="line">mov es,ax</span><br><span class="line">mov ch,0</span><br><span class="line">mov al,160</span><br><span class="line">mul dh</span><br><span class="line">mov bx,ax</span><br><span class="line">mov al,2</span><br><span class="line">mul dl</span><br><span class="line">add bx,ax</span><br><span class="line">mov al,cl</span><br><span class="line">mov cl,0</span><br><span class="line"></span><br><span class="line">s1:mov ch,[si]</span><br><span class="line">jcxz s2</span><br><span class="line">mov es:[bx],ch</span><br><span class="line">mov es:[bx+1],al</span><br><span class="line">add si,1</span><br><span class="line">add bx,2</span><br><span class="line">jmp s1</span><br><span class="line"></span><br><span class="line">s2:pop si</span><br><span class="line">pop es</span><br><span class="line">pop dx</span><br><span class="line">pop cx</span><br><span class="line">pop bx</span><br><span class="line">pop ax</span><br><span class="line">ret</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><h3 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="/2019/05/24/%E6%B1%87%E7%BC%96%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E5%AE%9E%E9%AA%8C/3.png" alt="3"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;汇编本应该是一门很多人头疼的学科，但是我学的备感兴趣，这里是本学期的三个小实验，我真的非常非常感谢遇见了万小容老师，她讲课真的讲得特别好。汇编语言，一门无数个学长学姐都给我打预防针，头疼的科目，我学的津津有味。或许以后会忘记很多，但是为什么C语言是这样运作的，和操作系统的一些衔接，这对于我非常的有用。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="汇编" scheme="https://zh1n1an.github.io/categories/%E6%B1%87%E7%BC%96/"/>
    
    
      <category term="汇编" scheme="https://zh1n1an.github.io/tags/%E6%B1%87%E7%BC%96/"/>
    
      <category term="寄存器" scheme="https://zh1n1an.github.io/tags/%E5%AF%84%E5%AD%98%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>方格填数</title>
    <link href="https://zh1n1an.github.io/2019/04/29/%E6%96%B9%E6%A0%BC%E5%A1%AB%E6%95%B0/"/>
    <id>https://zh1n1an.github.io/2019/04/29/方格填数/</id>
    <published>2019-04-29T11:49:43.000Z</published>
    <updated>2019-11-08T12:59:03.812Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>方格填数（回溯算法求解）</strong></p><ul><li><p>回溯算法实际上一个类似枚举的搜索尝试过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就“回溯”返回，尝试别的路径。回溯法是一种选优搜索法，按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，这种走不通就退回再走的技术为回溯法，而满足回溯条件的某个状态的点称为“回溯点”。许多复杂的，规模较大的问题都可以使用回溯法，有“通用解题方法”的美称。</p></li><li><p>回溯法有通用解法的美称，对于很多问题，如迷宫等都有很好的效果。回溯算法实际上一个类似枚举的深度优先搜索尝试过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就“回溯”返回（也就是递归返回），尝试别的路径。许多复杂的，规模较大的问题都可以使用回溯法，有“通用解题方法”的美称。回溯法说白了就是穷举法。回溯法一般用递归来解决。</p><a id="more"></a></li></ul><h2 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h2><ul><li>回溯法一般都用在要给出多个可以实现最终条件的解的最终形式。回溯法要求对解要添加一些约束条件。总的来说，如果要解决一个回溯法的问题，通常要确定三个元素：</li></ul><ol><li>选择。对于每个特定的解，肯定是由一步步构建而来的，而每一步怎么构建，肯定都是有限个选择，要怎么选择，这个要知道；同时，在编程时候要定下，优先或合法的每一步选择的顺序，一般是通过多个if或者for循环来排列。</li><li>条件。对于每个特定的解的某一步，他必然要符合某个解要求符合的条件，如果不符合条件，就要回溯，其实回溯也就是递归调用的返回。</li><li>结束。当到达一个特定结束条件时候，就认为这个一步步构建的解是符合要求的解了。把解存下来或者打印出来。对于这一步来说，有时候也可以另外写一个issolution函数来进行判断。注意，当到达第三步后，有时候还需要构建一个数据结构，把符合要求的解存起来，便于当得到所有解后，把解空间输出来。这个数据结构必须是全局的，作为参数之一传递给递归函数。</li></ol><ul><li>对于回溯法来说，每次递归调用，很重要的一点是把每次递归的不同信息传递给递归调用的函数。而这里最重要的要传递给递归调用函数的信息，就是把上一步做过的某些事情的这个选择排除，避免重复和无限递归。另外还有一个信息必须传递给递归函数，就是进行了每一步选择后，暂时还没构成完整的解，这个时候前面所有选择的汇总也要传递进去。而且一般情况下，都是能从传递给递归函数的参数处，得到结束条件的。</li><li>递归函数的参数的选择，要遵循四个原则：</li></ul><ol><li>必须要有一个临时变量(可以就直接传递一个字面量或者常量进去)传递不完整的解，因为每一步选择后，暂时还没构成完整的解，这个时候这个选择的不完整解，也要想办法传递给递归函数。也就是，把每次递归的不同情况传递给递归调用的函数。</li><li>可以有一个全局变量，用来存储完整的每个解，一般是个集合容器（也不一定要有这样一个变量，因为每次符合结束条件，不完整解就是完整解了，直接打印即可）。</li><li>最重要的一点，一定要在参数设计中，可以得到结束条件。一个选择是可以传递一个量n，也许是数组的长度，也许是数量，等等。</li><li>要保证递归函数返回后，状态可以恢复到递归前，以此达到真正回溯。</li></ol><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><ul><li>如下的10个格子</li><li><img src="/2019/04/29/%E6%96%B9%E6%A0%BC%E5%A1%AB%E6%95%B0/1.jpg" alt="1"></li><li>填入0~9的数字。要求：连续的两个数字不能相邻。</li><li>（左右、上下、对角都算相邻）</li><li>一共有多少种可能的填数方案？</li><li>请填写表示方案数目的整数。</li><li>注意：你提交的应该是一个整数，不要填写任何多余的内容或说明性文字。</li></ul><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><p>首先我想到的就是回溯，比如第一个格子从0-9抓一个，然后第二个格子只能从剩下里面抓，并且每填写一个格子，就判断可以继续么（即满足连续的两个数字不能相邻么），然后如果OK，那么继续，直到最后一个格子能填上，就把次情况记录下来，但是如果判断不行，那么回溯上一个，继续遍历下一个可以抓的的数字，直到遍历完为止。</p><p><strong>算法的伪代码：（将此框框补满补成五行六列的二维数组，是为了防止遍历判断的时候下标越界）</strong></p><p><strong>输入：无</strong></p><p><strong>输出：有多少种可能的填数方案</strong></p><ol><li>定义一个a[5][6]五行六列的二维数组。</li><li>定义一个vis[10]有十个元素的一维数组用来标记是否被访问过。</li><li>定义一个ans计数器。</li><li>初始化数组(数组全部赋值为-10)</li><li>传入(1,2)给f函数。<ol><li>f函数：if (x == 3 &amp;&amp; y == 4)//即到达最末尾的格子<ol><li>计数器ans++</li><li>否则for (int i = 0; i &lt; 10; ++i)//从0-9抓一个<ol><li>if (vis[i] == 0) //i没有被用过<ol><li>a[x][y] = i //填入数字</li><li>if(!check(x,y))//判断是否合法（即是否能满足连续的两个数字不能相邻么，<strong><em>check函数的思路最后再写了\</em></strong>）<ol><li>若不合法，a[x][y]=-10 //把-10恢复并跳出此循环continue</li><li>否则 vis[i] = 1 //标记为已访问</li><li>if (y == 4)//如果y到4了，换行</li><li>f(x + 1, 1)//传入换行后的位置</li><li>否则，f(x, y + 1)//传入下一个位置</li><li>vis[i] = 0 a[x][y]=-10//将此标记恢复，并且将此位置的值恢复为-10</li></ol></li></ol></li></ol></li></ol></li></ol></li><li>输出计数器ans的值。</li></ol><p><strong>check**</strong>函数的伪代码：**</p><ol><li>遍历穿入位置的i，j为a[i][j]此位置的附近包括自己9个格子的数字为a[x][y]<ol><li>判断,如果a[x][y] - a[i][j]的绝对值为1（说明两数相邻）<ol><li>返回False</li></ol></li></ol></li><li>遍历完毕也没有返回False，说明检查通过，返回True</li></ol><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by ZhiNian on 2019/4/29.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">5</span>][<span class="number">6</span>];<span class="comment">//记录每个位置的值</span></span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">10</span>];<span class="comment">//记录0-9是否被用过</span></span><br><span class="line"><span class="keyword">int</span> ans;<span class="comment">//记录下每一次可行的填数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;<span class="comment">//检查</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = i - <span class="number">1</span>; x &lt;= i + <span class="number">1</span>; ++x) &#123;<span class="comment">//横向的此位置的左边一个到右边一个</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> y = j - <span class="number">1</span>; y &lt;= j + <span class="number">1</span>; ++y) &#123;<span class="comment">//纵向的的此位置上面一个到下面一个</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">abs</span>(a[x][y] - a[i][j]) == <span class="number">1</span>)<span class="comment">//如果与原数差的绝对值为1 ，说明相邻</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//返回False</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//遍历完都没有返回，那么说明符合，返回True</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">3</span> &amp;&amp; y == <span class="number">4</span>) &#123;<span class="comment">//遍历到了最后一个位置</span></span><br><span class="line">        ans++;<span class="comment">//此填数方法可行，则计数器加一</span></span><br><span class="line">        <span class="keyword">return</span>;<span class="comment">//返回函数，因为为void函数，所以返回无</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;<span class="comment">//从0~9中抓一个</span></span><br><span class="line">        <span class="keyword">if</span> (vis[i] == <span class="number">0</span>) &#123;<span class="comment">//检查是否使用过</span></span><br><span class="line">            a[x][y] = i;<span class="comment">//填数</span></span><br><span class="line">            <span class="keyword">if</span> (!check(x, y)) &#123;<span class="comment">//不合法</span></span><br><span class="line">                a[x][y] = <span class="number">-10</span>;<span class="comment">//恢复-10</span></span><br><span class="line">                <span class="keyword">continue</span>;<span class="comment">//跳出循环继续</span></span><br><span class="line">            &#125;</span><br><span class="line">            vis[i] = <span class="number">1</span>;<span class="comment">//若合法，标记为已访问</span></span><br><span class="line">            <span class="keyword">if</span> (y == <span class="number">4</span>)<span class="comment">//如果到第四列了</span></span><br><span class="line">                f(x + <span class="number">1</span>, <span class="number">1</span>);<span class="comment">//传入换行的位置给f递归</span></span><br><span class="line">            <span class="keyword">else</span><span class="comment">//否则</span></span><br><span class="line">                f(x, y + <span class="number">1</span>);<span class="comment">//传入下一个的位置给f递归</span></span><br><span class="line"></span><br><span class="line">            vis[i] = <span class="number">0</span>;<span class="comment">//回溯恢复标记为0</span></span><br><span class="line">            a[x][y] = <span class="number">-10</span>;<span class="comment">//回溯恢复值为-10</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;<span class="comment">//从第1行到第5行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; ++j) &#123;<span class="comment">//从第1列到第6列</span></span><br><span class="line">            a[i][j] = <span class="number">-10</span>;<span class="comment">//全部赋值为-10</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    init();<span class="comment">//初始化二维数组</span></span><br><span class="line">    f(<span class="number">1</span>, <span class="number">2</span>);<span class="comment">//传入入口位置</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//输出计数器的值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="/2019/04/29/%E6%96%B9%E6%A0%BC%E5%A1%AB%E6%95%B0/2.jpg" alt="2"></p><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p><img src="/2019/04/29/%E6%96%B9%E6%A0%BC%E5%A1%AB%E6%95%B0/3.jpg" alt="3"></p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p><img src="/2019/04/29/%E6%96%B9%E6%A0%BC%E5%A1%AB%E6%95%B0/4.jpg" alt="4"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>这一次的试验内容很具有代表性，通过上机操作实践与对问题的思考，让我更深层次领悟了回溯法的思想。</li><li>回溯算的基本思路并不难理解，简单来说就是：从一条路往前走，能进则进，不能进则退回来，换另一条路再试试。回溯法的基本做法是深度优先搜索，是一种组织得仅仅有条的、能避免不必要重复的穷举式搜索算法。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;方格填数（回溯算法求解）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;回溯算法实际上一个类似枚举的搜索尝试过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就“回溯”返回，尝试别的路径。回溯法是一种选优搜索法，按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，这种走不通就退回再走的技术为回溯法，而满足回溯条件的某个状态的点称为“回溯点”。许多复杂的，规模较大的问题都可以使用回溯法，有“通用解题方法”的美称。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;回溯法有通用解法的美称，对于很多问题，如迷宫等都有很好的效果。回溯算法实际上一个类似枚举的深度优先搜索尝试过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就“回溯”返回（也就是递归返回），尝试别的路径。许多复杂的，规模较大的问题都可以使用回溯法，有“通用解题方法”的美称。回溯法说白了就是穷举法。回溯法一般用递归来解决。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://zh1n1an.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="C/C++" scheme="https://zh1n1an.github.io/categories/%E7%AE%97%E6%B3%95/C-C/"/>
    
    
      <category term="C/C++" scheme="https://zh1n1an.github.io/tags/C-C/"/>
    
      <category term="算法" scheme="https://zh1n1an.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>最大字段和</title>
    <link href="https://zh1n1an.github.io/2019/04/24/%E6%9C%80%E5%A4%A7%E5%AD%97%E6%AE%B5%E5%92%8C/"/>
    <id>https://zh1n1an.github.io/2019/04/24/最大字段和/</id>
    <published>2019-04-24T12:19:59.000Z</published>
    <updated>2019-11-08T12:58:45.481Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>问题： 给定n个整数（可能为负数）组成的序列a[1],a[2],a[3],…,a[n],求该序列如a[i]+a[i+1]+…+a[j]的子段和的最大值。当所给的整数均为负数时定义子段和为0，依此定义，所求的最优值为： Max{0,a[i]+a[i+1]+…+a[j]},1&lt;=i&lt;=j&lt;=n 例如，当（a[1],a[2],a[3],a[4],a[5],a[6]）=(-20,11,-4,13,-5,-2)时，最大子段和为20。</li><li>最大子段和是动态规划中的一种。</li></ul><a id="more"></a><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><ol><li>划分：按照平衡子问题的原则，将序列（a1，a2，….，an）划分成成都相同的两个子序列(a1,…,an/2)和（an/2+1,…,an）,则会出现以下三种情况。<ol><li>最大字段和为(a1,…,an/2)</li><li>最大字段和为（an/2+1,…,an）</li><li>最大字段和为两者之间</li></ol></li><li>求解子问题：对于划分阶段的情况，1和2可以递归求解，而第三种情况需要分别计算</li><li>合并：比较在划分阶段三种情况下的最大字段和，取三者之中较大者为原问题的解</li></ol><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by ZhiNian on 2019/4/24.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MaxSum</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>,midSum=<span class="number">0</span>,leftSum=<span class="number">0</span>,rightSum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> center,s1,s2,lefts,rights;</span><br><span class="line">    <span class="keyword">if</span>(left==right)&#123;</span><br><span class="line">        sum=a[left];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        center=(left+right)/<span class="number">2</span>;</span><br><span class="line">        leftSum=MaxSum(a,left,center);</span><br><span class="line">        rightSum=MaxSum(a,center+<span class="number">1</span>,right);</span><br><span class="line">        s1=<span class="number">0</span>;lefts=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=center;i&gt;=left;i--)&#123;</span><br><span class="line">            lefts+=a[i];</span><br><span class="line">            <span class="keyword">if</span>(lefts&gt;s1) s1=lefts;</span><br><span class="line">        &#125;</span><br><span class="line">        s2=<span class="number">0</span>;rights=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=center+<span class="number">1</span>;j&lt;=right;j++)&#123;</span><br><span class="line">            rights+=a[j];</span><br><span class="line">            <span class="keyword">if</span>(rights&gt;s2)s2=rights;</span><br><span class="line">        &#125;</span><br><span class="line">        midSum=s1+s2;</span><br><span class="line">        <span class="keyword">if</span>(midSum&lt;leftSum)sum=leftSum;</span><br><span class="line">        <span class="keyword">else</span> sum=midSum;</span><br><span class="line">        <span class="keyword">if</span>(sum&lt;rightSum)sum=rightSum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[N]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">//printf("%d",sizeof(a));</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="keyword">sizeof</span>(a)/<span class="number">4</span>);i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        <span class="keyword">if</span>(a[i]==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,MaxSum(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a)/<span class="number">4</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 测试数据</span></span><br><span class="line"><span class="comment"> * （-20，11，-4，13，-5，-2）</span></span><br><span class="line"><span class="comment"> * 结尾就输入0</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="/2019/04/24/%E6%9C%80%E5%A4%A7%E5%AD%97%E6%AE%B5%E5%92%8C/1.png" alt="1"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;问题： 给定n个整数（可能为负数）组成的序列a[1],a[2],a[3],…,a[n],求该序列如a[i]+a[i+1]+…+a[j]的子段和的最大值。当所给的整数均为负数时定义子段和为0，依此定义，所求的最优值为： Max{0,a[i]+a[i+1]+…+a[j]},1&amp;lt;=i&amp;lt;=j&amp;lt;=n 例如，当（a[1],a[2],a[3],a[4],a[5],a[6]）=(-20,11,-4,13,-5,-2)时，最大子段和为20。&lt;/li&gt;
&lt;li&gt;最大子段和是动态规划中的一种。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://zh1n1an.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="C/C++" scheme="https://zh1n1an.github.io/categories/%E7%AE%97%E6%B3%95/C-C/"/>
    
    
      <category term="C/C++" scheme="https://zh1n1an.github.io/tags/C-C/"/>
    
      <category term="算法" scheme="https://zh1n1an.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>最小生成树</title>
    <link href="https://zh1n1an.github.io/2019/04/23/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    <id>https://zh1n1an.github.io/2019/04/23/最小生成树/</id>
    <published>2019-04-23T11:49:26.000Z</published>
    <updated>2019-11-08T12:58:54.722Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>设G=(V,E)是一个无向连通图，求再G的所有生成树中，代价最小的生成树。</strong></p><a id="more"></a><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><ol><li>输入：一个加权连通图，其中顶点集合为<strong><strong>V</strong></strong>，边集合为<strong><strong>E</strong></strong>；</li><li>初始化：<strong><strong>Vnew = {x}</strong></strong>，其中<strong><strong>x</strong></strong>为集合<strong><strong>V</strong></strong>中的任一节点（起始点），<strong><strong>Enew = {},</strong></strong>为空；</li><li>重复下列操作，直到<strong><strong>Vnew = V</strong></strong>：<ol><li>在集合<strong><strong>E</strong></strong>中选取权值最小的边<strong>****</strong>，其中<strong><strong>u</strong></strong>为集合<strong><strong>Vnew</strong></strong>中的元素，而<strong><strong>v</strong></strong>不在<strong><strong>Vnew</strong></strong>集合当中，并且<strong><strong>v</strong></strong>∈<strong><strong>V</strong></strong>（如果存在有多条满足前述条件即具有相同权值的边，则可任意选取其中之一）；</li><li>将<strong><strong>v</strong></strong>加入集合<strong><strong>Vnew</strong></strong>中，将<strong>****</strong>边加入集合<strong><strong>Enew</strong></strong>中；</li></ol></li><li>输出：使用集合<strong><strong>Vnew</strong></strong>和<strong><strong>Enew</strong></strong>来描述所得到的最小生成树。</li></ol><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> n 6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> fromvex,endvex;</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125; edge;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dist[n][n];</span><br><span class="line">edge T[n<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;dist[i<span class="number">-1</span>][j<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PRIM</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j,k,m,v,<span class="built_in">min</span>,<span class="built_in">max</span>=<span class="number">10000</span>;</span><br><span class="line">    <span class="keyword">int</span> d;</span><br><span class="line">    edge e;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;n;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        T[j<span class="number">-1</span>].fromvex=<span class="number">1</span>;</span><br><span class="line">        T[j<span class="number">-1</span>].endvex=j+<span class="number">1</span>;</span><br><span class="line">        T[j<span class="number">-1</span>].length=dist[<span class="number">0</span>][j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;n<span class="number">-1</span>;k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">min</span>=<span class="built_in">max</span>;</span><br><span class="line">        <span class="keyword">for</span>(j=k;j&lt;n<span class="number">-1</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(T[j].length&lt;<span class="built_in">min</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">min</span>=T[j].length;</span><br><span class="line">                m=j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        e=T[m];T[m]=T[k];T[k]=e;</span><br><span class="line">        v=T[k].endvex;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"The %d edge: %d---%d ,cost: %d\n"</span>,k+<span class="number">1</span>,T[k].fromvex,T[k].endvex,T[k].length);</span><br><span class="line">        <span class="keyword">for</span>(j=k+<span class="number">1</span>;j&lt;n<span class="number">-1</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            d=dist[v<span class="number">-1</span>][T[j].endvex<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">if</span>(d&lt;T[j].length)</span><br><span class="line">            &#123;</span><br><span class="line">                T[j].length=d;</span><br><span class="line">                T[j].fromvex=v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    input();</span><br><span class="line">    PRIM();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 测试数据</span></span><br><span class="line"><span class="comment">8 6 1 5 8 8</span></span><br><span class="line"><span class="comment">6 8 5 8 3 8</span></span><br><span class="line"><span class="comment">1 5 8 7 5 4</span></span><br><span class="line"><span class="comment">5 8 7 8 8 2</span></span><br><span class="line"><span class="comment">8 3 5 8 8 6</span></span><br><span class="line"><span class="comment">8 8 4 2 6 8</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="/2019/04/23/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/1.png" alt="1"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;设G=(V,E)是一个无向连通图，求再G的所有生成树中，代价最小的生成树。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://zh1n1an.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="C/C++" scheme="https://zh1n1an.github.io/categories/%E7%AE%97%E6%B3%95/C-C/"/>
    
    
      <category term="C/C++" scheme="https://zh1n1an.github.io/tags/C-C/"/>
    
      <category term="算法" scheme="https://zh1n1an.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>C++中的vector使用详细说明</title>
    <link href="https://zh1n1an.github.io/2019/03/28/C-%E4%B8%AD%E7%9A%84vector%E4%BD%BF%E7%94%A8%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/"/>
    <id>https://zh1n1an.github.io/2019/03/28/C-中的vector使用详细说明/</id>
    <published>2019-03-28T02:39:51.000Z</published>
    <updated>2019-11-08T05:46:01.302Z</updated>
    
    <content type="html"><![CDATA[<p>今天在解决2013 蓝桥省赛 A组 第四题的时候，发现了讲解视频在用 vector 而我们上课却没有学过这个，所以特从别的地方摘抄了这么一个用法去学习，转自 <a href="https://www.cnblogs.com/aminxu/p/4686332.html" target="_blank" rel="noopener">https://www.cnblogs.com/aminxu/p/4686332.html</a></p><a id="more"></a><ul><li><p>一、向量的介绍</p><p>向量 <code>vector</code> 是一种对象实体, 能够容纳许多其他类型相同的元素, 因此又被称为容器。 与<code>string</code>相同, <code>vector</code> 同属于STL(Standard Template Library, 标准模板库)中的一种自定义的数据类型, 可以广义上认为是数组的增强版。在使用它时, 需要包含头文件 <code>vector</code>, <code>#include&lt;vector&gt;</code>。vector容器与数组相比其优点在于它能够根据需要随时自动调整自身的大小以便容下所要放入的元素。此外, <code>vector</code> 也提供了许多的方法来对自身进行操作。</p><!--more--></li><li><p><strong>二、向量的声明及初始化</strong></p><pre><code>vector 型变量的声明以及初始化的形式也有许多, 常用的有以下几种形式：</code></pre><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a ;                            <span class="comment">//声明一个int型向量</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(<span class="number">10</span>);                         <span class="comment">//声明一个初始大小为10的向量</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(<span class="number">10</span>, <span class="number">1</span>);                      <span class="comment">//声明一个初始大小为10且初始值都为1的向量</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; b(a);                          <span class="comment">//声明并用向量a初始化向量b</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; b(a.<span class="built_in">begin</span>(), a.<span class="built_in">begin</span>()+<span class="number">3</span>);     <span class="comment">//将a向量中从第0个到第2个(共3个)作为向量b的初始值</span></span><br></pre></td></tr></table></figure><p>除此之外, 还可以直接使用数组来初始化向量：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125; ;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(n, n+<span class="number">5</span>) ;              <span class="comment">//将数组n的前5个元素作为向量a的初值</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(&amp;n[<span class="number">1</span>], &amp;n[<span class="number">4</span>]) ;        <span class="comment">//将n[1] - n[4]范围内的元素作为向量a的初值</span></span><br></pre></td></tr></table></figure></li><li><p><strong>三、元素的输入及访问</strong></p><pre><code>元素的输入和访问可以像操作普通的数组那样, 用**cin&gt;&gt;**进行输入, **cout&lt;&lt;a[n]**这样进行输出:示例:：</code></pre><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(<span class="number">10</span>, <span class="number">0</span>) ;      <span class="comment">//大小为10初值为0的向量a</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//对其中部分元素进行输入</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt;a[<span class="number">2</span>] ;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt;a[<span class="number">5</span>] ;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt;a[<span class="number">6</span>] ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//全部输出</span></span><br><span class="line">    <span class="keyword">int</span> i ;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;a.<span class="built_in">size</span>(); i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在元素的输出上, 还可以使用遍历器(又称迭代器)进行输出控制。在 <strong>vector<int> b(a.begin(), a.begin()+3) ;</int></strong> 这种声明形式中, <strong>(a.begin()、a.begin()+3)</strong> 表示向量起始元素位置到起始元素+3之间的元素位置。(a.begin(), a.end())则表示起始元素和最后一个元素之外的元素位置。</p><p>向量元素的位置便成为遍历器, 同时, 向量元素的位置也是一种数据类型, 在向量中遍历器的类型为: <strong>vector<int>::iterator</int></strong>。 遍历器不但表示元素位置, 还可以再容器中前后移动。</p><p>在上例中讲元素全部输出部分的代码就可以改写为:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全部输出</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator t ;</span><br><span class="line"><span class="keyword">for</span>(t=a.<span class="built_in">begin</span>(); t!=a.<span class="built_in">end</span>(); t++)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;*t&lt;&lt;<span class="string">" "</span> ;</span><br></pre></td></tr></table></figure><p>​    <strong>*t</strong> 为指针的间接访问形式, 意思是访问t所指向的元素值</p></li><li><p><strong>四、向量的基本操作</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.<span class="built_in">size</span>()                 <span class="comment">//获取向量中的元素个数</span></span><br></pre></td></tr></table></figure></li></ul>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.empty()                <span class="comment">//判断向量是否为空</span></span><br></pre></td></tr></table></figure>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.<span class="built_in">clear</span>()                <span class="comment">//清空向量中的元素</span></span><br></pre></td></tr></table></figure>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">复制</span><br><span class="line">a = b ;            <span class="comment">//将b向量复制到a向量中</span></span><br></pre></td></tr></table></figure>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">比较</span><br><span class="line">保持 ==、!=、&gt;、&gt;=、&lt;、&lt;= 的惯有含义 ;</span><br><span class="line">如: a == b ;    <span class="comment">//a向量与b向量比较, 相等则返回1</span></span><br></pre></td></tr></table></figure>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">插入 - insert</span><br><span class="line">a.insert(a.<span class="built_in">begin</span>(), <span class="number">1000</span>);            <span class="comment">//将1000插入到向量a的起始位置前</span></span><br><span class="line">    </span><br><span class="line">a.insert(a.<span class="built_in">begin</span>(), <span class="number">3</span>, <span class="number">1000</span>) ;        <span class="comment">//将1000分别插入到向量元素位置的0-2处(共3个元素)</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(<span class="number">5</span>, <span class="number">1</span>) ;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; b(<span class="number">10</span>) ;</span><br><span class="line">b.insert(b.<span class="built_in">begin</span>(), a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>()) ;        <span class="comment">//将a.begin(), a.end()之间的全部元素插入到b.begin()前</span></span><br></pre></td></tr></table></figure>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">删除 - erase</span><br><span class="line">b.erase(b.<span class="built_in">begin</span>()) ;                     <span class="comment">//将起始位置的元素删除</span></span><br><span class="line">b.erase(b.<span class="built_in">begin</span>(), b.<span class="built_in">begin</span>()+<span class="number">3</span>) ;        <span class="comment">//将(b.begin(), b.begin()+3)之间的元素删除</span></span><br></pre></td></tr></table></figure>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">交换 - swap</span><br><span class="line">b.swap(a) ;            <span class="comment">//a向量与b向量进行交换</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>五、二维向量</strong></p><p>与数组相同, 向量也可以增加维数, 例如声明一个m*n大小的二维向量方式可以像如下形式:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; b(<span class="number">10</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">5</span>));        <span class="comment">//创建一个10*5的int型二维向量</span></span><br></pre></td></tr></table></figure><p>在这里, 实际上创建的是一个向量中元素为向量的向量。同样可以根据一维向量的相关特性对二维向量进行操作。</p><p>例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; b(<span class="number">10</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">5</span>, <span class="number">0</span>)) ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对部分数据进行输入</span></span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;b[<span class="number">1</span>][<span class="number">1</span>] ;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;b[<span class="number">2</span>][<span class="number">2</span>] ;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;b[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//全部输出</span></span><br><span class="line">    <span class="keyword">int</span> m, n ;</span><br><span class="line">    <span class="keyword">for</span>(m=<span class="number">0</span>; m&lt;b.<span class="built_in">size</span>(); m++)           <span class="comment">//b.size()获取行向量的大小</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(n=<span class="number">0</span>; n&lt;b[m].<span class="built_in">size</span>(); n++)    <span class="comment">//获取向量中具体每个向量的大小</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;b[m][n]&lt;&lt;<span class="string">" "</span> ;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样, 按照这样的思路我们还可以创建更多维的向量, 不过维数太多会让向量变得难以灵活控制, 三维以上的向量还需酌情使用。</p><hr><ol><li>在C++中的详细说明<br>vector是C++标准模板库中的部分内容，它是一个多功能的，能够操作多种数据结构和算法的模板类和函数库。<br>vector之所以被认为是一个容器，是因为它能够像容器一样存放各种类型的对象，<br>简单地说，vector是一个能够存放任意类型的动态数组，能够增加和压缩数据。</li></ol></li></ul><pre><code>2. 使用vector，必须在你的头文件中包含下面的代码：  `#include&lt;vector&gt;` </code></pre><p>  vector属于std命名域的，因此需要通过命名限定，如下完成你的代码：<br>  　　<code>using std::vector;</code><br>  　　<code>vector vInts;</code><br>  　　<br>  或者连在一起，使用全名：<br>      <code>std::vector vInts;</code><br>  　　<br>  建议使用全局的命名域方式：<br>      using namespace std;</p><pre><code>3. 初始化   <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>                 <span class="comment">// 创建一个空的vector。</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span> <span class="title">c1</span><span class="params">(c2)</span>          <span class="comment">// 复制一个vector</span></span></span><br><span class="line"><span class="function"><span class="built_in">vector</span> <span class="title">c</span><span class="params">(n)</span>            <span class="comment">// 创建一个vector，含有n个数据，数据均已缺省构造产生</span></span></span><br><span class="line"><span class="function"><span class="built_in">vector</span> <span class="title">c</span><span class="params">(n, elem)</span>      <span class="comment">// 创建一个含有n个elem拷贝的vector</span></span></span><br><span class="line"><span class="function"><span class="built_in">vector</span> <span class="title">c</span><span class="params">(beg,<span class="built_in">end</span>)</span>      <span class="comment">// 创建一个含有n个elem拷贝的vector</span></span></span><br></pre></td></tr></table></figure>4. 析构函数<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c.~<span class="built_in">vector</span> ()           <span class="comment">// 销毁所有数据，释放内存</span></span><br></pre></td></tr></table></figure>5. 成员函数`c.assign(beg,end)c.assign(n,elem)`　　将[beg; end)区间中的数据赋值给c。将n个elem的拷贝赋值给c。`c.at(idx)`　　传回索引idx所指的数据，如果idx越界，抛出out_of_range。</code></pre>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">c.back()      <span class="comment">// 传回最后一个数据，不检查这个数据是否存在。</span></span><br><span class="line">c.<span class="built_in">begin</span>()     <span class="comment">// 传回迭代器中的第一个数据地址。</span></span><br><span class="line">c.capacity()  <span class="comment">// 返回容器中数据个数。</span></span><br><span class="line">c.<span class="built_in">clear</span>()     <span class="comment">// 移除容器中所有数据。</span></span><br><span class="line">c.empty()     <span class="comment">// 判断容器是否为空。</span></span><br><span class="line">c.<span class="built_in">end</span>()       <span class="comment">// 指向迭代器中末端元素的下一个，指向一个不存在元素。</span></span><br><span class="line">c.erase(pos)  <span class="comment">// 删除pos位置的数据，传回下一个数据的位置。</span></span><br><span class="line">c.erase(beg,<span class="built_in">end</span>)  <span class="comment">//删除[beg,end)区间的数据，传回下一个数据的位置。</span></span><br><span class="line">c.front()     <span class="comment">// 传回第一个数据。</span></span><br><span class="line"></span><br><span class="line">get_allocator <span class="comment">// 使用构造函数返回一个拷贝。</span></span><br><span class="line"></span><br><span class="line">c.insert(pos,elem)    <span class="comment">// 在pos位置插入一个elem拷贝，传回新数据位置。</span></span><br><span class="line">c.insert(pos,n,elem)  <span class="comment">// 在pos位置插入n个elem数据。无返回值。</span></span><br><span class="line">c.insert(pos,beg,<span class="built_in">end</span>) <span class="comment">// 在pos位置插入在[beg,end)区间的数据。无返回值。</span></span><br><span class="line">　　</span><br><span class="line">c.max_size()       <span class="comment">// 返回容器中最大数据的数量。</span></span><br><span class="line">c.pop_back()       <span class="comment">// 删除最后一个数据。</span></span><br><span class="line">c.push_back(elem)  <span class="comment">// 在尾部加入一个数据。</span></span><br><span class="line">c.rbegin()         <span class="comment">// 传回一个逆向队列的第一个数据。</span></span><br><span class="line">c.rend()           <span class="comment">// 传回一个逆向队列的最后一个数据的下一个位置。</span></span><br><span class="line">c.resize(num)      <span class="comment">// 重新指定队列的长度。</span></span><br><span class="line">c.reserve()        <span class="comment">// 保留适当的容量。</span></span><br><span class="line">c.<span class="built_in">size</span>()           <span class="comment">// 返回容器中实际数据的个数。</span></span><br><span class="line">c1.swap(c2)</span><br><span class="line">swap(c1,c2)        <span class="comment">// 将c1和c2元素互换。同上操作。</span></span><br><span class="line"><span class="keyword">operator</span>[]         <span class="comment">// 返回容器中指定位置的一个引用。</span></span><br></pre></td></tr></table></figure><pre><code>6. 用法示例：6.1. 创建一个vectorvector容器提供了多种创建方法，下面介绍几种常用的。创建一个Widget类型的空的vector对象：　　`vector vWidgets;`创建一个包含500个Widget类型数据的vector：　　`vector vWidgets(500);`创建一个包含500个Widget类型数据的vector，并且都初始化为0：　　`v`ector vWidgets(500, Widget(0));　创建一个Widget的拷贝：　　`v`ector vWidgetsFromAnother(vWidgets);　　向vector添加一个数据​       vector添加数据的缺省方法是push_back()。       push_back()函数表示将数据添加到vector的尾部，并按需要来分配内存。例如：向vector中添加10个数据，需要如下编写代码：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i= <span class="number">0</span>;i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">    vWidgets.push_back(Widget(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>6.2 获取vector中指定位置的数据vector里面的数据是动态分配的，使用push_back()的一系列分配空间常常决定于文件或一些数据源。如果想知道vector存放了多少数据，可以使用empty()。获取vector的大小，可以使用size()。例如，如果想获取一个vector v的大小，但不知道它是否为空，或者已经包含了数据，如果为空想设置为-1，你可以使用下面的代码实现：　　`int nSize = v.empty() ? -1 : static_cast(v.size());`6.3 访问vector中的数据使用两种方法来访问vector。1、 vector::at()2、 vector::operator[]operator[]主要是为了与C语言进行兼容。它可以像C语言数组一样操作。但at()是我们的首选，因为at()进行了边界检查，如果访问超过了vector的范围，将抛出一个例外。由于operator[]容易造成一些错误，所有我们很少用它，下面进行验证一下：　　分析下面的代码：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span> v;</span><br><span class="line">    　　v.reserve(<span class="number">10</span>);</span><br><span class="line">    　　</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++) &#123;</span><br><span class="line">    　　  v.push_back(i);</span><br><span class="line">    　　&#125;</span><br><span class="line">    　　</span><br><span class="line">        <span class="keyword">try</span> &#123;<span class="keyword">int</span> iVal1 = v[<span class="number">7</span>];</span><br><span class="line">    　　  <span class="comment">// not bounds checked - will not throw</span></span><br><span class="line">    　　  <span class="keyword">int</span> iVal2 = v.at(<span class="number">7</span>);</span><br><span class="line">    　　  <span class="comment">// bounds checked - will throw if out of range</span></span><br><span class="line">    　　&#125; </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">catch</span>(<span class="keyword">const</span> exception&amp; e) &#123;</span><br><span class="line">    　　  <span class="built_in">cout</span> &lt;&lt; e.what();</span><br><span class="line">    　　&#125;</span><br></pre></td></tr></table></figure>　　6.3 删除vector中的数据vector能够非常容易地添加数据，也能很方便地取出数据，同样vector提供了erase()，pop_back()，clear()来删除数据，当删除数据时，应该知道要删除尾部的数据，或者是删除所有数据，还是个别的数据。Remove_if()算法 如果要使用remove_if()，需要在头文件中包含如下代码：：　　#include Remove_if()有三个参数：1、 iterator _First：指向第一个数据的迭代指针。2、 iterator _Last：指向最后一个数据的迭代指针。3、 predicate _Pred：一个可以对迭代操作的条件函数。　　6.4 条件函数条件函数是一个按照用户定义的条件返回是或否的结果，是最基本的函数指针，或是一个函数对象。这个函数对象需要支持所有的函数调用操作，重载operator()()操作。remove_if()是通过unary_function继承下来的，允许传递数据作为条件。例如，假如想从一个vector中删除匹配的数据，如果字串中包含了一个值，从这个值开始，从这个值结束。首先应该建立一个数据结构来包含这些数据，类似代码如下：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line">   <span class="keyword">enum</span> findmodes &#123;</span><br><span class="line">     FM_INVALID = <span class="number">0</span>,</span><br><span class="line">     FM_IS,</span><br><span class="line">   　FM_STARTSWITH,</span><br><span class="line">   　FM_ENDSWITH,</span><br><span class="line">   　FM_CONTAINS</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagFindStr</span> &#123;</span></span><br><span class="line">　UINT iMode;</span><br><span class="line">　CString szMatchStr;</span><br><span class="line">&#125; FindStr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> FindStr* LPFINDSTR;</span><br><span class="line">　　</span><br><span class="line">然后处理条件判断：</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FindMatchingString</span> :</span> <span class="keyword">public</span> <span class="built_in">std</span>::unary_function&lt;cstring, <span class="keyword">bool</span>=<span class="string">""</span>&gt; &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">　FindMatchingString(<span class="keyword">const</span> LPFINDSTR lpFS) :</span><br><span class="line">　m_lpFS(lpFS) &#123;&#125;</span><br><span class="line">　<span class="keyword">bool</span> <span class="keyword">operator</span>()(CString&amp; szStringToCompare) <span class="keyword">const</span> &#123;</span><br><span class="line">　　<span class="keyword">bool</span> retVal = <span class="literal">false</span>;</span><br><span class="line">　　</span><br><span class="line">    <span class="keyword">switch</span> (m_lpFS-&gt;iMode) &#123;</span><br><span class="line">　　<span class="keyword">case</span> FM_IS: &#123;</span><br><span class="line">　　  retVal = (szStringToCompare == m_lpFDD-&gt;szMatchStr);</span><br><span class="line">　　  <span class="keyword">break</span>;</span><br><span class="line">　　&#125;</span><br><span class="line">　　<span class="keyword">case</span> FM_STARTSWITH: &#123;</span><br><span class="line">　　  retVal = (szStringToCompare.Left(m_lpFDD-&gt;szMatchStr.GetLength())</span><br><span class="line">　　    == m_lpFDD-&gt;szWindowTitle);</span><br><span class="line">　　  <span class="keyword">break</span>;</span><br><span class="line">　　&#125;</span><br><span class="line">　　<span class="keyword">case</span> FM_ENDSWITH: &#123;</span><br><span class="line">　　  retVal = (szStringToCompare.Right(m_lpFDD-&gt;szMatchStr.GetLength())</span><br><span class="line">　　    == m_lpFDD-&gt;szMatchStr);</span><br><span class="line">　　<span class="keyword">break</span>;</span><br><span class="line">　　&#125;</span><br><span class="line">　　<span class="keyword">case</span> FM_CONTAINS: &#123;</span><br><span class="line">　　  retVal = (szStringToCompare.Find(m_lpFDD-&gt;szMatchStr) != <span class="number">-1</span>);</span><br><span class="line">　　  <span class="keyword">break</span>;</span><br><span class="line">　　&#125;</span><br><span class="line">　  &#125;</span><br><span class="line">　  <span class="keyword">return</span> retVal;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">　LPFINDSTR m_lpFS;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></code></pre><p>​    </p><p>  通过这个操作你可以从vector中有效地删除数据：</p><p>  Remove(),remove_if()等所有的移出操作都是建立在一个迭代范围上的，不能操作容器中的数据。<br>  所以在使用remove_if()，实际上操作的时容器里数据的上面的。</p><p>  看到remove_if()实际上是根据条件对迭代地址进行了修改，在数据的后面存在一些残余的数据，那些需要删除的数据。剩下的数据的位置可能不是原来的数据，但他们是不知道的。</p><p>  调用erase()来删除那些残余的数据。</p><p>  注意上面例子中通过erase()删除remove_if()的结果和vs.enc()范围的数据。</p><pre><code>7. 综合例子：</code></pre><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">```c++</span><br><span class="line"><span class="comment">//---------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> hdrstop</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Unit1.h"</span></span></span><br><span class="line"><span class="comment">//---------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> package(smart_init)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> resource <span class="meta-string">"*.dfm"</span></span></span><br><span class="line">TForm1 *Form1;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">STResult</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> Time;</span><br><span class="line">    <span class="keyword">double</span> Xp;</span><br><span class="line">    <span class="keyword">double</span> Yp;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------------------------------------------------------------</span></span><br><span class="line">__fastcall TForm1::TForm1(TComponent* Owner)</span><br><span class="line">    : TForm(Owner)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span> ResultVector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> __<span class="function">fastcall <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//test</span></span><br><span class="line">    <span class="comment">//vector ResultVector;</span></span><br><span class="line">    STResult stritem;</span><br><span class="line">    stritem.Time = <span class="number">.1</span>;</span><br><span class="line">    stritem.Xp = <span class="number">.1</span>;</span><br><span class="line">    stritem.Yp = <span class="number">.1</span>;</span><br><span class="line">    stritem.id = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    ResultVector.push_back( stritem );</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">void</span> __fastcall TForm1::Button1Click(TObject *Sender)</span><br><span class="line">&#123;</span><br><span class="line">    test();</span><br><span class="line">    assert(ResultVector[<span class="number">0</span>].id == <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">此文为摘抄，或有遗漏和错误待验证，摘抄下来学习基本的语法围住，若有不会再查阅进行修改。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在解决2013 蓝桥省赛 A组 第四题的时候，发现了讲解视频在用 vector 而我们上课却没有学过这个，所以特从别的地方摘抄了这么一个用法去学习，转自 &lt;a href=&quot;https://www.cnblogs.com/aminxu/p/4686332.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/aminxu/p/4686332.html&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="C/C++" scheme="https://zh1n1an.github.io/categories/C-C/"/>
    
      <category term="Vector" scheme="https://zh1n1an.github.io/categories/C-C/Vector/"/>
    
    
      <category term="C/C++" scheme="https://zh1n1an.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>Java异常及异常处理</title>
    <link href="https://zh1n1an.github.io/2019/03/28/Java%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>https://zh1n1an.github.io/2019/03/28/Java异常及异常处理/</id>
    <published>2019-03-28T02:28:10.000Z</published>
    <updated>2019-11-08T05:48:07.614Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java异常简介"><a href="#Java异常简介" class="headerlink" title="Java异常简介"></a>Java异常简介</h3><p>Throwable是万恶之源，它是所有异常的父类，它有两个儿子，大儿子叫Error,二儿子叫Exception。</p><p>1、Error是系统错误，很少出现，是程序的终结者，我们一般不会期待它的出现。Error有两个儿子，分别是VirtualMachineError和ThreadDath。</p><a id="more"></a><p>2、Exception：它的出现一般是因为编码、环境、用户操作输入出现问题而导致的。</p><p>Exception也是有两个儿子，一个叫非检查异常，另一个叫检查异常。</p><ul><li>非检查异常 RuntimeException：由Java虚拟机自动抛出，并且自动捕获。一般是代码有问题。</li><li>检查异常：与RuntimeException不同，需要收到添加、捕获和处理。</li></ul><p>它们的关系图如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A(Throwable) --&gt; B(Error)</span><br><span class="line">A --&gt; C(Exception)</span><br><span class="line">B--&gt; D(VirtualMachineError)</span><br><span class="line">B--&gt; E(ThreadDath)</span><br><span class="line">C--&gt; F(非检查异常 RuntimeException)</span><br><span class="line">C--&gt; G(检查异常)</span><br><span class="line">G--&gt;H(文件异常 IOException)</span><br><span class="line">G--&gt;I(SQL异常 SQLException)</span><br></pre></td></tr></table></figure><h3 id="try…catch…finally实现异常处理"><a href="#try…catch…finally实现异常处理" class="headerlink" title="try…catch…finally实现异常处理"></a>try…catch…finally实现异常处理</h3><p>用try-catch-finally处理异常的格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//一些会抛出异常的方法</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">    <span class="comment">//处理该异常的代码块</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception2 e) &#123;</span><br><span class="line">    <span class="comment">//处理Exception2的代码块</span></span><br><span class="line">&#125;...(n个<span class="keyword">catch</span>块)... &#123;</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//最终要执行的一些代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>try-catch必须一起用，不过catch有多少个取决于try模块中有多少种代码可能出现异常，每个处理一种异常。</p><p>try-catch-finally程序先执行try中的程序，当出现异常时在catch中寻找对应的处理方法，最后执行finally。</p><p>注意：catch语句中异常必须遵循“先子类，后父类”的原则。</p><p>测试代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TryCathTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">TryTest tt = <span class="keyword">new</span> TryTest();</span><br><span class="line">System.out.println(<span class="string">"test返回值："</span> + tt.test());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TryTest</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> div = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">while</span>(div&gt;-<span class="number">1</span>) &#123;</span><br><span class="line">div--;</span><br><span class="line">result = a/div;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line"> <span class="comment">//打印出异常e</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">System.out.println(<span class="string">"执行catch....."</span>);</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"执行finally....."</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">java.lang.ArithmeticException: / by zero</span><br><span class="line">执行<span class="keyword">catch</span>.....</span><br><span class="line">执行<span class="keyword">finally</span>.....</span><br><span class="line">at com.imooc.exception.TryTest.test(TryCathTest.java:<span class="number">20</span>)</span><br><span class="line">at com.imooc.exception.TryCathTest.main(TryCathTest.java:<span class="number">8</span>)</span><br><span class="line">test返回值：<span class="number">100</span></span><br></pre></td></tr></table></figure><p>分析程序与运行结果：</p><p>test()方法中会出现a/0的情况，这样会抛出一个Exception的异常，被catch捕获到了。之后便是打印出了捕获到的异常“java.lang.ArithmeticException: / by zero”，执行后面的输出语句。再之后执行finally里面的语句，输出“执行finally…..”。最后，执行finally外的语句，返回当出现异常前result的值。</p><h3 id="Java异常链"><a href="#Java异常链" class="headerlink" title="Java异常链"></a>Java异常链</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Java异常简介&quot;&gt;&lt;a href=&quot;#Java异常简介&quot; class=&quot;headerlink&quot; title=&quot;Java异常简介&quot;&gt;&lt;/a&gt;Java异常简介&lt;/h3&gt;&lt;p&gt;Throwable是万恶之源，它是所有异常的父类，它有两个儿子，大儿子叫Error,二儿子叫Exception。&lt;/p&gt;
&lt;p&gt;1、Error是系统错误，很少出现，是程序的终结者，我们一般不会期待它的出现。Error有两个儿子，分别是VirtualMachineError和ThreadDath。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://zh1n1an.github.io/categories/Java/"/>
    
      <category term="异常" scheme="https://zh1n1an.github.io/categories/Java/%E5%BC%82%E5%B8%B8/"/>
    
    
      <category term="Java" scheme="https://zh1n1an.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>整数划分</title>
    <link href="https://zh1n1an.github.io/2019/03/27/%E6%95%B4%E6%95%B0%E5%88%92%E5%88%86/"/>
    <id>https://zh1n1an.github.io/2019/03/27/整数划分/</id>
    <published>2019-03-27T14:56:13.000Z</published>
    <updated>2019-11-08T12:59:08.024Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>说明一下问题，什么是整数划分？<br>n=m1+m2+…+mi; （其中mi为正整数，并且1 &lt;= mi &lt;= n），则{m1,m2,…,mi}为n的一个划分。<br>如果{m1,m2,…,mi}中的最大值不超过m，即max(m1,m2,…,mi)&lt;=m，则称它属于n的一个m划分。这里我们记n的m划分的个数为f(n,m);<br>举个例子，当n=5时我们可以获得以下这几种划分（注意，例子中m&gt;=5）<br>5 = 5<br>   = 4 + 1<br>   = 3 + 2<br>   = 3 + 1 + 1<br>   = 2 + 2 + 1<br>   = 2 + 1 + 1 + 1<br>   = 1 + 1 + 1 + 1 + 1</p><h2 id="算法思路-amp-源代码"><a href="#算法思路-amp-源代码" class="headerlink" title="算法思路&amp;源代码"></a>算法思路&amp;源代码</h2><p>接下来是我最理解，最喜欢的一种解法：</p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by ZhiNian on 2019/3/27.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">题目：将一个整数划分为多个整数想加的形式，并输出有所划分方法。</span></span><br><span class="line"><span class="comment">例：6的划分：</span></span><br><span class="line"><span class="comment">6=5+1</span></span><br><span class="line"><span class="comment">6=4+2</span></span><br><span class="line"><span class="comment">6=4+1+1</span></span><br><span class="line"><span class="comment">6=3+3</span></span><br><span class="line"><span class="comment">6=3+2+1</span></span><br><span class="line"><span class="comment">6=3+1+1+1</span></span><br><span class="line"><span class="comment">6=2+2+2</span></span><br><span class="line"><span class="comment">6=2+2+1+1</span></span><br><span class="line"><span class="comment">6=2+1+1+1+1</span></span><br><span class="line"><span class="comment">6=1+1+1+1+1+1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> d[<span class="number">100</span>]; <span class="comment">//用来存放分解结果</span></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>; <span class="comment">//用来存放划分的次数</span></span><br><span class="line"><span class="keyword">int</span> N = <span class="number">0</span>; <span class="comment">//定义全局N为了记录下需要划分的值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123; <span class="comment">//m的n划分，k记录数组所处位置</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">0</span>) &#123; <span class="comment">//当m为0时，得到一个划分，将分解结果输出</span></span><br><span class="line">        ans++; <span class="comment">//得出一个划分即自增计数</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d=%d"</span>, N, d[<span class="number">0</span>]); <span class="comment">//输入格式为 N=第一个数 因为第一个数的前面不能是加号</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; k; i++) <span class="comment">//循环输出</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"+%d"</span>, d[i]); <span class="comment">//依次输出之后的数</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>); <span class="comment">//满足一组后换行</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = (m &lt; n ? m : n); i &gt; <span class="number">0</span>; i--) &#123; <span class="comment">//把最小值给i</span></span><br><span class="line">        d[k] = (i &lt; n ? i : n); <span class="comment">//把最小的值给d[k]存入数组然后再划分</span></span><br><span class="line">        divide(m - d[k], d[k], k + <span class="number">1</span>); <span class="comment">//递归调用使分解继续下去，直到得到一个划分</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n; <span class="comment">//声明接收的值</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n); <span class="comment">//接收需要划分的值</span></span><br><span class="line">    N = n; <span class="comment">//保留需要划分的值</span></span><br><span class="line">    divide(n, n, <span class="number">0</span>); <span class="comment">//传入划分</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The number of \"Divide the number :%d \" is %d.\n"</span>, n, ans); <span class="comment">//输出计数结果</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实不相瞒，浏览了很多算法，还有不理解的，接下来会摘抄在下面，以上的算法，也是通过看别人的，然后去理解优化，自己敲，小的太low，能想出来的，只能去输出，到底有多少个，但是，按要求输出就懒了，懒得再重打，去输出，倒是这一次优化这个代码，熟练使用了一下，二目运算符，以上逻辑应该很清晰了，基本上就是，比如一个6，首先，分解出6和剩下的0，0去划分，然后5和1，1去划分，然后4和2，2去划分，后一个数字继续递归下去划分。加油吧，多打几遍，多理解几遍，难一点的递归开始懵了。接下来是别的算法：</p><h2 id="算法一"><a href="#算法一" class="headerlink" title="算法一"></a>算法一</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mark[<span class="number">100</span>];<span class="comment">//记录分解情况</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//now记录数组当前长度，k记录递归深度， pre记录前一个的值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> k, <span class="keyword">int</span> pre)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"><span class="comment">//数组长度大于n就返回</span></span><br><span class="line">    <span class="keyword">if</span> (now &gt; n) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (now == n) &#123;<span class="comment">//输出一个情况</span></span><br><span class="line">        ans++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d="</span>, n);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; k - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d+"</span>, mark[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, mark[i]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//if (now &lt; n)</span></span><br><span class="line">        <span class="keyword">for</span> (i = pre; i &gt; <span class="number">0</span>; i--) &#123; <span class="comment">//从前一个数值一直到1</span></span><br><span class="line">            <span class="keyword">if</span> (i &lt;= pre) &#123;<span class="comment">//当i小于等于前一个数值时，就是从最大的划分开始一直找到1为止，此时now==n 即可输出</span></span><br><span class="line">                mark[k] = i;</span><br><span class="line">                now = now + i;</span><br><span class="line">                divide(now, k + <span class="number">1</span>, i);</span><br><span class="line">                now = now - i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    divide(<span class="number">0</span>, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个算法没有特别能看懂，准确的说还是懵逼，留着以后请教大佬给我讲讲……</p><h2 id="算法二"><a href="#算法二" class="headerlink" title="算法二"></a>算法二</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">equationCount</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span> || m == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n &lt; m)</span><br><span class="line">        <span class="keyword">return</span> equationCount(n, n);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n == m)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + equationCount(n, n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> equationCount(n, m - <span class="number">1</span>) + equationCount(n - m, m);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF &amp;&amp; (n &gt;= <span class="number">1</span> &amp;&amp; n &lt;= <span class="number">120</span>)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, equationCount(n, n));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个通过判断四种情况去递归算次数的方法，但是输出我开始懵了，但是其实呢好像，每一次划分结束记录下来去输出就好了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;说明一下问题，什么是整数划分？&lt;br&gt;n=m1+m2+…+mi; （其中mi为正整数，并且1 &amp;lt;= mi &amp;lt;= n），则{m1,m2,…,mi}为n的一个划分。&lt;br&gt;如果{m1,m2,…,mi}中的最大值不超过m，即max(m1,m2,…,mi)&amp;lt;=m，则称它属于n的一个m划分。这里我们记n的m划分的个数为f(n,m);&lt;br&gt;举个例子，当n=5时我们可以获得以下这几种划分（注意，例子中m&amp;gt;=5）&lt;br&gt;5 = 5&lt;br&gt;   = 4 + 1&lt;br&gt;   = 3 + 2&lt;br&gt;   = 3 + 1 + 1&lt;br&gt;   = 2 + 2 + 1&lt;br&gt;   = 2 + 1 + 1 + 1&lt;br&gt;   = 1 + 1 + 1 + 1 + 1&lt;/p&gt;
&lt;h2 id=&quot;算法思路-amp-源代码&quot;&gt;&lt;a href=&quot;#算法思路-amp-源代码&quot; class=&quot;headerlink&quot; title=&quot;算法思路&amp;amp;源代码&quot;&gt;&lt;/a&gt;算法思路&amp;amp;源代码&lt;/h2&gt;&lt;p&gt;接下来是我最理解，最喜欢的一种解法：&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://zh1n1an.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="C/C++" scheme="https://zh1n1an.github.io/categories/%E7%AE%97%E6%B3%95/C-C/"/>
    
    
      <category term="C/C++" scheme="https://zh1n1an.github.io/tags/C-C/"/>
    
      <category term="算法" scheme="https://zh1n1an.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥杯</title>
    <link href="https://zh1n1an.github.io/2019/03/25/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    <id>https://zh1n1an.github.io/2019/03/25/蓝桥杯/</id>
    <published>2019-03-25T15:13:45.000Z</published>
    <updated>2019-11-08T07:33:56.314Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>历年来的蓝桥杯所刷的题目。</p><a id="more"></a><h2 id="2013年蓝桥杯"><a href="#2013年蓝桥杯" class="headerlink" title="2013年蓝桥杯"></a>2013年蓝桥杯</h2><ul><li><h3 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h3></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by ZhiNian on 2019/3/25.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">题目标题: 高斯日记</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">大数学家高斯有个好习惯：无论如何都要记日记。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">他的日记有个与众不同的地方，他从不注明年月日，而是用一个整数代替，比如：4210</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">后来人们知道，那个整数就是日期，它表示那一天是高斯出生后的第几天。这或许也是个好习惯，它时时刻刻提醒着主人：日子又过去一天，还有多少时光可以用于浪费呢？</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">高斯出生于：1777年4月30日。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">在高斯发现的一个重要定理的日记上标注着：5343，因此可算出那天是：1791年12月15日。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">高斯获得博士学位的那天日记上标着：8113</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">请你算出高斯获得博士学位的年月日。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">提交答案的格式是：yyyy-mm-dd, 例如：1980-03-21</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">请严格按照格式，通过浏览器提交答案。</span></span><br><span class="line"><span class="comment">注意：只提交这个日期，不要写其它附加内容，比如：说明性的文字。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">答案是：1799-07-16</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">8113</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> year = <span class="number">1777</span>;</span><br><span class="line"><span class="keyword">int</span> mouth = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">int</span> day = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i) &#123;</span><br><span class="line">day++;</span><br><span class="line"><span class="keyword">if</span> (((year % <span class="number">4</span>) == <span class="number">0</span> &amp;&amp; (year % <span class="number">100</span> != <span class="number">0</span>)) || (year % <span class="number">400</span> == <span class="number">0</span>)) &#123;</span><br><span class="line"><span class="keyword">if</span> (day == <span class="number">30</span> &amp;&amp; mouth == <span class="number">2</span>) &#123;</span><br><span class="line"> day = <span class="number">1</span>;</span><br><span class="line">    mouth++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (day == <span class="number">31</span> &amp;&amp; (mouth == <span class="number">4</span> || mouth == <span class="number">6</span> || mouth == <span class="number">9</span> || mouth == <span class="number">11</span>) )&#123;<span class="comment">//当日期为30+1时 并且为2/4/6/9/11月时 加 1 月</span></span><br><span class="line">    day = <span class="number">1</span>;</span><br><span class="line">    mouth++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (day == <span class="number">32</span> &amp;&amp; (mouth == <span class="number">1</span> || mouth == <span class="number">3</span> || mouth == <span class="number">5</span> || mouth == <span class="number">7</span> || mouth == <span class="number">8</span> || mouth == <span class="number">10</span>)) &#123;</span><br><span class="line">    day = <span class="number">1</span>;</span><br><span class="line">    mouth++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (day == <span class="number">32</span> &amp;&amp; mouth == <span class="number">12</span>) &#123;</span><br><span class="line">    year++;</span><br><span class="line">    day = <span class="number">1</span>;</span><br><span class="line">    mouth = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (day == <span class="number">29</span> &amp;&amp; mouth == <span class="number">2</span>) &#123;</span><br><span class="line"> day = <span class="number">1</span>;</span><br><span class="line">    mouth++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (day == <span class="number">31</span> &amp;&amp; (mouth == <span class="number">4</span> || mouth == <span class="number">6</span> || mouth == <span class="number">9</span> || mouth == <span class="number">11</span>) )&#123;<span class="comment">//当日期为30+1时 并且为2/4/6/9/11月时 加 1 月</span></span><br><span class="line">    day = <span class="number">1</span>;</span><br><span class="line">    mouth++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (day == <span class="number">32</span> &amp;&amp; (mouth == <span class="number">1</span> || mouth == <span class="number">3</span> || mouth == <span class="number">5</span> || mouth == <span class="number">7</span> || mouth == <span class="number">8</span> || mouth == <span class="number">10</span>)) &#123;</span><br><span class="line">    day = <span class="number">1</span>;</span><br><span class="line">    mouth++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (day == <span class="number">32</span> &amp;&amp; mouth == <span class="number">12</span>) &#123;</span><br><span class="line">    year++;</span><br><span class="line">    day = <span class="number">1</span>;</span><br><span class="line">    mouth = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; year &lt;&lt; <span class="string">" "</span> &lt;&lt; mouth &lt;&lt; <span class="string">" "</span> &lt;&lt; day &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>此题还是很简单的，记住闰年判断条件就好，然后用5343去验证程序，再进行8113的结果运算。</p><ul><li><h3 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h3></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by ZhiNian on 2019/3/25.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">题目标题: 排它平方数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    小明正看着 203879 这个数字发呆。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    原来，203879 * 203879 = 41566646641</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    这有什么神奇呢？仔细观察，203879 是个6位数，并且它的每个数位上的数字都是不同的，并且它平方后的所有数位上都不出现组成它自身的数字。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    具有这样特点的6位数还有一个，请你找出它！</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    再归纳一下筛选要求：</span></span><br><span class="line"><span class="comment">    1. 6位正整数</span></span><br><span class="line"><span class="comment">    2. 每个数位上的数字不同</span></span><br><span class="line"><span class="comment">    3. 其平方数的每个数位不含原数字的任何组成数位</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">答案是一个6位的正整数。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">请通过浏览器提交答案。</span></span><br><span class="line"><span class="comment">注意：只提交另一6位数，题中已经给出的这个不要提交。</span></span><br><span class="line"><span class="comment">注意：不要书写其它的内容（比如：说明性的文字）。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">答案是：639172</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">int2string</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> a)</span> </span>&#123;<span class="comment">//int型转string</span></span><br><span class="line">    <span class="built_in">stringstream</span> ss;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    ss &lt;&lt; a;</span><br><span class="line">    ss &gt;&gt; str;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//int string2int(string str) &#123;//string型转int</span></span><br><span class="line"><span class="comment">//    stringstream ss;</span></span><br><span class="line"><span class="comment">//    int a;</span></span><br><span class="line"><span class="comment">//    ss &lt;&lt; str;</span></span><br><span class="line"><span class="comment">//    ss &gt;&gt; a;</span></span><br><span class="line"><span class="comment">//    return a;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check1</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str = int2string(s);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; <span class="number">6</span>; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str[i] == str[j])</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//找到相同的</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check2</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str1 = int2string(s);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> x = s * s;</span><br><span class="line">    <span class="built_in">string</span> str2 = int2string(x);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str2.<span class="built_in">find</span>(str1[i]) != <span class="built_in">string</span>::npos)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//找到了相同的</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> num = <span class="number">203879</span>;</span><br><span class="line">    <span class="keyword">for</span> (; num &lt; <span class="number">1000000</span>; ++num) &#123;</span><br><span class="line">        <span class="keyword">if</span> (check1(num))<span class="comment">//出现重复就跳出</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (check2(num))<span class="comment">//出现重现数字就跳出</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">/*    int a = 123456;</span></span><br><span class="line"><span class="comment">    int b;</span></span><br><span class="line"><span class="comment">    string str;</span></span><br><span class="line"><span class="comment">    str = int2string(a);</span></span><br><span class="line"><span class="comment">    b = string2int(str);</span></span><br><span class="line"><span class="comment">    cout &lt;&lt; str[3] &lt;&lt; a + b &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">//测试int2string和string2int能否使用的函数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一题不难，但是需要积累一些C++知识，比如当<code>find</code>函数找不到时会返回一个<code>string::npos</code>,并且用<code>stringstream</code>去转换<code>int</code>型和<code>string</code>型的函数，这些需要好好地记下来，很多地方都可以用！</p><ul><li><h3 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h3></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by ZhiNian on 2019/3/26.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">标题: 振兴中华</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    小明参加了学校的趣味运动会，其中的一个项目是：跳格子。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    地上画着一些格子，每个格子里写一个字，如下所示：（也可参见p1.jpg）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">从我做起振</span></span><br><span class="line"><span class="comment">我做起振兴</span></span><br><span class="line"><span class="comment">做起振兴中</span></span><br><span class="line"><span class="comment">起振兴中华</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    比赛时，先站在左上角的写着“从”字的格子里，可以横向或纵向跳到相邻的格子里，但不能跳到对角的格子或其它位置。一直要跳到“华”字结束。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    要求跳过的路线刚好构成“从我做起振兴中华”这句话。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    请你帮助小明算一算他一共有多少种可能的跳跃路线呢？</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">答案是一个整数，请通过浏览器直接提交该数字。</span></span><br><span class="line"><span class="comment">注意：不要提交解答过程，或其它辅助说明类的内容。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">答案是</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 每一个字都有要么向下 要么向右 两个可能</span></span><br><span class="line"><span class="comment"> * 可以用递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">5</span> || y == <span class="number">4</span>) &#123;</span><br><span class="line">        ans++; <span class="comment">//通过全局函数计数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//通过函数返回计数</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fun(x + <span class="number">1</span>, y) + fun(x, y + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"From fun'return:"</span> &lt;&lt; fun(<span class="number">1</span>, <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"From int ans:"</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单递归，没花多少时间，就不去说什么了，注释都很清楚，但是今天做了一个难的递归，整数划分，见我的另一篇博客。</p><ul><li><h3 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h3></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by ZhiNian on 2019/3/28.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 标题: 颠倒的价牌</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 小李的店里专卖其它店中下架的样品电视机，可称为：样品电视专卖店。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 其标价都是4位数字（即千元不等）。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 小李为了标价清晰、方便，使用了预制的类似数码管的标价签，只要用颜色笔涂数字就可以了（参见p1.jpg）。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 这种价牌有个特点，对一些数字，倒过来看也是合理的数字。如：1 2 5 6 8 9 0 都可以。这样一来，如果牌子挂倒了，有可能完全变成了另一个价格，</span></span><br><span class="line"><span class="comment"> 比如：1958 倒着挂就是：8561，差了几千元啊!!</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 当然，多数情况不能倒读，比如，1110 就不能倒过来，因为0不能作为开始数字。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 有一天，悲剧终于发生了。某个店员不小心把店里的某两个价格牌给挂倒了。并且这两个价格牌的电视机都卖出去了!</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 庆幸的是价格出入不大，其中一个价牌赔了2百多，另一个价牌却赚了8百多，综合起来，反而多赚了558元。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 请根据这些信息计算：赔钱的那个价牌正确的价格应该是多少？</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 答案是一个4位的整数，请通过浏览器直接提交该数字。</span></span><br><span class="line"><span class="comment"> 注意：不要提交解答过程，或其它辅助说明类的内容。</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 答案是：</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">i2s</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="comment">//int to string 不解释</span></span><br><span class="line">    <span class="built_in">stringstream</span> ss;</span><br><span class="line">    <span class="built_in">string</span> y;</span><br><span class="line">    ss &lt;&lt; x;</span><br><span class="line">    ss &gt;&gt; y;</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">s2i</span><span class="params">(<span class="built_in">string</span> x)</span> </span>&#123; <span class="comment">//string to int 不解释</span></span><br><span class="line">    <span class="built_in">stringstream</span> ss;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">    ss &lt;&lt; x;</span><br><span class="line">    ss &gt;&gt; y;</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">change</span><span class="params">(<span class="keyword">char</span> x)</span> </span>&#123; <span class="comment">//因为1、2、5、8、0翻转后是本身，所以只需要判断6和9，去翻转。</span></span><br><span class="line">    <span class="keyword">if</span> (x == <span class="string">'6'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'9'</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x == <span class="string">'9'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'6'</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">reversal</span><span class="params">(<span class="built_in">string</span> str1)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str2 = str1;<span class="comment">//记住string一定一定一定要初始化，否则默认长度为0，没法存入数据！</span></span><br><span class="line"><span class="comment">//    cout &lt;&lt; "Test is " &lt;&lt; str2.length() &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//以上两行就是刚刚出现的错误，没有用str2=str1去初始化，导致了，后面的赋值无法赋值进去，因为str2长度直接就是为0（可以解开上面注释测试）</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>, j = <span class="number">0</span>; i &gt;= <span class="number">0</span>; --i, ++j) &#123;<span class="comment">//循环返回每一个字符进行翻转</span></span><br><span class="line"><span class="comment">//        char x;</span></span><br><span class="line"><span class="comment">//        x=change(str1[i]);</span></span><br><span class="line"><span class="comment">//上两行原来也是测试</span></span><br><span class="line">        str2[j] = change(str1[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">price</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> origin;<span class="comment">//记录原始价牌</span></span><br><span class="line">    <span class="keyword">int</span> after;<span class="comment">//记录翻转后的价牌</span></span><br><span class="line">    <span class="keyword">int</span> temp;<span class="comment">//记录翻转后的价牌减去翻转前的价牌的差</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;price&gt; earn;<span class="comment">//记录赚了的价牌</span></span><br><span class="line"><span class="built_in">vector</span>&lt;price&gt; lose;<span class="comment">//记录亏了的价牌</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//遍历所有的四位数</span></span><br><span class="line">    <span class="comment">//判断能否倒过来</span></span><br><span class="line">    <span class="comment">//把能倒过来的做减法</span></span><br><span class="line"><span class="comment">//    cout &lt;&lt; reversal("1958") &lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1000</span>; i &lt; <span class="number">10000</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">string</span> str1, str2;<span class="comment">//str1存原来的四位数，str2存翻转后的四位数</span></span><br><span class="line">        <span class="keyword">int</span> s1, s2;<span class="comment">//s1是原来四位数，s2是翻转后的四位数</span></span><br><span class="line">        str1 = i2s(i);<span class="comment">//int to string</span></span><br><span class="line">        <span class="keyword">if</span> (str1.<span class="built_in">find</span>(<span class="string">'3'</span>) != <span class="built_in">string</span>::npos || str1.<span class="built_in">find</span>(<span class="string">'4'</span>) != <span class="built_in">string</span>::npos || str1.<span class="built_in">find</span>(<span class="string">'7'</span>) != <span class="built_in">string</span>::npos ||</span><br><span class="line">            str1.<span class="built_in">find</span>(<span class="string">'0'</span>) == <span class="number">3</span>)<span class="comment">//发现了3、4、7、0在末尾的情况，那么不要此次的i继续循环</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        str2 = reversal(str1);<span class="comment">//翻转字符</span></span><br><span class="line">        s1 = s2i(str1);<span class="comment">//翻转前的数 string to int 可以直接赋值i 但是这么好看 hiahia~</span></span><br><span class="line">        s2 = s2i(str2);<span class="comment">//翻转后的数 string to int</span></span><br><span class="line">        <span class="keyword">int</span> temp = s2 - s1;<span class="comment">//差值</span></span><br><span class="line">        <span class="keyword">if</span> (temp &lt; <span class="number">-200</span> &amp;&amp; temp &gt; <span class="number">-300</span>) &#123;<span class="comment">//亏了200多</span></span><br><span class="line">            price p = &#123;s1, s2, temp&#125;;<span class="comment">//记录进一个缓存p</span></span><br><span class="line">            lose.push_back(p);<span class="comment">//p加到lose的后面</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (temp &gt; <span class="number">800</span> &amp;&amp; temp &lt; <span class="number">900</span>) &#123;<span class="comment">//赚了800多</span></span><br><span class="line">            price p = &#123;s1, s2, temp&#125;;<span class="comment">//记录进一个缓存p</span></span><br><span class="line">            earn.push_back(p);<span class="comment">//p加到earn的后面</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; earn.<span class="built_in">size</span>(); ++j) &#123;<span class="comment">//双重循环找差值相加为840的输出</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; lose.<span class="built_in">size</span>(); ++k) &#123;</span><br><span class="line">            <span class="keyword">if</span> (earn[j].temp + lose[k].temp == <span class="number">558</span>) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; lose[k].origin &lt;&lt; <span class="string">" "</span> &lt;&lt; lose[k].after &lt;&lt; <span class="string">" "</span> &lt;&lt; lose[k].temp &lt;&lt; <span class="string">","</span>;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; earn[j].origin &lt;&lt; <span class="string">" "</span> &lt;&lt; earn[j].after &lt;&lt; <span class="string">" "</span> &lt;&lt; earn[j].temp &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作为一个积极写注释的人，好像不需要什么过多的语言描述算法了，这个题目让我学会了一点点vector的用法还有stirng.find(char x)和string::npos的返回值，总得来说还是思路清晰很顺利，就是编程是个问题，慢慢积累吧，加油！</p><ul><li><h3 id="第五题"><a href="#第五题" class="headerlink" title="第五题"></a>第五题</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by ZhiNian on 2019/7/16.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 题目标题：前缀判断</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 如下的代码判断 needle_start指向的串是否为haystack_start指向的串的前缀，如不是，则返回NULL。</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 比如："abcd1234" 就包含了 "abc" 为前缀</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> char* prefix(char* haystack_start, char* needle_start)</span></span><br><span class="line"><span class="comment"> &#123;</span></span><br><span class="line"><span class="comment"> char* haystack = haystack_start;</span></span><br><span class="line"><span class="comment"> char* needle = needle_start;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> while(*haystack &amp;&amp; *needle)&#123;</span></span><br><span class="line"><span class="comment"> if(______________________________) return NULL;  //填空位置</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> if(*needle) return NULL;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> return haystack_start;</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 请分析代码逻辑，并推测划线处的代码，通过网页提交。</span></span><br><span class="line"><span class="comment"> 注意：仅把缺少的代码作为答案，千万不要填写多余的代码、符号或说明文字！！</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param haystack_start 母串</span></span><br><span class="line"><span class="comment"> * @param needle_start 前缀</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">prefix</span><span class="params">(<span class="keyword">char</span> *haystack_start, <span class="keyword">char</span> *needle_start)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *haystack = haystack_start;</span><br><span class="line">    <span class="keyword">char</span> *needle = needle_start;<span class="comment">//前缀</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (*haystack &amp;&amp; *needle) &#123;<span class="comment">//两个指针都没有越界</span></span><br><span class="line"><span class="comment">//        if(______________________________) return NULL;  //填空位置</span></span><br><span class="line"><span class="comment">//移动指针</span></span><br><span class="line"><span class="comment">//并判断</span></span><br><span class="line">        <span class="keyword">if</span> (*(haystack++) != *(needle++))<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (*needle) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> haystack_start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; prefix(<span class="string">"abcd123"</span>, <span class="string">"abd"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>这一题，我刚刚开始最不能理解的，就是这一行代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">while (*haystack &amp;&amp; *needle)</span><br></pre></td></tr></table></figure><p>但是后面知道了，这代表的就是两个指针都没有越界的时候，就是指向的都还是字符串的时候，那么就进行循环，这是一个前缀判断，如果跳出这个循环，说明字串已经循环完毕，然后如果发现字串没循环完毕，而母串循环完毕了，就直接输出null，说明了在循环内是要判断，字串和母串是否依次相同，如果不同就跳出return null，所以，在空里需要满足的功能是，依次往下搜寻，并且进行判断是否不同，所以可以把++放后面，这样进行的就是，先用了再递归，然后这一题就迎刃而解了。</p><p>对于代码填空题，有一个很好的方法，就是首先把代码复制进编译器，把所需要填的空首先先注释掉，看看编译能否通过，如果编译都没有通过，就可以通过编译未通过的提示进行填写。</p><ul><li><h3 id="第六题"><a href="#第六题" class="headerlink" title="第六题"></a>第六题</h3></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by ZhiNian on 2019/7/16.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 标题：逆波兰表达式</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 正常的表达式称为中缀表达式，运算符在中间，主要是给人阅读的，机器求解并不方便。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 例如：3 + 5 * (2 + 6) - 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 而且，常常需要用括号来改变运算次序。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 相反，如果使用逆波兰表达式（前缀表达式）表示，上面的算式则表示为：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> - + 3 * 5 + 2 6 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 不再需要括号，机器可以用递归的方法很方便地求解。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 为了简便，我们假设：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 1. 只有 + - * 三种运算符</span></span><br><span class="line"><span class="comment"> 2. 每个运算数都是一个小于10的非负整数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 下面的程序对一个逆波兰表示串进行求值。</span></span><br><span class="line"><span class="comment"> 其返回值为一个结构：其中第一元素表示求值结果，第二个元素表示它已解析的字符数。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> struct EV</span></span><br><span class="line"><span class="comment"> &#123;</span></span><br><span class="line"><span class="comment"> int result;  //计算结果</span></span><br><span class="line"><span class="comment"> int n;       //消耗掉的字符数</span></span><br><span class="line"><span class="comment"> &#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> struct EV evaluate(char* x)</span></span><br><span class="line"><span class="comment"> &#123;</span></span><br><span class="line"><span class="comment"> struct EV ev = &#123;0,0&#125;;</span></span><br><span class="line"><span class="comment"> struct EV v1;</span></span><br><span class="line"><span class="comment"> struct EV v2;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> if(*x==0) return ev;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> if(x[0]&gt;='0' &amp;&amp; x[0]&lt;='9')&#123;</span></span><br><span class="line"><span class="comment"> ev.result = x[0]-'0';</span></span><br><span class="line"><span class="comment"> ev.n = 1;</span></span><br><span class="line"><span class="comment"> return ev;</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> v1 = evaluate(x+1);</span></span><br><span class="line"><span class="comment"> v2 = _____________________________;  //填空位置</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> if(x[0]=='+') ev.result = v1.result + v2.result;</span></span><br><span class="line"><span class="comment"> if(x[0]=='*') ev.result = v1.result * v2.result;</span></span><br><span class="line"><span class="comment"> if(x[0]=='-') ev.result = v1.result - v2.result;</span></span><br><span class="line"><span class="comment"> ev.n = 1+v1.n+v2.n;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> return ev;</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 请分析代码逻辑，并推测划线处的代码，通过网页提交。</span></span><br><span class="line"><span class="comment"> 注意：仅把缺少的代码作为答案，千万不要填写多余的代码、符号或说明文字！！</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EV</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> result;  <span class="comment">//计算结果</span></span><br><span class="line">    <span class="keyword">int</span> n;       <span class="comment">//消耗掉的字符数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">struct EV <span class="title">evaluate</span><span class="params">(<span class="keyword">char</span> *x)</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">EV</span> <span class="title">ev</span> = &#123;</span><span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">EV</span> <span class="title">v1</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">EV</span> <span class="title">v2</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (*x == <span class="number">0</span>) <span class="keyword">return</span> ev;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (x[<span class="number">0</span>] &gt;= <span class="string">'0'</span> &amp;&amp; x[<span class="number">0</span>] &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">        ev.result = x[<span class="number">0</span>] - <span class="string">'0'</span>;<span class="comment">//字符转数字'1'-'0'=1</span></span><br><span class="line">        ev.n = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> ev;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//- + 3 * 5 + 2 6 1</span></span><br><span class="line">    v1 = evaluate(x + <span class="number">1</span>);</span><br><span class="line">    v2 = evaluate(x + <span class="number">1</span> + v1.n);  <span class="comment">//填空位置</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (x[<span class="number">0</span>] == <span class="string">'+'</span>) ev.result = v1.result + v2.result;</span><br><span class="line">    <span class="keyword">if</span> (x[<span class="number">0</span>] == <span class="string">'*'</span>) ev.result = v1.result * v2.result;</span><br><span class="line">    <span class="keyword">if</span> (x[<span class="number">0</span>] == <span class="string">'-'</span>) ev.result = v1.result - v2.result;</span><br><span class="line">    ev.n = <span class="number">1</span> + v1.n + v2.n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ev;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s=<span class="string">"-+3*5+261"</span>;</span><br><span class="line">    <span class="keyword">const</span> EV &amp;ev = evaluate((<span class="keyword">char</span>*)(s.c_str()));</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ev.result&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这一题中，通过调试，通过编译，也没有找到到底是如何填这个空，到最后还是通过一点点的肉眼观察去尝试，然后发现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (x[<span class="number">0</span>] == <span class="string">'+'</span>) ev.result = v1.result + v2.result;</span><br><span class="line"><span class="keyword">if</span> (x[<span class="number">0</span>] == <span class="string">'*'</span>) ev.result = v1.result * v2.result;</span><br><span class="line"><span class="keyword">if</span> (x[<span class="number">0</span>] == <span class="string">'-'</span>) ev.result = v1.result - v2.result;</span><br></pre></td></tr></table></figure><p>这一串代码就是说将v1和v2运算，所以我猜测，填的空是</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evaluate(x + <span class="number">1</span> + <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>但是还有一个技巧就是，程序不会白白去留下别的不用的数字，就像物理考试，不可能多给你一个物理量，肯定都是有用的，所以答案应该是</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evaluate(x + <span class="number">1</span> + v1.n);</span><br></pre></td></tr></table></figure><p>然后理解起来就是，前一个v1吃掉了前一部分的值，然后v2当然要吃掉剩下的值，然后将两个值进行运算得到最终的结果。</p><h3 id="第七题"><a href="#第七题" class="headerlink" title="第七题"></a>第七题</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by ZhiNian on 2019/7/16.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 标题：错误票据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 某涉密单位下发了某种票据，并要在年终全部收回。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 每张票据有唯一的ID号。全年所有票据的ID号是连续的，但ID的开始数码是随机选定的。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 因为工作人员疏忽，在录入ID号的时候发生了一处错误，造成了某个ID断号，另外一个ID重号。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 你的任务是通过编程，找出断号的ID和重号的ID。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 假设断号不可能发生在最大和最小号。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 要求程序首先输入一个整数N(N&lt;100)表示后面数据行数。</span></span><br><span class="line"><span class="comment"> 接着读入N行数据。</span></span><br><span class="line"><span class="comment"> 每行数据长度不等，是用空格分开的若干个（不大于100个）正整数（不大于100000）</span></span><br><span class="line"><span class="comment"> 每个整数代表一个ID号。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 要求程序输出1行，含两个整数m n，用空格分隔。</span></span><br><span class="line"><span class="comment"> 其中，m表示断号ID，n表示重号ID</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 例如：</span></span><br><span class="line"><span class="comment"> 用户输入：</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">5 6 8 11 9</span></span><br><span class="line"><span class="comment">10 12 9</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 则程序输出：</span></span><br><span class="line"><span class="comment"> 7 9</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 再例如：</span></span><br><span class="line"><span class="comment"> 用户输入：</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">164 178 108 109 180 155 141 159 104 182 179 118 137 184 115 124 125 129 168 196</span></span><br><span class="line"><span class="comment">172 189 127 107 112 192 103 131 133 169 158</span></span><br><span class="line"><span class="comment">128 102 110 148 139 157 140 195 197</span></span><br><span class="line"><span class="comment">185 152 135 106 123 173 122 136 174 191 145 116 151 143 175 120 161 134 162 190</span></span><br><span class="line"><span class="comment">149 138 142 146 199 126 165 156 153 193 144 166 170 121 171 132 101 194 187 188</span></span><br><span class="line"><span class="comment">113 130 176 154 177 120 117 150 114 183 186 181 100 163 160 167 147 198 111 119</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 则程序输出：</span></span><br><span class="line"><span class="comment"> 105 120</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 资源约定：</span></span><br><span class="line"><span class="comment"> 峰值内存消耗 &lt; 64M</span></span><br><span class="line"><span class="comment"> CPU消耗  &lt; 1000ms</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 请严格按要求输出，不要画蛇添足地打印类似：“请您输入...” 的多余内容。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 注意: main函数需要返回0</span></span><br><span class="line"><span class="comment"> 注意: 只使用ANSI C/ANSI C++ 标准，不要调用依赖于编译环境或操作系统的特殊函数。</span></span><br><span class="line"><span class="comment"> 注意: 所有依赖的函数必须明确地在源文件中 #include &lt;xxx&gt;，</span></span><br><span class="line"><span class="comment"> 不能通过工程设置而省略常用头文件。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 提交时，注意选择所期望的编译器类型。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*原始数据连续，输入的时候是乱序的，求出断开的号码和重复的号码*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN = <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">line</span>;</span><br><span class="line"><span class="keyword">int</span> data[MaxN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">s2i</span><span class="params">(<span class="built_in">string</span> &amp;str, <span class="keyword">int</span> &amp;num)</span> </span>&#123;<span class="comment">//字符串转数字</span></span><br><span class="line">    <span class="built_in">stringstream</span> ss;</span><br><span class="line">    ss &lt;&lt; str;</span><br><span class="line">    ss &gt;&gt; num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;<span class="built_in">line</span>);</span><br><span class="line">    getchar();<span class="comment">//一定要记住输入后立马回车再输入别的数据要通过getchar把换行符吃掉,如果不加 那么接收到的第一行数据就是一个换行符</span></span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">line</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">string</span> s;<span class="comment">//定义字符串s</span></span><br><span class="line">        getline(<span class="built_in">cin</span>, s);<span class="comment">//将控制台标准输入流，输入s</span></span><br><span class="line">        <span class="function"><span class="built_in">istringstream</span> <span class="title">iss</span><span class="params">(s)</span></span>;<span class="comment">//将s封装成iss（istringstream）</span></span><br><span class="line">        <span class="built_in">string</span> tmp;<span class="comment">//再顶一个字符串tmp</span></span><br><span class="line">        <span class="keyword">while</span> (getline(iss, tmp, <span class="string">' '</span>)) &#123;<span class="comment">//getline自带了分割方法，但是需要注意的是 输入流必须是iss</span></span><br><span class="line">            s2i(tmp, data[index++]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    最终index就是数据的个数</span></span><br><span class="line"><span class="comment">//    cout &lt;&lt; index &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">    sort(data, data + index);<span class="comment">//排序</span></span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; index; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (data[i] == data[i - <span class="number">1</span>] + <span class="number">2</span>)a = data[i] - <span class="number">1</span>;<span class="comment">//printf("%d ", data[i] - 1);</span></span><br><span class="line">        <span class="keyword">if</span> (data[i] == data[i - <span class="number">1</span>]) b = data[i];<span class="comment">//printf("%d", data[i]);</span></span><br><span class="line">        <span class="comment">//不能直接输出，坑就在这，万一是先找到了重复的 那么就先输出重复的了 所以要在最后整理格式输出</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d"</span>, a, b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一道题，难点在于，怎么样拆分输入的数据，这个很重要，学会了用while(getline())进行拆分，学会了怎么样字符串转数字的简单函数，怎么样通过sort函数排序。主要是这三点吧。否则换别的方法，拆分就很难了，排序还得自己写，转数字肯定就也是自己写的一个很复杂的函数，时间也浪费了很多。</p><h3 id="第八题"><a href="#第八题" class="headerlink" title="第八题"></a>第八题</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by ZhiNian on 2019/7/16.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 标题：买不到的数目</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 小明开了一家糖果店。他别出心裁：把水果糖包成4颗一包和7颗一包的两种。糖果不能拆包卖。</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 小朋友来买糖的时候，他就用这两种包装来组合。当然有些糖果数目是无法组合出来的，比如要买 10 颗糖。</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 你可以用计算机测试一下，在这种包装情况下，最大不能买到的数量是17。大于17的任何数字都可以用4和7组合出来。</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 本题的要求就是在已知两个包装的数量时，求最大不能组合出的数字。</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 输入：</span></span><br><span class="line"><span class="comment"> 两个正整数，表示每种包装中糖的颗数(都不多于1000)</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 要求输出：</span></span><br><span class="line"><span class="comment"> 一个正整数，表示最大不能买到的糖数</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 不需要考虑无解的情况</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 例如：</span></span><br><span class="line"><span class="comment"> 用户输入：</span></span><br><span class="line"><span class="comment"> 4 7</span></span><br><span class="line"><span class="comment"> 程序应该输出：</span></span><br><span class="line"><span class="comment"> 17</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 再例如：</span></span><br><span class="line"><span class="comment"> 用户输入：</span></span><br><span class="line"><span class="comment"> 3 5</span></span><br><span class="line"><span class="comment"> 程序应该输出：</span></span><br><span class="line"><span class="comment"> 7</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 资源约定：</span></span><br><span class="line"><span class="comment"> 峰值内存消耗 &lt; 64M</span></span><br><span class="line"><span class="comment"> CPU消耗  &lt; 3000ms</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 请严格按要求输出，不要画蛇添足地打印类似：“请您输入...” 的多余内容。</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 注意: main函数需要返回0</span></span><br><span class="line"><span class="comment"> 注意: 只使用ANSI C/ANSI C++ 标准，不要调用依赖于编译环境或操作系统的特殊函数。</span></span><br><span class="line"><span class="comment"> 注意: 所有依赖的函数必须明确地在源文件中 #include &lt;xxx&gt;， 不能通过工程设置而省略常用头文件。</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 提交时，注意选择所期望的编译器类型。</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ax+by=C,不定方程的解 a=4,b=7,C=17 这种情况下，xy实际上有解，7*2+（7-4）==3*7 -1*4</span></span><br><span class="line"><span class="comment">//a,b互质，一定有解且解的数目无穷</span></span><br><span class="line"><span class="comment">//C是gcd(a,b)的倍数，方程一定有解，而且有无穷多解</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//条件：一定有解=》a,b互质</span></span><br><span class="line"><span class="comment">//条件2：xy都是大于等于0的整数，在这个限定条件下有的C是无解的，那么C的上界是多少呢？至多是a*b</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;a, &amp;b);</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; ss;</span><br><span class="line"><span class="comment">//    枚举a*x+b*y的值，上边界是a*b</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; a * x &lt;= a * b; ++x) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; a * x + b * y &lt;= a * b; ++y) &#123;</span><br><span class="line">            ss.insert(ss.<span class="built_in">end</span>(), a * x + b * y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = a * b; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ss.<span class="built_in">find</span>(i) == ss.<span class="built_in">end</span>())<span class="comment">//i不在set中，那么i就是答案</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一题不难，就是用的是枚举的思想，然后反向扫描找到最大的那一个，但是在老师的教导中，又学会了一个知识点，就是set的运用，set就像是一个集合，它中的元素不允许重复，可以使用set去存入有些可能重复但是重复却没有用的数据从而提高效率。</p><p>当然这个题目还有另一种解法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;a, &amp;b);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a * b - a - b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是这么的简单，但是这就是数学基础的问题了，需要熟悉不定方程。</p><h2 id="2014年蓝桥杯"><a href="#2014年蓝桥杯" class="headerlink" title="2014年蓝桥杯"></a>2014年蓝桥杯</h2><ul><li><h3 id="第一题-1"><a href="#第一题-1" class="headerlink" title="第一题"></a>第一题</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by ZhiNian on 2019/3/31.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">标题：猜年龄</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    小明带两个妹妹参加元宵灯会。别人问她们多大了，她们调皮地说：“我们俩的年龄之积是年龄之和的6倍”。</span></span><br><span class="line"><span class="comment">    小明又补充说：“她们可不是双胞胎，年龄差肯定也不超过8岁啊。”</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    请你写出：小明的较小的妹妹的年龄。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意： 只写一个人的年龄数字，请通过浏览器提交答案。不要书写任何多余的内容。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">100</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">100</span>; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((i * j) == (<span class="number">6</span> * (i + j)) &amp;&amp; (<span class="built_in">abs</span>(i - j) &lt;= <span class="number">8</span>) &amp;&amp; (i != j))</span><br><span class="line">                <span class="comment">/* 1：(i * j) == (6 * (i + j))：我们俩的年龄之积是年龄之和的6倍</span></span><br><span class="line"><span class="comment">                 * 2：abs(i - j) &lt;= 8： 年龄差肯定也不超过8岁啊</span></span><br><span class="line"><span class="comment">                 * 3：(i != j)：她们可不是双胞胎</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span> &lt;&lt; j &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析注释有了，很简单。</p></li><li><h3 id="第二题-1"><a href="#第二题-1" class="headerlink" title="第二题"></a>第二题</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by ZhiNian on 2019/3/31.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">标题：切面条</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    一根高筋拉面，中间切一刀，可以得到2根面条。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    如果先对折1次，中间切一刀，可以得到3根面条。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    如果连续对折2次，中间切一刀，可以得到5根面条。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    那么，连续对折10次，中间切一刀，会得到多少面条呢？</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">答案是个整数，请通过浏览器提交答案。不要填写任何多余的内容。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 通过撕纸条发现，对折3次是 9根</span></span><br><span class="line"><span class="comment"> * 找规律很明显可知是 2^n+1</span></span><br><span class="line"><span class="comment"> * 所以10次是 2^10+1=2015</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 还可以这么想：</span></span><br><span class="line"><span class="comment"> * 不对折，切一刀就是一刀</span></span><br><span class="line"><span class="comment"> * 对折切一刀，就是切两刀</span></span><br><span class="line"><span class="comment"> * 再对折去切一刀，等于再之前的基础上砍得两倍的刀</span></span><br><span class="line"><span class="comment"> * 就比如上一次砍n刀，对折后砍n刀等于砍了2n刀</span></span><br><span class="line"><span class="comment"> * 而一根面条砍n刀就会产生n+1条面条</span></span><br><span class="line"><span class="comment"> * 对折10次砍一刀相当于不对折 砍2^10刀 = 砍1024刀 相当于 产生了 1025根面条</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>好像没什么可以说的。</p></li><li><h3 id="第三题-1"><a href="#第三题-1" class="headerlink" title="第三题"></a>第三题</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by ZhiNian on 2019/3/31.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">标题：神奇算式</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    由4个不同的数字，组成的一个乘法算式，它们的乘积仍然由这4个数字组成。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    比如：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">210 x 6 = 1260</span></span><br><span class="line"><span class="comment">8 x 473 = 3784</span></span><br><span class="line"><span class="comment">27 x 81 = 2187</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    都符合要求。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    如果满足乘法交换律的算式算作同一种情况，那么，包含上边已列出的3种情况，一共有多少种满足要求的算式。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    请填写该数字，通过浏览器提交答案，不要填写多余内容（例如：列出所有算式）。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ansans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check1</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> ans)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">stringstream</span> ss1, ss2;</span><br><span class="line">    <span class="built_in">string</span> snum;</span><br><span class="line">    <span class="built_in">string</span> sans;</span><br><span class="line">    ss1 &lt;&lt; num;</span><br><span class="line">    ss1 &gt;&gt; snum;</span><br><span class="line">    ss2 &lt;&lt; ans;</span><br><span class="line">    ss2 &gt;&gt; sans;<span class="comment">//将结果和数字全部转换成字符串形式并进行判断</span></span><br><span class="line">    <span class="keyword">if</span> (sans.length() != <span class="number">4</span>)<span class="comment">//防止长度仅为3就进行下一步的判断</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sans.<span class="built_in">find</span>(snum[i]) == <span class="built_in">string</span>::npos)<span class="comment">//没有找到相同的字符</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check2</span><span class="params">(<span class="keyword">int</span> src, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="comment">//    先转字符串，排序，比较</span></span><br><span class="line">    <span class="built_in">string</span> src_str, r_str;</span><br><span class="line">    <span class="built_in">stringstream</span> ss;</span><br><span class="line">    ss &lt;&lt; src;</span><br><span class="line">    ss &gt;&gt; src_str;</span><br><span class="line">    <span class="built_in">stringstream</span> ss1;</span><br><span class="line">    ss1 &lt;&lt; r;</span><br><span class="line">    ss1 &gt;&gt; r_str;</span><br><span class="line">    sort(r_str.<span class="built_in">begin</span>(), r_str.<span class="built_in">end</span>());</span><br><span class="line">    sort(src_str.<span class="built_in">begin</span>(), src_str.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">if</span> (r_str == src_str) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; ++i) &#123;<span class="comment">//第一位数（最高位）所以从1开始</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; ++j) &#123;<span class="comment">//第二位数</span></span><br><span class="line">            <span class="keyword">if</span> (i != j)<span class="comment">//前两位不相等</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">10</span>; ++k) &#123;<span class="comment">//第三位数</span></span><br><span class="line">                    <span class="keyword">if</span> (k != i &amp;&amp; k != j)<span class="comment">//第三位不与前两位相等</span></span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; <span class="number">10</span>; ++l) &#123;<span class="comment">//第四位数</span></span><br><span class="line">                            <span class="keyword">if</span> (l != i &amp;&amp; l != j &amp;&amp; l != k)<span class="comment">//不与前三位相等</span></span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="keyword">int</span> num = i * <span class="number">1000</span> + j * <span class="number">100</span> + k * <span class="number">10</span> + l;<span class="comment">//ijkl</span></span><br><span class="line">                                <span class="keyword">if</span> (j != <span class="number">0</span>) &#123;<span class="comment">//两个数的首位不能为0，但是i在开头就排除了</span></span><br><span class="line">                                    <span class="keyword">int</span> ans1 = i * (j * <span class="number">100</span> + k * <span class="number">10</span> + l);<span class="comment">//ijk*l</span></span><br><span class="line">                                    <span class="keyword">if</span> (check1(num, ans1)) &#123;</span><br><span class="line">                                        ansans++;</span><br><span class="line">                                        <span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="string">" "</span> &lt;&lt; i &lt;&lt; <span class="string">"*"</span> &lt;&lt; j * <span class="number">100</span> + k * <span class="number">10</span> + l &lt;&lt; <span class="string">"="</span> &lt;&lt; ans1</span><br><span class="line">                                             &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">if</span> (k != <span class="number">0</span>) &#123;<span class="comment">//两个数的首位不能为0，但是i在开头就排除了</span></span><br><span class="line">                                    <span class="keyword">int</span> ans2 = (i * <span class="number">10</span> + j) * (k * <span class="number">10</span> + l);<span class="comment">//ij*jk</span></span><br><span class="line">                                    <span class="keyword">if</span> ((i * <span class="number">10</span> + j) &lt; (k * <span class="number">10</span> + l) &amp;&amp;</span><br><span class="line">                                        check1(num, ans2)) &#123;<span class="comment">//两位数防止交换律产生的重复，所以加一条件：第一个数小于第二个数</span></span><br><span class="line">                                        ansans++;</span><br><span class="line">                                        <span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="string">" "</span> &lt;&lt; i * <span class="number">10</span> + j &lt;&lt; <span class="string">"*"</span> &lt;&lt; k * <span class="number">10</span> + l &lt;&lt; <span class="string">"="</span> &lt;&lt; ans2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line"><span class="comment">//                                if (l != 0) &#123;//两个数的首位不能为0，但是i在开头就排除了</span></span><br><span class="line"><span class="comment">//                                    int ans3 = (i * 100 + j * 10 + k) * l;//i*jkl</span></span><br><span class="line"><span class="comment">//                                    if (check1(num, ans3)) &#123;</span></span><br><span class="line"><span class="comment">//                                        ansans++;</span></span><br><span class="line"><span class="comment">//                                        cout &lt;&lt; num &lt;&lt; " " &lt;&lt; i * 100 + j * 10 + k * 10 &lt;&lt; "*" &lt;&lt; l &lt;&lt; "=" &lt;&lt; ans3</span></span><br><span class="line"><span class="comment">//                                             &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//                                    &#125;</span></span><br><span class="line"><span class="comment">//                                &#125;</span></span><br><span class="line"><span class="comment">//因为在前面就已经通过一位数乘以三位数枚举过了，所以这里的都是重复的 三位数乘以一位数</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ansans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>check是自己写的判断函数，通过循环去判断字符串中是否有另一个字符串中的字符，而老师用了先排序（C++中algorithm库里的）后直接判断字符串是否相等的方法，然后整体就是这么回事，枚举，筛选，如果把下面的注释全部打开，就会重复，因为乘法交换律，会有一样的 所以可以进行优化。现在发现了，stringstream去把int和string互相转换时非常好用的，还有这样一种枚举的方法，其他的在注释中都有了总结和说明，然后这一题，就到这吧。</p></li></ul><h2 id="2015年蓝桥杯"><a href="#2015年蓝桥杯" class="headerlink" title="2015年蓝桥杯"></a>2015年蓝桥杯</h2><ul><li><h3 id="第一题-2"><a href="#第一题-2" class="headerlink" title="第一题"></a>第一题</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by ZhiNian on 2019/3/31.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">方程整数解</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">方程: a^2 + b^2 + c^2 = 1000</span></span><br><span class="line"><span class="comment">（或参见【图1.jpg】）</span></span><br><span class="line"><span class="comment">这个方程有正整数解吗？有：a,b,c=6,8,30 就是一组解。</span></span><br><span class="line"><span class="comment">你能算出另一组合适的解吗？</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">请填写该解中最小的数字。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意：你提交的应该是一个整数，不要填写任何多余的内容或说明性文字。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">答案是：10</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;<span class="comment">//32^2=1024所以小于30</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">32</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">32</span>; ++j) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; <span class="number">32</span>; ++k) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i * i + j * j + k * k == <span class="number">1000</span>) &#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">"^2 + "</span> &lt;&lt; j &lt;&lt; <span class="string">"^2 + "</span> &lt;&lt; k &lt;&lt; <span class="string">"^2  "</span> &lt;&lt; <span class="string">"=1000 "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一题有点坑，因为我想写6的，但是答案是10，因为我没有看见这么一句话“你能算出另一组合适的解吗？”意思是另一组解的最小值，所以一定要仔细看题！！！</p></li><li><h3 id="第二题-2"><a href="#第二题-2" class="headerlink" title="第二题"></a>第二题</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by ZhiNian on 2019/3/31.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">/*星系炸弹</span></span><br><span class="line"><span class="comment"> 在X星系的广袤空间中漂浮着许多X星人造“炸弹”，用来作为宇宙中的路标。</span></span><br><span class="line"><span class="comment">每个炸弹都可以设定多少天之后爆炸。</span></span><br><span class="line"><span class="comment">比如：阿尔法炸弹2015年1月1日放置，定时为15天，则它在2015年1月16日爆炸。</span></span><br><span class="line"><span class="comment">有一个贝塔炸弹，2014年11月9日放置，定时为1000天，请你计算它爆炸的准确日期。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">请填写该日期，格式为 yyyy-mm-dd  即4位年份2位月份2位日期。比如：2015-02-19</span></span><br><span class="line"><span class="comment">请严格按照格式书写。不能出现其它文字或符号。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">答案是：2017-08-05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">21</span> + <span class="number">31</span>;</span><br><span class="line">    i += <span class="number">365</span>;<span class="comment">//2015年</span></span><br><span class="line">    i += <span class="number">366</span>;<span class="comment">//2016年</span></span><br><span class="line">    i += <span class="number">31</span> + <span class="number">28</span> + <span class="number">31</span> + <span class="number">30</span> + <span class="number">31</span> + <span class="number">30</span> + <span class="number">31</span> + <span class="number">5</span>;<span class="comment">//凑</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然这题有更简单的方法，用Excel表格，直接实现加法，因为天数不是很大，在系统时间范围内，所以可以直接用Excel加，见下图：<img src="/2019/03/25/%E8%93%9D%E6%A1%A5%E6%9D%AF/T2.png" alt="T2"></p><p>就是这么简单，但是呢！！！！！输入答案一定要是 2017-08-05，不能是2017-8-5。注意细节！</p></li><li><h3 id="第三题-2"><a href="#第三题-2" class="headerlink" title="第三题"></a>第三题</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by ZhiNian on 2019/3/31.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">奇妙的数字</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">小明发现了一个奇妙的数字。它的平方和立方正好把0~9的10个数字每个用且只用了一次。</span></span><br><span class="line"><span class="comment">你能猜出这个数字是多少吗？</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">请填写该数字，不要填写任何多余的内容。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">答案是：69</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">i2s</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">stringstream</span> ss;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    ss &lt;&lt; a;</span><br><span class="line">    ss &gt;&gt; str;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str2 = i2s(n * n);</span><br><span class="line">    <span class="built_in">string</span> str3 = i2s(n * n * n);</span><br><span class="line">    <span class="keyword">if</span> (str2.length() + str3.length() != <span class="number">10</span>)<span class="comment">//长度不为10返回错误</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str2.length(); ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str3.<span class="built_in">find</span>(str2[i]) != <span class="built_in">string</span>::npos)<span class="comment">//在立方字符串中找到了平方字符串中的字符返回错误</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; str2.length(); ++j) &#123;<span class="comment">//在平方字符串中本身找到了重复返回错误</span></span><br><span class="line">        <span class="keyword">if</span> (str2.<span class="built_in">find</span>(str2[j]) != j)</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 用的是一个find返回位置的技巧，比如2532，当i循环到0时 str[0]="2" str="2532" 此时str.find("str[0]")=0</span></span><br><span class="line"><span class="comment">             * 但是当 i循环到3 str[3]="2" 但是 str.find("str[3]")=0 返回的是第一个2的位置，当位置不同说明有重复数字</span></span><br><span class="line"><span class="comment">             * 即 str.find(str[i]) != i</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; str3.length(); ++k) &#123;<span class="comment">//在立方字符串中本身找到了重复返回错误</span></span><br><span class="line">        <span class="keyword">if</span> (str3.<span class="built_in">find</span>(str3[k])!= k)<span class="comment">//</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2500</span>; ++i) &#123;<span class="comment">//因为2500这个数字的立方已经十一位数了</span></span><br><span class="line">        <span class="keyword">if</span> (check(i))</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是自己写的算法，感觉理解挺简单的，但是觉得自己的判断方法（判断重复）有点傻逼，当然接下来还有老师的算法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;sstream&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void i2s(int num, string &amp;str) &#123;</span><br><span class="line">    stringstream ss;</span><br><span class="line">    ss &lt;&lt; num;</span><br><span class="line">    ss &gt;&gt; str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool check(string s) &#123;</span><br><span class="line">    set&lt;char&gt; ss;</span><br><span class="line">    for (int i = 0; i &lt; s.length(); ++i) &#123;</span><br><span class="line">        ss.insert(s[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    return s.size()==10&amp;&amp;ss.size()==10;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, const char *argv[]) &#123;</span><br><span class="line">    for (int i = 1; i &lt; 100000; ++i) &#123;</span><br><span class="line">        string s1, s2;</span><br><span class="line">        i2s(i * i, s1);</span><br><span class="line">        i2s(i * i * i, s2);</span><br><span class="line">        if (check(s1 + s2)) &#123;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h3 id="第三题的填充"><a href="#第三题的填充" class="headerlink" title="第三题的填充"></a>第三题的填充</h3><p><strong>set的各成员函数列表如下:</strong></p><p>c++ stl容器set成员函数:<code>begin()</code>–返回指向第一个元素的迭代器</p><p>c++ stl容器set成员函数:<code>clear()</code>–清除所有元素</p><p>c++ stl容器set成员函数:<code>count()</code>–返回某个值元素的个数</p><p>c++ stl容器set成员函数:<code>empty()</code>–如果集合为空，返回true</p><p>c++ stl容器set成员函数:<code>end()</code>–返回指向最后一个元素的迭代器</p><p>c++ stl容器set成员函数:<code>equal_range()</code>–返回集合中与给定值相等的上下限的两个迭代器</p><p>c++ stl容器set成员函数:<code>erase()</code>–删除集合中的元素</p><p>c++ stl容器set成员函数:<code>find()</code>–返回一个指向被查找到元素的迭代器</p><p>c++ stl容器set成员函数:<code>get_allocator()</code>–返回集合的分配器</p><p>c++ stl容器set成员函数:<code>insert()</code>–在集合中插入元素</p><p>c++ stl容器set成员函数:<code>lower_bound()</code>–返回指向大于（或等于）某值的第一个元素的迭代器</p><p>c++ stl容器set成员函数:<code>key_comp()</code>–返回一个用于元素间值比较的函数</p><p>c++ stl容器set成员函数:<code>max_size()</code>–返回集合能容纳的元素的最大限值</p><p>c++ stl容器set成员函数:<code>rbegin()</code>–返回指向集合中最后一个元素的反向迭代器</p><p>c++ stl容器set成员函数:<code>rend()</code>–返回指向集合中第一个元素的反向迭代器</p><p>c++ stl容器set成员函数:<code>size()</code>–集合中元素的数目</p><p>c++ stl容器set成员函数:<code>swap()</code>–交换两个集合变量</p><p>c++ stl容器set成员函数:<code>upper_bound()</code>–返回大于某个值元素的迭代器</p><p>c++ stl容器set成员函数:<code>value_comp()</code>–返回一个用于比较元素间的值的函数</p><p>而上题老师的算法用到了“c++ stl容器set成员函数:<code>insert()</code>–在集合中插入元素”set容器是一个集合，所以当往里面加入重复的元素的时候会自动覆盖，而老师是将，平方和立方两个字符串全部加入到同一个集合，然后组成了ss，当ss的长度为10，说明没有重复的，若有重复的元素则set容器的元素肯定是无法到达10的，这个技巧超级棒，研究完五年的蓝桥杯前面几道题，就先去学一学 STL 特别好用！</p></li></ul><h2 id="2016年蓝桥杯"><a href="#2016年蓝桥杯" class="headerlink" title="2016年蓝桥杯"></a>2016年蓝桥杯</h2><ul><li><h3 id="第一题-3"><a href="#第一题-3" class="headerlink" title="第一题"></a>第一题</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by ZhiNian on 2019/3/31.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">网友年龄</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">某君新认识一网友。</span></span><br><span class="line"><span class="comment">当问及年龄时，他的网友说：</span></span><br><span class="line"><span class="comment">“我的年龄是个2位数，我比儿子大27岁,</span></span><br><span class="line"><span class="comment">如果把我的年龄的两位数字交换位置，刚好就是我儿子的年龄”</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">请你计算：网友的年龄一共有多少种可能情况？</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">提示：30岁就是其中一种可能哦.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">请填写表示可能情况的种数。</span></span><br><span class="line"><span class="comment">注意：你提交的应该是一个整数，不要填写任何多余的内容或说明性文字。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">10</span>; i &lt; <span class="number">100</span>; ++i) &#123;<span class="comment">//父亲的年龄枚举</span></span><br><span class="line">        <span class="keyword">int</span> j = i - <span class="number">27</span>;<span class="comment">//通过这样求出假定儿子的年龄</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt; j &amp;&amp; (i / <span class="number">10</span> + i % <span class="number">10</span> * <span class="number">10</span>) == j) &#123;<span class="comment">//如果儿子的年龄小于父亲的年龄切两位数倒过来相等的话</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span> &lt;&lt; j &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//输出</span></span><br><span class="line">            ans++;<span class="comment">//计数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//输出具体有多少种情况</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>很简单，不多裹述。</p></li><li><h3 id="第二题-3"><a href="#第二题-3" class="headerlink" title="第二题"></a>第二题</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by ZhiNian on 2019/4/2.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">生日蜡烛</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">某君从某年开始每年都举办一次生日party，并且每次都要吹熄与年龄相同根数的蜡烛。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">现在算起来，他一共吹熄了236根蜡烛。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">请问，他从多少岁开始过生日party的？</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">请填写他开始过生日party的年龄数。</span></span><br><span class="line"><span class="comment">注意：你提交的应该是一个整数，不要填写任何多余的内容或说明性文字。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i) &#123;<span class="comment">//开始吹蜡烛的年龄</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; ++j) &#123;<span class="comment">//今年年龄</span></span><br><span class="line">            <span class="keyword">if</span> (j &gt; i)</span><br><span class="line">                <span class="keyword">if</span> ((i + j) * (j - i + <span class="number">1</span>) / <span class="number">2</span> == <span class="number">236</span>)<span class="comment">//求和等于236的时候</span></span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span> &lt;&lt; j &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><h3 id="第三题-3"><a href="#第三题-3" class="headerlink" title="第三题"></a>第三题</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by ZhiNian on 2019/4/2.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">方格填数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如下的10个格子</span></span><br><span class="line"><span class="comment">   +--+--+--+</span></span><br><span class="line"><span class="comment">   |  |  |  |</span></span><br><span class="line"><span class="comment">+--+--+--+--+</span></span><br><span class="line"><span class="comment">|  |  |  |  |</span></span><br><span class="line"><span class="comment">+--+--+--+--+</span></span><br><span class="line"><span class="comment">|  |  |  |</span></span><br><span class="line"><span class="comment">+--+--+--+</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">（如果显示有问题，也可以参看【图7-1.jpg】）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">填入0~9的数字。要求：连续的两个数字不能相邻。</span></span><br><span class="line"><span class="comment">（左右、上下、对角都算相邻）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">一共有多少种可能的填数方案？</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">请填写表示方案数目的整数。</span></span><br><span class="line"><span class="comment">注意：你提交的应该是一个整数，不要填写任何多余的内容或说明性文字。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">            <span class="built_in">abs</span>(a[<span class="number">0</span>] - a[<span class="number">1</span>]) == <span class="number">1</span> ||</span><br><span class="line">            <span class="built_in">abs</span>(a[<span class="number">0</span>] - a[<span class="number">3</span>]) == <span class="number">1</span> ||</span><br><span class="line">            <span class="built_in">abs</span>(a[<span class="number">0</span>] - a[<span class="number">4</span>]) == <span class="number">1</span> ||</span><br><span class="line">            <span class="built_in">abs</span>(a[<span class="number">0</span>] - a[<span class="number">5</span>]) == <span class="number">1</span> ||</span><br><span class="line"></span><br><span class="line">            <span class="built_in">abs</span>(a[<span class="number">1</span>] - a[<span class="number">2</span>]) == <span class="number">1</span> ||</span><br><span class="line">            <span class="built_in">abs</span>(a[<span class="number">1</span>] - a[<span class="number">4</span>]) == <span class="number">1</span> ||</span><br><span class="line">            <span class="built_in">abs</span>(a[<span class="number">1</span>] - a[<span class="number">5</span>]) == <span class="number">1</span> ||</span><br><span class="line">            <span class="built_in">abs</span>(a[<span class="number">1</span>] - a[<span class="number">6</span>]) == <span class="number">1</span> ||</span><br><span class="line"></span><br><span class="line">            <span class="built_in">abs</span>(a[<span class="number">2</span>] - a[<span class="number">5</span>]) == <span class="number">1</span> ||</span><br><span class="line">            <span class="built_in">abs</span>(a[<span class="number">2</span>] - a[<span class="number">6</span>]) == <span class="number">1</span> ||</span><br><span class="line"></span><br><span class="line">            <span class="built_in">abs</span>(a[<span class="number">3</span>] - a[<span class="number">4</span>]) == <span class="number">1</span> ||</span><br><span class="line">            <span class="built_in">abs</span>(a[<span class="number">3</span>] - a[<span class="number">7</span>]) == <span class="number">1</span> ||</span><br><span class="line">            <span class="built_in">abs</span>(a[<span class="number">3</span>] - a[<span class="number">8</span>]) == <span class="number">1</span> ||</span><br><span class="line"></span><br><span class="line">            <span class="built_in">abs</span>(a[<span class="number">4</span>] - a[<span class="number">5</span>]) == <span class="number">1</span> ||</span><br><span class="line">            <span class="built_in">abs</span>(a[<span class="number">4</span>] - a[<span class="number">7</span>]) == <span class="number">1</span> ||</span><br><span class="line">            <span class="built_in">abs</span>(a[<span class="number">4</span>] - a[<span class="number">8</span>]) == <span class="number">1</span> ||</span><br><span class="line">            <span class="built_in">abs</span>(a[<span class="number">4</span>] - a[<span class="number">9</span>]) == <span class="number">1</span> ||</span><br><span class="line"></span><br><span class="line">            <span class="built_in">abs</span>(a[<span class="number">5</span>] - a[<span class="number">6</span>]) == <span class="number">1</span> ||</span><br><span class="line">            <span class="built_in">abs</span>(a[<span class="number">5</span>] - a[<span class="number">8</span>]) == <span class="number">1</span> ||</span><br><span class="line">            <span class="built_in">abs</span>(a[<span class="number">5</span>] - a[<span class="number">9</span>]) == <span class="number">1</span> ||</span><br><span class="line"></span><br><span class="line">            <span class="built_in">abs</span>(a[<span class="number">6</span>] - a[<span class="number">9</span>]) == <span class="number">1</span> ||</span><br><span class="line"></span><br><span class="line">            <span class="built_in">abs</span>(a[<span class="number">7</span>] - a[<span class="number">8</span>]) == <span class="number">1</span> ||</span><br><span class="line"></span><br><span class="line">            <span class="built_in">abs</span>(a[<span class="number">8</span>] - a[<span class="number">9</span>]) == <span class="number">1</span></span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="comment">//x为第几个方格</span></span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">10</span>)</span><br><span class="line">        <span class="keyword">if</span> (check())</span><br><span class="line">            ans++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt; <span class="number">10</span>; ++i) &#123;<span class="comment">//非常 重要的一种全排列方式</span></span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        temp = a[x];</span><br><span class="line">        a[x] = a[i];</span><br><span class="line">        a[i] = temp;</span><br><span class="line">        f(x + <span class="number">1</span>);</span><br><span class="line">        temp = a[x];</span><br><span class="line">        a[x] = a[i];</span><br><span class="line">        a[i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    f(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>这里很重要，这是一个全排列加筛选的题目，老师讲了三种全排列的方式，但是这一种是我觉得最容易记忆最容易理解的，先赋初值，然后通过第一个与自己本身和后面的所有的数字去交换得到了第一个位置的全排列，接下来再写递归写进去，到第二个位置的排列往后选，因为第一个位置已经定了，当递归出来的时候再把数字换回来，和下一个交换，可能文字有些难理解，但是就大概是这样意思，这个筛选的check也是脑残方法，比较容易理解的，直接将所有不可以的情况列出来就好。</p><h2 id="2017年蓝桥杯"><a href="#2017年蓝桥杯" class="headerlink" title="2017年蓝桥杯"></a>2017年蓝桥杯</h2><h3 id="第一题-4"><a href="#第一题-4" class="headerlink" title="第一题"></a>第一题</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by ZhiNian on 2019/4/6.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">标题：迷宫</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">X星球的一处迷宫游乐场建在某个小山坡上。</span></span><br><span class="line"><span class="comment">它是由10x10相互连通的小房间组成的。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">房间的地板上写着一个很大的字母。</span></span><br><span class="line"><span class="comment">我们假设玩家是面朝上坡的方向站立，则：</span></span><br><span class="line"><span class="comment">L表示走到左边的房间，</span></span><br><span class="line"><span class="comment">R表示走到右边的房间，</span></span><br><span class="line"><span class="comment">U表示走到上坡方向的房间，</span></span><br><span class="line"><span class="comment">D表示走到下坡方向的房间。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">X星球的居民有点懒，不愿意费力思考。</span></span><br><span class="line"><span class="comment">他们更喜欢玩运气类的游戏。这个游戏也是如此！</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">开始的时候，直升机把100名玩家放入一个个小房间内。</span></span><br><span class="line"><span class="comment">玩家一定要按照地上的字母移动。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">UDDLUULRUL</span></span><br><span class="line"><span class="comment">UURLLLRRRU</span></span><br><span class="line"><span class="comment">RRUURLDLRD</span></span><br><span class="line"><span class="comment">RUDDDDUUUU</span></span><br><span class="line"><span class="comment">URUDLLRRUU</span></span><br><span class="line"><span class="comment">DURLRLDLRL</span></span><br><span class="line"><span class="comment">ULLURLLRDU</span></span><br><span class="line"><span class="comment">RDLULLRDDD</span></span><br><span class="line"><span class="comment">UUDDUDUDLL</span></span><br><span class="line"><span class="comment">ULRDLUURRR</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">请你计算一下，最后，有多少玩家会走出迷宫?</span></span><br><span class="line"><span class="comment">而不是在里边兜圈子。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">请提交该整数，表示走出迷宫的玩家数目，不要填写任何多余的内容。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如果你还没明白游戏规则，可以参看一个简化的4x4迷宫的解说图：</span></span><br><span class="line"><span class="comment">p4-1.png</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> data[<span class="number">10</span>];<span class="comment">//巧妙地去定义二维数组</span></span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">10</span>][<span class="number">10</span>];<span class="comment">//记录是否能出去</span></span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">-1</span> || i == <span class="number">10</span> || j == <span class="number">-1</span> || j == <span class="number">10</span>)<span class="comment">//出界</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (vis[i][j] == <span class="number">1</span>)<span class="comment">//走之前走过的路</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    vis[i][j] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (data[i][j] == <span class="string">'U'</span>)</span><br><span class="line">        <span class="keyword">return</span> fun(i - <span class="number">1</span>, j);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (data[i][j] == <span class="string">'D'</span>)</span><br><span class="line">        <span class="keyword">return</span> fun(i + <span class="number">1</span>, j);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (data[i][j] == <span class="string">'L'</span>)</span><br><span class="line">        <span class="keyword">return</span> fun(i, j - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (data[i][j] == <span class="string">'R'</span>)</span><br><span class="line">        <span class="keyword">return</span> fun(i, j + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//    switch (data[i][j])&#123;</span></span><br><span class="line"><span class="comment">//        case 'U':</span></span><br><span class="line"><span class="comment">//            return fun(i-1,j);</span></span><br><span class="line"><span class="comment">//        case 'D':</span></span><br><span class="line"><span class="comment">//            return fun(i+1,j);</span></span><br><span class="line"><span class="comment">//        case 'L':</span></span><br><span class="line"><span class="comment">//            return fun(i,j-1);</span></span><br><span class="line"><span class="comment">//        case 'R':</span></span><br><span class="line"><span class="comment">//            return fun(i,j+1);</span></span><br><span class="line"><span class="comment">//        default:</span></span><br><span class="line"><span class="comment">//            return false;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    data[<span class="number">0</span>] = <span class="string">"UDDLUULRUL"</span>;</span><br><span class="line">    data[<span class="number">1</span>] = <span class="string">"UURLLLRRRU"</span>;</span><br><span class="line">    data[<span class="number">2</span>] = <span class="string">"RRUURLDLRD"</span>;</span><br><span class="line">    data[<span class="number">3</span>] = <span class="string">"RUDDDDUUUU"</span>;</span><br><span class="line">    data[<span class="number">4</span>] = <span class="string">"URUDLLRRUU"</span>;</span><br><span class="line">    data[<span class="number">5</span>] = <span class="string">"DURLRLDLRL"</span>;</span><br><span class="line">    data[<span class="number">6</span>] = <span class="string">"ULLURLLRDU"</span>;</span><br><span class="line">    data[<span class="number">7</span>] = <span class="string">"RDLULLRDDD"</span>;</span><br><span class="line">    data[<span class="number">8</span>] = <span class="string">"UUDDUDUDLL"</span>;</span><br><span class="line">    data[<span class="number">9</span>] = <span class="string">"ULRDLUURRR"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; ++j) &#123;</span><br><span class="line">            <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));<span class="comment">//初始化标记</span></span><br><span class="line">            <span class="keyword">if</span> (fun(i, j))<span class="comment">//false能出去</span></span><br><span class="line">                ans++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>学到了有些时候不一定一直用if if if，还可以switch啊，还有学到了一个函数叫 memset 这个东西太好用了，避免了像以前，还得用循环去初始化一个数组，或许是我没有好好听课，还有就是，当输入二维数组麻烦的时候，可以通过定义一个string的一维数组，去充当二维数组使用！</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;历年来的蓝桥杯所刷的题目。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="C/C++" scheme="https://zh1n1an.github.io/categories/C-C/"/>
    
      <category term="蓝桥杯" scheme="https://zh1n1an.github.io/categories/C-C/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
    
      <category term="蓝桥杯" scheme="https://zh1n1an.github.io/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
  </entry>
  
  <entry>
    <title>八皇后问题</title>
    <link href="https://zh1n1an.github.io/2019/03/25/%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/"/>
    <id>https://zh1n1an.github.io/2019/03/25/八皇后问题/</id>
    <published>2019-03-25T08:59:27.000Z</published>
    <updated>2019-11-08T12:58:50.558Z</updated>
    
    <content type="html"><![CDATA[<p>5天后才把这个代码上传，因为经历了一个绝望的蓝桥杯，下一篇我会总结一下成败，加油吧。</p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by ZhiNian on 2019/3/20.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">15</span>;<span class="comment">//N为N皇N的值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[N];<span class="comment">//记录每一个皇后的所在位置</span></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;<span class="comment">//记录可行次数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="comment">//判断此位置能否放皇后 x：第几行的皇后 y：第x行皇后所需要判断的位置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] == a[x] || <span class="built_in">fabs</span>(x - i) == <span class="built_in">fabs</span>(a[x] - a[i]))<span class="comment">//通过数组已经肯定不在同一行了，判断不在同一列和不在斜率为±1的斜线上</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">queen</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="comment">//x为第几个皇后即第几层 y为皇后在第几列</span></span><br><span class="line">    <span class="keyword">if</span> (x == N) &#123;<span class="comment">//到达最后一个皇后并且有他的位置则返回出一个可行方法（递归出口）</span></span><br><span class="line">        ans++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;<span class="comment">//从传上来的此位置和此皇后向右遍历能否放皇后</span></span><br><span class="line">            a[x] = i;<span class="comment">//放棋子</span></span><br><span class="line">            <span class="keyword">if</span> (check(x)) &#123;<span class="comment">//若可以则继续往下判断</span></span><br><span class="line">                queen(x + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//void time() &#123;//记录每一次得出结果的时间</span></span><br><span class="line"><span class="comment">//    DWORD start, stop;</span></span><br><span class="line"><span class="comment">//    unsigned int t = 0;</span></span><br><span class="line"><span class="comment">//    start = GetTickCount();</span></span><br><span class="line"><span class="comment">//    while (t++ &lt; 10e+6);</span></span><br><span class="line"><span class="comment">//    stop = GetTickCount();</span></span><br><span class="line"><span class="comment">//    cout &lt;&lt; "time: " &lt;&lt; stop - start &lt;&lt; "ms" &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DWORD start, <span class="built_in">stop</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">    start = GetTickCount();</span><br><span class="line">    queen(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">while</span> (t++ &lt; <span class="number">10e+6</span>);</span><br><span class="line">    <span class="built_in">stop</span> = GetTickCount();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"time: "</span> &lt;&lt; <span class="built_in">stop</span> - start &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span>.<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是标准的回溯递归算法，最终自己想出的垃圾算法没搞定，还是按着别人的思路去写出来了这个一个，加了一个时间函数去看运行时间，发现了一个问题，这样的回溯递归，8个皇后的时候：<img src="/2019/03/25/%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/3.jpg" alt="八皇3"></p><p>是这么一个时间。当10皇的时候呢：<img src="/2019/03/25/%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/2.jpg" alt="八皇2"></p><p>还好，不一一放图了，当15皇后的时候：<img src="/2019/03/25/%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/1.jpg" alt="八皇1"></p><p>发现这个时间感觉像指数增长，然后深入了解这个好像是一个NP问题，然后慢慢来吧，以后看到了再说，倒是在科技文学检索的这门课上搜索八皇问题有一个很厉害的算法交禁忌算法，不管N为多少都是0.1s，但是我好像在知网上找不到那个期刊了找到了再看吧！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;5天后才把这个代码上传，因为经历了一个绝望的蓝桥杯，下一篇我会总结一下成败，加油吧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://zh1n1an.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="C/C++" scheme="https://zh1n1an.github.io/categories/%E7%AE%97%E6%B3%95/C-C/"/>
    
    
      <category term="C/C++" scheme="https://zh1n1an.github.io/tags/C-C/"/>
    
      <category term="算法" scheme="https://zh1n1an.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>关于干掉二进制连续末尾1or单个末尾1</title>
    <link href="https://zh1n1an.github.io/2019/03/19/%E5%85%B3%E4%BA%8E%E5%B9%B2%E6%8E%89%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%BF%9E%E7%BB%AD%E6%9C%AB%E5%B0%BE1or%E5%8D%95%E4%B8%AA%E6%9C%AB%E5%B0%BE1/"/>
    <id>https://zh1n1an.github.io/2019/03/19/关于干掉二进制连续末尾1or单个末尾1/</id>
    <published>2019-03-19T05:20:46.000Z</published>
    <updated>2019-11-08T12:58:03.228Z</updated>
    
    <content type="html"><![CDATA[<p>蓝桥杯2016年 C/C++ A组 第五题</p><p>消除尾一</p><p>下面的代码把一个整数的二进制表示的最右边的连续的1全部变成0<br>如果最后一位是0，则原数字保持不变。</p><p>如果采用代码中的测试数据，应该输出：<br>00000000000000000000000001100111   00000000000000000000000001100000<br>00000000000000000000000000001100   00000000000000000000000000001100</p><a id="more"></a><p>请仔细阅读程序，填写划线部分缺少的代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">32</span>; i++) <span class="built_in">printf</span>(<span class="string">"%d"</span>, (x&gt;&gt;(<span class="number">31</span>-i))&amp;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"   "</span>);</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line">x = _______________________;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">32</span>; i++) <span class="built_in">printf</span>(<span class="string">"%d"</span>, (x&gt;&gt;(<span class="number">31</span>-i))&amp;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">f(<span class="number">103</span>);</span><br><span class="line">f(<span class="number">12</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>去掉末尾的最后一个1：一个二进制 <code>x=1000011010</code> 去掉最后的一个1  可以先减去1 得到 <code>1000011001</code></p><p>然后将两个二进制做与运算即 <code>x&amp;(x-1)</code> 可以得到 <code>1000011000</code> 最后两个的互异 所以为0</p><p>去掉末尾连续的1：一个二进制 <code>x=00000000000000000000000001100111</code> 去掉末尾连续的1，可以先加上1 得到 <code>00000000000000000000000001101000</code></p><p>然后再进行去除末尾1的处理，即可。代码：<code>(x+1)&amp;((x+1)-1)</code> 即 <code>(x+1)&amp;x</code></p><p>所以此题答案 <code>(x+1)&amp;x</code></p><p>整合代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by ZhiNian on 2019/3/19.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> i;</span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">32</span>; i++) <span class="built_in">printf</span>(<span class="string">"%d"</span>, (x&gt;&gt;(<span class="number">31</span>-i))&amp;<span class="number">1</span>);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"   "</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// x = _______________________;</span></span><br><span class="line">    x = (x+<span class="number">1</span>)&amp;x;</span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">32</span>; i++) <span class="built_in">printf</span>(<span class="string">"%d"</span>, (x&gt;&gt;(<span class="number">31</span>-i))&amp;<span class="number">1</span>);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   f(<span class="number">103</span>);</span><br><span class="line">   f(<span class="number">12</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;蓝桥杯2016年 C/C++ A组 第五题&lt;/p&gt;
&lt;p&gt;消除尾一&lt;/p&gt;
&lt;p&gt;下面的代码把一个整数的二进制表示的最右边的连续的1全部变成0&lt;br&gt;如果最后一位是0，则原数字保持不变。&lt;/p&gt;
&lt;p&gt;如果采用代码中的测试数据，应该输出：&lt;br&gt;00000000000000000000000001100111   00000000000000000000000001100000&lt;br&gt;00000000000000000000000000001100   00000000000000000000000000001100&lt;/p&gt;
    
    </summary>
    
    
      <category term="C/C++" scheme="https://zh1n1an.github.io/categories/C-C/"/>
    
      <category term="蓝桥杯" scheme="https://zh1n1an.github.io/categories/C-C/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
    
      <category term="C/C++" scheme="https://zh1n1an.github.io/tags/C-C/"/>
    
      <category term="算法" scheme="https://zh1n1an.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>二分查找</title>
    <link href="https://zh1n1an.github.io/2019/03/17/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    <id>https://zh1n1an.github.io/2019/03/17/二分查找/</id>
    <published>2019-03-17T14:08:52.000Z</published>
    <updated>2019-11-08T12:58:07.006Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>查找对象：顺序存储的有序表。</p></li><li><p>思路：由于查找的表是有序的（假设是从小到大），地址在中间位置的元素必然在排序中也属于中间次序。</p><p>step1：设置两个指针，一个（low）指向第一个元素，另一个（high）指向最后一个元素。</p><p>step2：找到中间元素（mid=(low+high)/2）与要查找的元素比较。</p><p>step3：若相等，万事大吉，返回当前位置（mid）；</p><p>​          若该元素大于目标元素，说明目标元素在左侧，指针high=mid-1，查找左边；</p><p>​          若该元素小于目标元素，说明目标元素在右侧，指针low=mid+1，查找右侧。</p><p>step4：重复step2、step3，指针查找到目标元素。</p><a id="more"></a></li><li><p>代码实现：</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 二分查找 </span></span><br><span class="line"><span class="comment">* @Date:2019/03/14</span></span><br><span class="line"><span class="comment">* @Author:Jason Hu</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binary_search</span><span class="params">(<span class="keyword">int</span> table[], <span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> high = <span class="number">9</span>;</span><br><span class="line"><span class="comment">//特别注意：这里必须是 &lt;= </span></span><br><span class="line"><span class="keyword">while</span>(low&lt;=high)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mid = (low+high)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(key==table[mid]) <span class="keyword">return</span> mid;</span><br><span class="line"><span class="keyword">if</span>(key&gt;table[mid]) low = mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(key&lt;table[mid]) high = mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//顺序存储的有序表</span></span><br><span class="line"><span class="keyword">int</span> table[<span class="number">10</span>] = &#123;<span class="number">5</span>, <span class="number">13</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">37</span>, <span class="number">56</span>, <span class="number">64</span>, <span class="number">75</span>, <span class="number">80</span>, <span class="number">92</span>&#125;;</span><br><span class="line"><span class="comment">//查找对象</span></span><br><span class="line"><span class="keyword">int</span> key = <span class="number">64</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;binary_search(table,key)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;查找对象：顺序存储的有序表。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;思路：由于查找的表是有序的（假设是从小到大），地址在中间位置的元素必然在排序中也属于中间次序。&lt;/p&gt;
&lt;p&gt;step1：设置两个指针，一个（low）指向第一个元素，另一个（high）指向最后一个元素。&lt;/p&gt;
&lt;p&gt;step2：找到中间元素（mid=(low+high)/2）与要查找的元素比较。&lt;/p&gt;
&lt;p&gt;step3：若相等，万事大吉，返回当前位置（mid）；&lt;/p&gt;
&lt;p&gt;​          若该元素大于目标元素，说明目标元素在左侧，指针high=mid-1，查找左边；&lt;/p&gt;
&lt;p&gt;​          若该元素小于目标元素，说明目标元素在右侧，指针low=mid+1，查找右侧。&lt;/p&gt;
&lt;p&gt;step4：重复step2、step3，指针查找到目标元素。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="C/C++" scheme="https://zh1n1an.github.io/categories/C-C/"/>
    
      <category term="数据结构" scheme="https://zh1n1an.github.io/categories/C-C/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="C/C++" scheme="https://zh1n1an.github.io/tags/C-C/"/>
    
      <category term="算法" scheme="https://zh1n1an.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>C/C++中的小细节</title>
    <link href="https://zh1n1an.github.io/2019/03/16/C-C-%E4%B8%AD%E7%9A%84%E5%B0%8F%E7%BB%86%E8%8A%82/"/>
    <id>https://zh1n1an.github.io/2019/03/16/C-C-中的小细节/</id>
    <published>2019-03-15T16:26:07.000Z</published>
    <updated>2019-11-08T05:42:18.603Z</updated>
    
    <content type="html"><![CDATA[<p>​       大二下开学，蓝桥杯，然后呢，第一次接触竞赛题，发现如此之难，看解题思路视频，发现看得懂思维跟上了，发现数据结构是个很重要的东西，但是学的是用C，而讲解用的都是C++，还发现C++有很多好用的内置函数，虽然学过C++，发现很多细节东西都不懂，所以重新学习了一下。</p><a id="more"></a><p>​       陌生的细节，记下：</p><p>1、C++中不能用<code>void main</code>，但是可以用<code>int main (void)</code>。<br>2、为什么需要使用<code>using namespace std;</code>因为在C++中 <code>#include&lt;iostream&gt;</code>没有扩展名，而<code>cin/cont/endl</code>等在std中，实际上为<code>std::cin/std::cout//std::endl</code>而为保证方便直接使用<code>cin/cout/endl</code>所以在<code>main</code>函数前加上<code>using namespace std</code>，即使用<code>std</code>名称空间，若只用<code>cin</code>，还可以在main函数前加上<code>using std::cin。</code><br>3、可以这样去初始化变量，<code>int a(432)。</code><br>4、<code>unsigned short</code>范围是0～65535，然而<code>short</code>范围是-32768～32767。</p><p>5、<code>cout&lt;&lt;hex</code> 以十六进制输出，<code>cout&lt;&lt;dec</code>以十进制输出，<code>cout&lt;&lt;oct</code>以八进制输出。</p><p>6、<code>\a</code> 表示振铃字符“坑爹找了半天没找到像铃铛的字符 结果是会响……”，<code>\b</code> 向后退一格（back），<code>\t</code>（tab），<code>\r</code>（回车）……</p><p>7、<code>coust</code> 限定符：</p><p><code>#include &lt;iostream&gt;</code><br><code>using namespace std;</code></p><p><code>int main(int argc, char const *argv[])</code><br><code>{</code><br>    <code>const int code = 10;</code><br>    <code>code = 20;//一定出错 因为code已经被定义为常量无法更改“error: assignment of read-only variable &#39;code&#39;</code><br>    <code>cout &lt;&lt; code &lt;&lt; endl;</code><br>    <code>return 0;</code><br><code>}</code></p><!--more--><p>8、<code>d.dddE+n</code>指的是将小数点向右移n位，而<code>d.dddE-n</code>指的是将小数点向左移n位。之所以被称为浮点数是因为小数点可移动。</p><p>9、<code>cin.getline(name,20);</code> 第一个参数是用来存储输入行的数组的名称，第二个参数是要读取的字符数，若为20，则最多只能读取19个字符，余下的用来存储“<code>\0</code>”，若没有第二个参数，则当用户输入“Enter”生成的换行符的时候，换行符被替换为空字符。但是基本上使用<code>get();</code>。</p><p>10、</p><p><code>cin.get(str1,20);</code></p><p><code>cin.get();</code></p><p>or</p><p><code>cin.get(str2,20).get();</code></p><p>多一个<code>get（）</code>是为了读取掉换行符！</p><p>11、string 类！！！</p><p><code>#include &lt;iostream&gt;</code><br><code>#include &lt;string&gt;</code><br><code>using namespace std;</code></p><p><code>int main(int argc, char const *argv[])</code><br><code>{</code><br>    <code>string str3;</code><br>    <code>string str1 = &quot;this&#39;s&quot;;</code><br>    <code>string str2 = &quot; an apple&quot;;</code><br>    <code>str3 = str1 + str2;</code><br>    <code>cout &lt;&lt; str3 &lt;&lt; endl;</code><br>    <code>str3 += str2;</code><br>    <code>cout &lt;&lt; str3 &lt;&lt; endl;</code><br>    <code>return 0;</code><br><code>}</code></p><p>可见 string类 可以相互赋值，可以拼接，还可以附加（+=）。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​       大二下开学，蓝桥杯，然后呢，第一次接触竞赛题，发现如此之难，看解题思路视频，发现看得懂思维跟上了，发现数据结构是个很重要的东西，但是学的是用C，而讲解用的都是C++，还发现C++有很多好用的内置函数，虽然学过C++，发现很多细节东西都不懂，所以重新学习了一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C/C++" scheme="https://zh1n1an.github.io/categories/C-C/"/>
    
      <category term="小细节" scheme="https://zh1n1an.github.io/categories/C-C/%E5%B0%8F%E7%BB%86%E8%8A%82/"/>
    
    
      <category term="C/C++" scheme="https://zh1n1an.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>关于使用C++进行字符和整型互转的简易方法</title>
    <link href="https://zh1n1an.github.io/2019/03/10/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8C-%E8%BF%9B%E8%A1%8C%E5%AD%97%E7%AC%A6%E5%92%8C%E6%95%B4%E5%9E%8B%E4%BA%92%E8%BD%AC%E7%9A%84%E7%AE%80%E6%98%93%E6%96%B9%E6%B3%95/"/>
    <id>https://zh1n1an.github.io/2019/03/10/关于使用C-进行字符和整型互转的简易方法/</id>
    <published>2019-03-10T09:06:40.000Z</published>
    <updated>2019-11-10T09:11:42.957Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在赛题上，有很多需要将整型数值进行一位一位运算的，或许最笨的办法就是除以100000……，但是在2013年蓝桥杯第二题的一个老师的视频解析里教了这么一种巧妙地办法，所以记录一下</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">int2string</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> a)</span> </span>&#123;<span class="comment">//int型转string</span></span><br><span class="line">    <span class="built_in">stringstream</span> ss;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    ss &lt;&lt; a;</span><br><span class="line">    ss &gt;&gt; str;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">string2int</span><span class="params">(<span class="built_in">string</span> str)</span> </span>&#123;<span class="comment">//string型转int</span></span><br><span class="line">    <span class="built_in">stringstream</span> ss;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    ss &lt;&lt; str;</span><br><span class="line">    ss &gt;&gt; a;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>感觉这一串代码就像英语作文反问一样的万能句型，背下背下~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在赛题上，有很多需要将整型数值进行一位一位运算的，或许最笨的办法就是除以100000……，但是在2013年蓝桥杯第二题的一个老师的视频解析里
      
    
    </summary>
    
    
      <category term="C/C++" scheme="https://zh1n1an.github.io/categories/C-C/"/>
    
      <category term="蓝桥杯" scheme="https://zh1n1an.github.io/categories/C-C/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
    
      <category term="C/C++" scheme="https://zh1n1an.github.io/tags/C-C/"/>
    
      <category term="算法" scheme="https://zh1n1an.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="蓝桥杯" scheme="https://zh1n1an.github.io/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
  </entry>
  
</feed>
